<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
    <script
        async
        src="https://tganalytics.xyz/index.js"
        onload="initAnalytics()"
        type="text/javascript"
    ></script>

    <!-- Telegram Web App SDK -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <!-- Telegram Mini App Analytics SDK -->
    <script type="module">
      import { Analytics } from 'https://cdn.jsdelivr.net/npm/@tma.js/analytics';
      const analytics = Analytics.init({
        token: "eyJhcHBfbmFtZSI6Ik1lbWVXb2xmIiwiYXBwX3VybCI6Imh0dHBzOi8vdC5tZS9NZW1ld29sZmVhcm5ib3QiLCJhcHBfZG9tYWluIjoiaHR0cHM6Ly9tZW1ld29sZmJvdC52ZXJjZWwuYXBwLyJ9!aHpBDg5nS3R8RqG692rUXAHxunVeLkJEzq7R2UIyP1M="
      });
      analytics.track("app_opened");
    </script>

    <!-- Add Telegram Analytics script to HTML head -->
    <script
        async
        src="https://unpkg.com/@telegram-apps/analytics@latest/dist/index.js"
        onload="initAnalytics()"
        type="text/javascript"
    ></script>

    <!-- ADDED: Monetag SDK Script -->
    <script src='//whephiwums.com/sdk.js' data-zone='9300768' data-sdk='show_9300768'></script>

    <script>
        function initAnalytics() {
          if (window.telegramAnalytics && typeof window.telegramAnalytics.init === 'function') {
              window.telegramAnalytics.init({
                  token: '7117728183:AAHNrUikov1d9lN1aojYGNyobKHOOvodUm4',
                  appName: 'MemeWolf',
              });
              console.log("Telegram Analytics Initialized");
          }
          console.log("Analytics Initialized (or attempted)");
        }
    </script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Meme Wolf // TERMINAL_TAP</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!-- ADDED: Pixel Font -->
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">

    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>

    <style>
        /* --- Global Styles & Reset (8-bit/Hacker Theme) --- */
        :root {
            --primary-bg: #0D0D0D; /* Dark hacker background */
            --secondary-bg: #1A1A1A; /* Slightly lighter dark */
            --accent-color: #00FF00; /* Neon Green */
            --accent-hover: #33FF33;
            --text-color: #00FF00; /* Green text */
            --text-muted-color: #A0A0A0; /* Grayish for less important text */
            --coin-color: #FFFF00; /* Yellow for coins, stands out */
            --icon-color: #00FF00;
            --icon-active-color: #FFFFFF;
            --button-bg: #222222;
            --button-border: #00FF00;
            --button-hover-bg: #333333;
            --button-hover-border: #33FF33;
            --success-color: #00FF00;
            --warning-color: #FFFF00;
            --error-color: #FF0000; /* Red for errors */
            --disabled-bg: #111111;
            --disabled-text: #555555;
            --disabled-border: #333333;
            --shadow-color: rgba(0, 255, 0, 0.2); /* Greenish shadow/glow */
            --glow-color: rgba(0, 255, 0, 0.5);

            --energy-bar-bg: #333333;
            --energy-bar-fill: #00FFFF; /* Cyan for energy */
            --energy-text-color: #00FFFF;
        }
        * { box-sizing: border-box; margin: 0; padding: 0; -webkit-tap-highlight-color: transparent; }
        html, body {
            height: 100%; width: 100%; overflow: hidden;
            font-family: 'Press Start 2P', cursive; /* PIXEL FONT */
            background-color: var(--primary-bg);
            color: var(--text-color);
            overscroll-behavior: none;
            font-size: 10px; /* Adjusted for pixel font, may need tweaking */
            line-height: 1.6;
        }
        body { display: flex; flex-direction: column; touch-action: manipulation; position: relative; }

        /* Scanline Overlay */
        body::before {
            content: ""; position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-image: repeating-linear-gradient(transparent, transparent 2px, rgba(0,0,0,0.2) 3px, rgba(0,0,0,0.2) 4px);
            background-size: 100% 4px;
            animation: scanlines 30s linear infinite;
            pointer-events: none; z-index: 2000; opacity: 0.5;
        }
        @keyframes scanlines { 0% { background-position: 0 0; } 100% { background-position: 0 100vh; } }

        #app { display: flex; flex-direction: column; height: 100%; width: 100%; overflow: hidden; }
        #loading {
            display: flex; flex-direction: column; justify-content: center; align-items: center;
            height: 100%; font-size: 1.8em; color: var(--accent-color); text-align: center;
            padding: 20px; text-shadow: 0 0 5px var(--glow-color);
            animation: blinkCursor 1s infinite;
        }
        @keyframes blinkCursor { 0%, 100% { opacity: 1; } 50% { opacity: 0.5; } }

        #main-content { flex-grow: 1; display: flex; overflow: hidden; }
        .page {
            width: 100%; height: 100%; display: none; flex-direction: column;
            flex-grow: 1; overflow-y: auto; -webkit-overflow-scrolling: touch;
            padding: 15px 10px 75px 10px; /* Padding bottom for nav */
            border: 2px solid var(--accent-color); margin: 5px;
            background-color: rgba(0,0,0,0.3); /* Slightly transparent inner box */
        }
        .page.active { display: flex; }
        nav {
            position: fixed; bottom: 0; left: 0; width: 100%;
            display: flex; justify-content: space-around; align-items: center;
            background-color: var(--secondary-bg);
            border-top: 2px solid var(--accent-color);
            padding: 5px 0; z-index: 100;
        }
        nav button {
            background: none; border: none; color: var(--icon-color); cursor: pointer;
            display: flex; flex-direction: column; align-items: center;
            font-size: 0.8em; /* Pixel font needs smaller relative size */
            padding: 5px; transition: color 0.2s ease, transform 0.1s ease;
            flex-grow: 1; flex-basis: 0;
        }
        nav button .material-icons { font-size: 22px; margin-bottom: 2px; }
        nav button:hover { color: var(--icon-active-color); transform: scale(1.05); }
        nav button.active { color: var(--accent-hover); border-bottom: 2px solid var(--accent-hover); }

        #game-screen { justify-content: space-between; align-items: center; text-align: center; padding-top: 5px; }
        .stats-bar {
            display: flex; justify-content: space-around; width: 100%; max-width: 320px;
            margin-bottom: 8px; font-size: 0.9em; color: var(--text-muted-color);
            background-color: var(--secondary-bg); padding: 6px 8px; border: 1px solid var(--button-border);
        }
        .stat-item { display: flex; align-items: center; gap: 4px; }
        .stat-item .material-icons { font-size: 14px; color: var(--coin-color); }

        /* Energy Bar Styles */
        #energy-section { width: 100%; max-width: 280px; margin: 5px auto 10px; text-align: center; }
        #energy-label { font-size: 0.9em; margin-bottom: 4px; color: var(--energy-text-color); }
        #energy-bar-container {
            width: 100%; height: 15px; background-color: var(--energy-bar-bg);
            border: 1px solid var(--energy-text-color); padding: 1px; margin-bottom: 3px;
        }
        #energy-bar-fill {
            width: 100%; height: 100%; background-color: var(--energy-bar-fill);
            transition: width 0.3s ease-out;
        }
        #energy-display { font-size: 0.9em; color: var(--energy-text-color); }
        #refill-energy-button { /* Uses .task-button styles, but specific ID for targeting */
            margin-top: 8px; font-size: 0.85em !important; padding: 6px 10px !important;
            background-color: var(--secondary-bg); border: 1px solid var(--energy-text-color); color: var(--energy-text-color);
        }
        #refill-energy-button:hover:not(:disabled) { background-color: var(--energy-bar-bg); }
        #energy-cooldown-timer { font-size: 0.8em; color: var(--warning-color); margin-top: 5px;}


        .coin-balance-container { display: flex; align-items: center; justify-content: center; margin-bottom: 10px; }
        #coin-icon-balance { width: 24px; height: 24px; margin-right: 6px; vertical-align: middle; image-rendering: pixelated; }
        #coin-balance { font-size: 2.5em; font-weight: normal; color: var(--coin-color); text-shadow: 0 0 8px var(--coin-color); }
        .coin-area { flex-grow: 1; display: flex; justify-content: center; align-items: center; width: 100%; margin-bottom: 8px; }
        #coin-container {
            position: relative; width: clamp(150px, 45vmin, 220px); height: clamp(150px, 45vmin, 220px);
            cursor: pointer; user-select: none; -webkit-user-drag: none; border: 2px solid var(--accent-color);
            padding: 5px; background-color: var(--secondary-bg);
        }
        #coin-image {
            width: 100%; height: 100%; transition: transform 0.05s ease-out;
            image-rendering: pixelated; /* CRISP PIXELS */
            filter: drop-shadow(0 0 10px var(--glow-color));
        }
        #coin-container:active #coin-image:not(.no-energy) { transform: scale(0.92); filter: drop-shadow(0 0 5px var(--glow-color)); }
        #coin-container.no-energy #coin-image { animation: shakeNoEnergy 0.3s linear; }
        @keyframes shakeNoEnergy {
            0%, 100% { transform: translateX(0); } 25% { transform: translateX(-3px); } 75% { transform: translateX(3px); }
        }


        #click-feedback { position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; overflow: hidden; z-index: 99; }
        .click-value {
            position: absolute; font-size: clamp(1.4em, 4vw, 2em); font-weight: normal;
            color: var(--coin-color); user-select: none; pointer-events: none;
            animation: floatUpFadeOutPixel 1.2s ease-out forwards; white-space: nowrap;
            text-shadow: 1px 1px 0px rgba(0,0,0,0.7);
        }
        @keyframes floatUpFadeOutPixel { 0% { opacity: 1; transform: translateY(0) scale(1); } 100% { opacity: 0; transform: translateY(-60px) scale(0.9); } }

        #shop-screen h2, #profile-screen h2, #tasks-screen h2, #ads-screen h2 {
            text-align: center; margin-bottom: 20px; color: var(--accent-color);
            font-size: 1.4em; text-shadow: 0 0 5px var(--glow-color); letter-spacing: 1px;
        }
        .shop-tabs, .task-tabs {
            display: flex; justify-content: center; margin-bottom: 20px;
            border-bottom: 1px solid var(--accent-color);
            position: sticky; top: -15px; /* Sticky tabs */
            background-color: var(--primary-bg); /* Match page bg for sticky */
            padding-top: 10px; z-index: 10;
        }
        .shop-tabs button, .task-tabs button {
            background: none; border: none; color: var(--icon-color); padding: 8px 12px;
            cursor: pointer; font-size: 0.9em; border-bottom: 2px solid transparent;
            margin-bottom: -1px; transition: color 0.2s ease, border-color 0.2s ease;
        }
        .shop-tabs button:hover, .task-tabs button:hover { color: var(--icon-active-color); }
        .shop-tabs button.active, .task-tabs button.active { color: var(--accent-color); border-bottom-color: var(--accent-color); }

        .shop-category, .task-list-category { display: none; flex-direction: column; gap: 10px; }
        .shop-category.active, .task-list-category.active { display: flex; }
        .shop-item, .task-item {
            background-color: var(--secondary-bg); padding: 10px;
            display: flex; justify-content: space-between; align-items: center;
            gap: 10px; border: 1px solid var(--button-border);
        }
        .shop-item-info, .task-item-info { flex-grow: 1; }
        .shop-item-name, .task-item-name { font-weight: normal; font-size: 1em; margin-bottom: 3px; color: var(--text-color); }
        .shop-item-details, .task-item-description { font-size: 0.8em; color: var(--text-muted-color); margin-bottom: 6px; }
        .shop-item-cost, .task-item-reward { display: flex; align-items: center; gap: 4px; font-weight: normal; color: var(--coin-color); font-size: 0.9em; }
        .shop-item-cost img, .task-item-reward img { width: 12px; height: 12px; image-rendering: pixelated; }

        .buy-button, .task-button, .mission-action-button, #save-wallet-button, #claim-lucky-code-btn {
            background-color: var(--button-bg); color: var(--text-color);
            border: 1px solid var(--button-border); padding: 8px 12px;
            cursor: pointer; font-weight: normal; font-size: 0.9em;
            transition: background-color 0.2s ease, border-color 0.2s ease, transform 0.1s ease;
            white-space: nowrap; font-family: 'Press Start 2P', cursive;
        }
        .buy-button:hover:not(:disabled), .task-button:hover:not(:disabled),
        .mission-action-button:hover:not(:disabled), #save-wallet-button:hover:not(:disabled),
        #claim-lucky-code-btn:hover:not(:disabled) {
            background-color: var(--button-hover-bg); border-color: var(--button-hover-border);
        }
        .buy-button:active:not(:disabled), .task-button:active:not(:disabled),
        .mission-action-button:active:not(:disabled), #save-wallet-button:active:not(:disabled),
        #claim-lucky-code-btn:active:not(:disabled) { transform: scale(0.97); }

        .buy-button:disabled, .task-button:disabled, .mission-action-button:disabled,
        #save-wallet-button:disabled, #claim-lucky-code-btn:disabled, #refill-energy-button:disabled {
            background: var(--disabled-bg); color: var(--disabled-text);
            border-color: var(--disabled-border); cursor: default; opacity: 0.7;
        }

        .profile-section {
            background-color: var(--secondary-bg); padding: 15px; margin-bottom: 15px;
            border: 1px solid var(--button-border);
        }
        .profile-info p { margin-bottom: 10px; font-size: 0.9em; line-height: 1.5; word-break: break-all; display: flex; align-items: center; flex-wrap: wrap; }
        .profile-info p strong { color: var(--coin-color); margin-right: 6px; min-width: 100px; display: inline-block; }
        .profile-info p span { flex-grow: 1; }
        .wallet-section label, .lucky-code-section label { display: block; margin-bottom: 8px; font-weight: normal; color: var(--text-muted-color); font-size: 0.9em; }
        #ton-wallet-input, #lucky-code-input {
            width: 100%; padding: 8px; margin-bottom: 12px;
            border: 1px solid var(--button-border); background-color: var(--primary-bg);
            color: var(--text-color); font-size: 0.9em; font-family: 'Press Start 2P', cursive;
        }
        #save-status, #lucky-code-status { margin-top: 10px; text-align: center; font-size: 0.85em; height: 1.2em; font-weight: normal; }
        #save-status { color: var(--success-color); }
        #lucky-code-status.error { color: var(--error-color); }
        #lucky-code-status.success { color: var(--success-color); }
        #lucky-code-status.claimed { color: var(--coin-color); }

        .mission-section { text-align: center; }
        .mission-title { font-size: 1.1em; font-weight: normal; margin-bottom: 8px; color: var(--text-color); }
        .mission-description { font-size: 0.85em; color: var(--text-muted-color); margin-bottom: 12px; line-height: 1.5; }
        .mission-emoji { font-size: 1.8em; margin: 0 4px; display: inline-block; cursor: default; }
        .copy-emoji-button {
            background: none; border: 1px solid var(--accent-color); color: var(--accent-color);
            padding: 4px 8px; font-size: 0.75em; cursor: pointer; margin-left: 8px;
            transition: background-color 0.2s ease, color 0.2s ease; font-family: 'Press Start 2P', cursive;
        }
        .copy-emoji-button:hover { background-color: var(--accent-color); color: var(--primary-bg); }
        .mission-status { font-weight: normal; margin: 12px 0; font-size: 0.9em; }
        .mission-status.incomplete { color: var(--text-muted-color); }
        .mission-status.claimed { color: var(--coin-color); }
        .reward-display { display: flex; align-items: center; justify-content: center; gap: 4px; font-weight: normal; color: var(--coin-color); margin-top: 4px; font-size: 0.9em; }
        .fine-applied { color: var(--error-color); font-weight: normal; margin-top: 8px; font-size: 0.8em; }
        .coin-icon { width: 1em; height: 1em; vertical-align: middle; margin: 0 2px; image-rendering: pixelated; }

        @keyframes shake { 10%, 90% { transform: translate3d(-1px, 0, 0); } 20%, 80% { transform: translate3d(2px, 0, 0); } 30%, 50%, 70% { transform: translate3d(-3px, 0, 0); } 40%, 60% { transform: translate3d(3px, 0, 0); } }

        .task-item-image { width: 40px; height: 40px; object-fit: contain; image-rendering: pixelated; flex-shrink: 0; background-color: var(--secondary-bg); border: 1px solid var(--button-border); }
        .task-actions { display: flex; flex-direction: column; align-items: flex-end; gap: 6px; flex-shrink: 0; }
        .verify-task-btn, .task-claimed-status { display: none; }
        .task-claimed-status { font-size: 0.85em; font-weight: normal; color: var(--success-color); }
        .task-item[data-completed="true"] .start-task-btn, .task-item[data-completed="true"] .verify-task-btn { display: none; }
        .task-item[data-completed="true"] .task-claimed-status { display: block; }
        .task-list-category > p { color: var(--text-muted-color); text-align: center; padding: 15px; font-style: normal; font-size: 0.9em; }

        .modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.85); display: none;
            justify-content: center; align-items: center; z-index: 1000;
            animation: fadeIn 0.2s ease-out;
        }
        .modal-overlay.visible { display: flex; }
        .modal-content {
            background: var(--secondary-bg); padding: 20px;
            border: 2px solid var(--accent-color);
            width: 90%; max-width: 380px; text-align: center;
            animation: slideIn 0.2s ease-out; box-shadow: 0 0 15px var(--glow-color);
        }
        .modal-title { font-size: 1.2em; font-weight: normal; color: var(--accent-color); margin-bottom: 12px; }
        .modal-description { font-size: 0.85em; color: var(--text-muted-color); margin-bottom: 15px; }
        .modal-input {
            width: 100%; padding: 8px; margin-bottom: 15px; border: 1px solid var(--button-border);
            background-color: var(--primary-bg); color: var(--text-color);
            font-size: 0.9em; text-align: center; font-family: 'Press Start 2P', cursive;
        }
        .modal-actions { display: flex; gap: 8px; justify-content: center; }
        .modal-button { padding: 8px 15px; font-size: 0.85em; }
        .modal-button.cancel { background: var(--disabled-bg); border-color: var(--disabled-border); color: var(--disabled-text); }
        .modal-button.cancel:hover { background: #444; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        @keyframes slideIn { from { transform: translateY(-15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }

        .lucky-code-section { text-align: center; }
        #lucky-code-input { text-align: center; margin-bottom: 8px; text-transform: uppercase; }
        #claim-lucky-code-btn { width: 100%; padding: 10px 15px; font-size: 0.9em; }

        /* Ads Screen Styles (Hacker Theme) */
        #ads-screen { justify-content: flex-start; align-items: center; text-align: center; }
        .ads-section {
            background-color: var(--secondary-bg); padding: 20px; margin-top: 15px;
            border: 1px solid var(--button-border); width: 100%; max-width: 400px;
        }
        .ads-section p { margin-bottom: 12px; line-height: 1.5; color: var(--text-muted-color); font-size:0.9em; }
        .ads-section p:first-child { font-size: 1em; color: var(--text-color); }
        #ad-status-container { margin-bottom: 15px; font-size: 0.85em; }
        #ad-status-container p { margin-bottom: 6px; }
        #ad-status-container span { font-weight: normal; color: var(--text-color); }
        #ad-status-container .coin-icon { vertical-align: baseline; width: 0.9em; height: 0.9em; }
        #watch-ad-button {
            width: 100%; padding: 10px 15px; font-size: 1em;
            background-color: var(--success-color); border: 1px solid var(--primary-bg); color: var(--primary-bg);
        }
        #watch-ad-button:hover:not(:disabled) { background-color: var(--accent-hover); }
        #watch-ad-button:disabled { background: var(--disabled-bg); border-color: var(--disabled-border); color: var(--disabled-text); }
        #ad-cooldown-timer { font-size: 0.85em; color: var(--warning-color); font-weight: normal; }
        #ad-message { font-size: 0.9em; min-height: 1.2em; }
        #ad-message.error { color: var(--error-color); }
        #ad-message.success { color: var(--success-color); }
        #ad-message.limit { color: var(--text-muted-color); }

    </style>
</head>
<body>
    <div id="app">
        <div id="loading">INITIALIZING MEME_WOLF_TERMINAL...</div>
        <div id="main-content" style="display: none;">

            <div id="game-screen" class="page active">
                 <div class="stats-bar">
                     <div class="stat-item" title="Coins per tap"><span class="material-icons">touch_app</span> <span id="tap-power-display">1</span></div>
                     <div class="stat-item" title="Profit per hour"><span class="material-icons">hourglass_bottom</span> <span id="passive-income-display">0</span>/hr</div>
                 </div>
                <!-- ADDED: Energy Section -->
                <div id="energy-section">
                    <div id="energy-label">SYSTEM_ENERGY:</div>
                    <div id="energy-bar-container">
                        <div id="energy-bar-fill"></div>
                    </div>
                    <div id="energy-display"><span id="current-energy-display">0</span> / <span id="max-energy-display">0</span></div>
                    <button id="refill-energy-button" class="task-button" disabled>⚡ Refill (Ad)</button>
                    <p id="energy-cooldown-timer" style="display: none;"></p>
                </div>

                <div class="coin-balance-container"><img id="coin-icon-balance" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt="Coin"> <span id="coin-balance">0</span></div>
                <div class="coin-area"><div id="coin-container"><img id="coin-image" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt="Tap Me!"></div></div>
                <div id="click-feedback"></div>
            </div>

            <div id="shop-screen" class="page">
                <h2>UPGRADE_MODULES</h2>
                <div class="shop-tabs">
                    <button id="tab-click" class="active" onclick="showShopCategory('click-upgrades')">TAP_BOOST</button>
                    <button id="tab-passive" onclick="showShopCategory('passive-upgrades')">AUTO_MINER</button>
                </div>
                <div id="click-upgrades" class="shop-category active"><p>Loading tap_boosts...</p></div>
                <div id="passive-upgrades" class="shop-category"><p>Loading auto_miners...</p></div>
            </div>

            <div id="tasks-screen" class="page">
                <h2>TASK_MATRIX</h2>
                <div class="task-tabs">
                    <button id="tab-available" class="active" onclick="showTaskListCategory('available-tasks-list')">AVAILABLE</button>
                    <button id="tab-completed" onclick="showTaskListCategory('completed-tasks-list')">COMPLETED</button>
                </div>
                <div id="available-tasks-list" class="task-list-category active">
                    <p>Scanning for tasks...</p>
                </div>
                <div id="completed-tasks-list" class="task-list-category">
                    <p>No completed tasks logged.</p>
                </div>
            </div>

            <div id="ads-screen" class="page">
                <h2>AD_NETWORK_REWARDS</h2>
                <div class="ads-section">
                    <p>Interface with ad_network for $MWC.</p>
                    <div id="ad-status-container">
                        <p>Daily Transmissions: <span id="ads-watched-today">0</span> / <span id="ads-daily-limit">20</span></p>
                        <p>Reward/Transmission: <span id="ad-reward-amount">1000</span> <img class="coin-icon" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt=""></p>
                    </div>
                    <button id="watch-ad-button" class="task-button" disabled>Connect to AdNet...</button>
                    <p id="ad-cooldown-timer" style="display: none;"></p>
                    <p id="ad-message"></p>
                </div>
            </div>

            <div id="profile-screen" class="page">
                <h2>USER_PROFILE</h2>
                <div class="profile-section profile-info">
                    <p><strong>USER_ID:</strong> <span id="profile-userid">N/A</span></p>
                    <p><strong>HANDLE:</strong> <span id="profile-username">N/A</span></p>
                    <p><strong>F_NAME:</strong> <span id="profile-firstname">N/A</span></p>
                    <p><strong>L_NAME:</strong> <span id="profile-lastname">N/A</span></p>
                    <p><strong>$MWC_BAL:</strong> <span id="profile-coins">0</span> <img class="coin-icon" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt=""></p>
                    <p><strong>TAP_PWR:</strong> <span id="profile-tap-power">1</span> / tap</p>
                    <p><strong>AUTO_MINE:</strong> <span id="profile-passive-income">0</span> / hour</p>
                </div>
                <div class="profile-section mission-section">
                    <div class="mission-title">🐺 WOLF_TAG_MISSION 🐺</div>
                    <p class="mission-description">Append <span class="mission-emoji" id="mission-emoji-display">🐺</span> to TG L_NAME. <button class="copy-emoji-button" id="copy-emoji-btn">CPY_EMJ</button> </p>
                    <div class="mission-status incomplete" id="mission-status">STATUS: PENDING_VERIFICATION</div>
                    <div id="fine-message-display" class="fine-applied" style="display: none;"></div>
                    <button class="mission-action-button" id="mission-claim-btn" disabled>VERIFY & CLAIM</button>
                    <div class="reward-display"><span>REWARD: 50K</span> <img src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" class="coin-icon" alt=""></div>
                </div>
                <div class="profile-section lucky-code-section">
                    <label for="lucky-code-input">🎁 DAILY_ACCESS_CODE</label>
                    <input type="text" id="lucky-code-input" placeholder="ENTER_CODE" maxlength="20">
                    <button id="claim-lucky-code-btn" class="task-button" disabled>SUBMIT_CODE</button>
                    <p id="lucky-code-status"></p>
                 </div>
                 <div class="profile-section wallet-section">
                    <label for="ton-wallet-input">TON_ADDR:</label>
                    <input type="text" id="ton-wallet-input" placeholder="INPUT_TON_WALLET_ADDR">
                    <button id="save-wallet-button" class="task-button">SAVE_ADDR</button>
                    <p id="save-status"></p>
                </div>
            </div>
        </div>

        <nav id="navbar" style="display: none;">
            <button id="nav-game" class="active" onclick="showPage('game-screen')"><span class="material-icons"> کي </span><span>TAP</span></button>
            <button id="nav-shop" onclick="showPage('shop-screen')"><span class="material-icons"> construção </span><span>MODS</span></button>
            <button id="nav-tasks" onclick="showPage('tasks-screen')"><span class="material-icons"> lista de verificação </span><span>TASKS</span></button>
            <button id="nav-ads" onclick="showPage('ads-screen')"><span class="material-icons">play_circle_filled</span><span>ADNET</span></button>
            <button id="nav-profile" onclick="showPage('profile-screen')"><span class="material-icons">account_circle</span><span>USER</span></button>
        </nav>

        <div id="code-popup" class="modal-overlay">
            <div class="modal-content">
                <h3 id="code-popup-title" class="modal-title">ENTER_VERIFICATION_CODE</h3>
                <p id="code-popup-description" class="modal-description">Input code from completed task.</p>
                <input type="text" id="code-popup-input" class="modal-input" placeholder="CODE_HERE">
                <div class="modal-actions">
                    <button id="code-popup-cancel" class="modal-button task-button cancel">CANCEL</button>
                    <button id="code-popup-submit" class="modal-button task-button">SUBMIT</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // --- Config ---
        const firebaseConfig = { apiKey: "AIzaSyCyH3Z92F8RQweInLC5w_bk_AaLx6XT7UE", authDomain: "ab-wallet-62482.firebaseapp.com", databaseURL: "https://ab-wallet-62482-default-rtdb.firebaseio.com", projectId: "ab-wallet-62482", storageBucket: "ab-wallet-62482.firebasestorage.app", messagingSenderId: "642030839072", appId: "1:642030839072:web:77fc92375ba72e2ee62345" };
        const COIN_IMAGE_URL = "https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png";
        const BASE_TAP_EARN = 1; const SAVE_INTERVAL = 5000; const PASSIVE_INCOME_INTERVAL = 1000; const INCREASING_COST_BASE = 10000; const WOLF_MISSION_REWARD = 50000; const WOLF_EMOJI = '🐺'; const CHEAT_FINE = 100000;
        const TASK_VERIFICATION_DELAY = 10000;

        const ADS_DAILY_LIMIT = 50; const AD_REWARD_AMOUNT = 1000; const AD_COOLDOWN_SECONDS = 20;
        const MONETAG_ZONE_ID = 9300768;

        // ADDED: Energy System Config
        const MAX_ENERGY = 1000;
        const ENERGY_PER_CLICK = 1;
        const ENERGY_REGEN_RATE_PER_SECOND = 1; // 1 energy per second
        const ENERGY_REGEN_INTERVAL = 1000; // Check/regen energy every second
        const ENERGY_AD_REFILL_COOLDOWN_SECONDS = 120; // 2 minutes cooldown for energy refill ad

        // --- Telegram & Firebase Vars ---
        let tg = null; let db = null; let currentUser = null; let userData = null; let lastSaveTime = 0; let saveTimeout = null; let passiveIncomeIntervalId = null; let isLoading = true;
        let availableTasks = {}; let currentCodeTaskId = null; let dailyLuckyCodeData = null;
        let adCooldownInterval = null; let adCooldownEndTime = 0; let monetagSdkReady = false;

        // ADDED: Energy System Vars
        let energyRegenIntervalId = null;
        let energyAdCooldownInterval = null;
        let energyAdCooldownEndTime = 0;


        // --- DOM Elements ---
        const loadingDiv = document.getElementById('loading'); const mainContentDiv = document.getElementById('main-content'); const navbar = document.getElementById('navbar'); const coinBalanceSpan = document.getElementById('coin-balance'); const tapPowerDisplaySpan = document.getElementById('tap-power-display'); const passiveIncomeDisplaySpan = document.getElementById('passive-income-display'); const coinContainer = document.getElementById('coin-container'); const coinImage = document.getElementById('coin-image'); const clickFeedbackDiv = document.getElementById('click-feedback'); const clickUpgradesDiv = document.getElementById('click-upgrades'); const passiveUpgradesDiv = document.getElementById('passive-upgrades'); const profileUserIdSpan = document.getElementById('profile-userid'); const profileUsernameSpan = document.getElementById('profile-username'); const profileFirstNameSpan = document.getElementById('profile-firstname'); const profileLastNameSpan = document.getElementById('profile-lastname'); const profileCoinsSpan = document.getElementById('profile-coins'); const profileTapPowerSpan = document.getElementById('profile-tap-power'); const profilePassiveIncomeSpan = document.getElementById('profile-passive-income'); const tonWalletInput = document.getElementById('ton-wallet-input'); const saveWalletButton = document.getElementById('save-wallet-button'); const saveStatusP = document.getElementById('save-status'); const missionEmojiDisplay = document.getElementById('mission-emoji-display'); const copyEmojiBtn = document.getElementById('copy-emoji-btn'); const missionStatusDiv = document.getElementById('mission-status'); const missionClaimBtn = document.getElementById('mission-claim-btn'); const fineMessageDisplay = document.getElementById('fine-message-display'); const navButtons = document.querySelectorAll('nav button'); const shopTabButtons = document.querySelectorAll('.shop-tabs button'); const shopCategories = document.querySelectorAll('.shop-category');
        const availableTasksListDiv = document.getElementById('available-tasks-list'); const completedTasksListDiv = document.getElementById('completed-tasks-list'); const taskTabButtons = document.querySelectorAll('.task-tabs button'); const taskListCategories = document.querySelectorAll('.task-list-category');
        const codePopup = document.getElementById('code-popup'); const codePopupTitle = document.getElementById('code-popup-title'); const codePopupDescription = document.getElementById('code-popup-description'); const codePopupInput = document.getElementById('code-popup-input'); const codePopupCancelBtn = document.getElementById('code-popup-cancel'); const codePopupSubmitBtn = document.getElementById('code-popup-submit');
        const luckyCodeInput = document.getElementById('lucky-code-input'); const claimLuckyCodeBtn = document.getElementById('claim-lucky-code-btn'); const luckyCodeStatus = document.getElementById('lucky-code-status');
        const adsWatchedTodaySpan = document.getElementById('ads-watched-today'); const adsDailyLimitSpan = document.getElementById('ads-daily-limit'); const adRewardAmountSpan = document.getElementById('ad-reward-amount'); const watchAdButton = document.getElementById('watch-ad-button'); const adCooldownTimerP = document.getElementById('ad-cooldown-timer'); const adMessageP = document.getElementById('ad-message');

        // ADDED: Energy DOM Elements
        const currentEnergyDisplaySpan = document.getElementById('current-energy-display');
        const maxEnergyDisplaySpan = document.getElementById('max-energy-display');
        const energyBarFillDiv = document.getElementById('energy-bar-fill');
        const refillEnergyButton = document.getElementById('refill-energy-button');
        const energyCooldownTimerP = document.getElementById('energy-cooldown-timer');


        // --- Upgrade Definitions --- (Omitted for brevity, assumed unchanged)
        const upgrades = [ { id: 'click_1', name: 'Stronger Paws', description: '+1 coin per tap', baseCost: 10000, baseEffect: 1, type: 'click' }, { id: 'click_2', name: 'Sharper Claws', description: '+2 coins per tap', baseCost: 100000, baseEffect: 2, type: 'click' }, { id: 'click_3', name: 'Meme Energy', description: '+5 coins per tap', baseCost: 500000, baseEffect: 5, type: 'click' }, { id: 'click_4', name: 'Wolf Pack Call', description: '+10 coins per tap', baseCost: 2000000, baseEffect: 10, type: 'click' }, { id: 'click_5', name: 'Lunar Boost', description: '+25 coins per tap', baseCost: 10000000, baseEffect: 25, type: 'click' }, { id: 'click_6', name: 'Golden Howl', description: '+50 coins per tap', baseCost: 50000000, baseEffect: 50, type: 'click' }, { id: 'click_7', name: 'Diamond Fangs', description: '+100 coins per tap', baseCost: 250000000, baseEffect: 100, type: 'click' }, { id: 'click_8', name: 'Alpha Presence', description: '+200 coins per tap', baseCost: 1000000000, baseEffect: 200, type: 'click' }, { id: 'click_9', name: 'Meme Lord Aura', description: '+500 coins per tap', baseCost: 5000000000, baseEffect: 500, type: 'click' }, { id: 'click_10', name: 'Cosmic Wolf', description: '+1000 coins per tap', baseCost: 20000000000, baseEffect: 1000, type: 'click' }, { id: 'passive_1', name: 'Sniffing Out Coins', description: '+100 profit/hour', baseCost: 10000, baseEffect: 100, type: 'passive' }, { id: 'passive_2', name: 'Digging Spot', description: '+250 profit/hour', baseCost: 50000, baseEffect: 250, type: 'passive' }, { id: 'passive_3', name: 'Buried Treasure Map', description: '+600 profit/hour', baseCost: 150000, baseEffect: 600, type: 'passive' }, { id: 'passive_4', name: 'Meme Stash', description: '+1,500 profit/hour', baseCost: 500000, baseEffect: 1500, type: 'passive' }, { id: 'passive_5', name: 'Coin Tree Sapling', description: '+3,500 profit/hour', baseCost: 1500000, baseEffect: 3500, type: 'passive' }, { id: 'passive_6', name: 'Howling ATM', description: '+8,000 profit/hour', baseCost: 5000000, baseEffect: 8000, type: 'passive' }, { id: 'passive_7', name: 'Loyal Pack Tribute', description: '+18,000 profit/hour', baseCost: 15000000, baseEffect: 18000, type: 'passive' }, { id: 'passive_8', name: 'Wolf Den Bank', description: '+40,000 profit/hour', baseCost: 50000000, baseEffect: 40000, type: 'passive' }, { id: 'passive_9', name: 'Meme Coin Mine', description: '+90,000 profit/hour', baseCost: 150000000, baseEffect: 90000, type: 'passive' }, { id: 'passive_10', name: 'Moonlit Mint', description: '+200K profit/hour', baseCost: 500000000, baseEffect: 200000, type: 'passive' }, { id: 'passive_11', name: 'Crypto Kennel', description: '+450K profit/hour', baseCost: 1200000000, baseEffect: 450000, type: 'passive' }, { id: 'passive_12', name: 'Decentralized Den', description: '+1M profit/hour', baseCost: 3000000000, baseEffect: 1000000, type: 'passive' }, { id: 'passive_13', name: 'Blockchain Burrow', description: '+2.2M profit/hour', baseCost: 7000000000, baseEffect: 2200000, type: 'passive' }, { id: 'passive_14', name: 'Wolf Street Journal', description: '+5M profit/hour', baseCost: 15000000000, baseEffect: 5000000, type: 'passive' }, { id: 'passive_15', name: 'Golden Bone Fund', description: '+11M profit/hour', baseCost: 35000000000, baseEffect: 11000000, type: 'passive' }, { id: 'passive_16', name: 'Diamond Paw Trust', description: '+25M profit/hour', baseCost: 80000000000, baseEffect: 25000000, type: 'passive' }, { id: 'passive_17', name: 'Alpha Investment Group', description: '+55M profit/hour', baseCost: 180000000000, baseEffect: 55000000, type: 'passive' }, { id: 'passive_18', name: 'Meme Hegemony', description: '+120M profit/hour', baseCost: 400000000000, baseEffect: 120000000, type: 'passive' }, { id: 'passive_19', name: 'Lunar Treasury', description: '+250M profit/hour', baseCost: 900000000000, baseEffect: 250000000, type: 'passive' }, { id: 'passive_20', name: 'Cosmic Coin Flow', description: '+500M profit/hour', baseCost: 2000000000000, baseEffect: 500000000, type: 'passive' }, ];

        // --- Initialization ---
        window.onload = () => {
             try {
                 isLoading = true; loadingDiv.textContent = "SYSTEM_BOOT SEQUENCE...";
                 tg = window.Telegram.WebApp; tg.ready(); tg.expand();
                 try { tg.setHeaderColor(getComputedStyle(document.documentElement).getPropertyValue('--primary-bg').trim()); tg.setBackgroundColor(getComputedStyle(document.documentElement).getPropertyValue('--primary-bg').trim()); } catch (themeError) { console.warn("TG THEME ERR:", themeError); }
                 if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) { showError("USER_AUTH_FAIL. Launch from TG."); return; }
                 currentUser = tg.initDataUnsafe.user;
                 firebase.initializeApp(firebaseConfig); db = firebase.database();

                 setTimeout(() => {
                     monetagSdkReady = typeof window[`show_${MONETAG_ZONE_ID}`] === 'function';
                     console.log("Monetag SDK Status:", monetagSdkReady);
                     if (!monetagSdkReady) console.warn(`Monetag func show_${MONETAG_ZONE_ID} N/A. Ads impacted.`);
                     loadUserDataAndInit();
                 }, 500);
                 setupEventListeners();
             } catch (error) { console.error("CRITICAL_INIT_ERR:", error); showError(`INIT_FAIL: ${error.message}. Reload.`); }
        };

        function showPopup(params) { if (tg) { try { tg.showPopup(params); } catch(e){ console.warn("POPUP_FAIL:", e); alert(`${params.title}\n\n${params.message}`); } } else { alert(`${params.title}\n\n${params.message}`); } }
        function showInfoPopup(title, message) { showPopup({ title: title || "INFO", message: message, buttons: [{ type: "ok", text: "OK" }] }); }
        function showWarningPopup(title, message) { showPopup({ title: title || "⚠️ WARNING", message: message, buttons: [{ type: "ok", text: "OK" }] }); }
        function showRewardPopup(title, message) { showPopup({ title: title || "🎉 REWARD!", message: message, buttons: [{ type: "ok", text: "OK" }] }); }

        function loadUserDataAndInit() {
             if (!currentUser || !db) { showError("USER/DB OFFLINE."); return; }
             const userId = currentUser.id.toString(); const userRef = db.ref('users/' + userId);
             loadingDiv.textContent = "ACCESSING USER_DATA...";
             userRef.once('value').then((snapshot) => {
                 const defaultData = {
                     coins: 0, upgrades: {}, missions: { lastNameWolf: 'incomplete' }, completedTasks: {},
                     lastLuckyCodeClaim: null, tonWallet: '',
                     ads: { watchedToday: 0, lastWatchedDate: null },
                     // ADDED: Energy data
                     currentEnergy: MAX_ENERGY, // Start with full energy for new users
                     lastEnergyAdWatchTime: 0,  // For energy ad cooldown
                     lastEnergyRegenTime: Date.now(), // For offline energy regen calc

                     lastUpdate: Date.now(),
                     telegramInfo: { id: currentUser.id, username: currentUser.username || null, firstName: currentUser.first_name || '', lastName: currentUser.last_name || '' }
                 };
                 if (snapshot.exists()) {
                     userData = snapshot.val();
                     userData.coins = userData.coins ?? defaultData.coins;
                     userData.upgrades = userData.upgrades ?? defaultData.upgrades;
                     userData.missions = userData.missions ?? defaultData.missions;
                     userData.missions.lastNameWolf = userData.missions.lastNameWolf ?? defaultData.missions.lastNameWolf;
                     userData.completedTasks = userData.completedTasks ?? defaultData.completedTasks;
                     userData.lastLuckyCodeClaim = userData.lastLuckyCodeClaim ?? defaultData.lastLuckyCodeClaim;
                     userData.tonWallet = userData.tonWallet ?? defaultData.tonWallet;
                     userData.ads = userData.ads ?? defaultData.ads;
                     userData.ads.watchedToday = userData.ads.watchedToday ?? defaultData.ads.watchedToday;
                     userData.ads.lastWatchedDate = userData.ads.lastWatchedDate ?? defaultData.ads.lastWatchedDate;
                     // ADDED: Load energy data
                     userData.currentEnergy = userData.currentEnergy ?? MAX_ENERGY; // Default to max if not present
                     userData.lastEnergyAdWatchTime = userData.lastEnergyAdWatchTime ?? defaultData.lastEnergyAdWatchTime;
                     userData.lastEnergyRegenTime = userData.lastEnergyRegenTime ?? Date.now();


                     userData.lastUpdate = userData.lastUpdate ?? defaultData.lastUpdate;
                     userData.telegramInfo = defaultData.telegramInfo;
                 } else {
                     console.log("New user protocol:", userId);
                     userData = defaultData;
                     saveUserData(true);
                 }

                 checkAndResetDailyAds();
                 const cheatDetected = performAntiCheatCheck();
                 if (!cheatDetected) { calculateOfflineProgress(); }
                 else { userData.lastUpdate = Date.now(); userData.lastEnergyRegenTime = Date.now(); }


                 return Promise.all([loadAndDisplayTasks(), loadDailyLuckyCode()]);
             }).then(() => {
                 initializeAppUI();
                 startPassiveIncome();
                 startEnergyRegeneration(); // ADDED: Start energy regen
                 isLoading = false; console.log("SYSTEM ONLINE.");
             }).catch((error) => {
                 console.error("FB_LOAD/INIT_ERR:", error); let displayMessage = `DATA_LOAD_FAIL. Check net & reload.`; if (error?.code) { displayMessage += ` (CODE: ${error.code})`; } showError(displayMessage); isLoading = false;
             });
        }

        function getTodayDateString() { /* ... as before ... */ const today = new Date(); const year = today.getFullYear(); const month = String(today.getMonth() + 1).padStart(2, '0'); const day = String(today.getDate()).padStart(2, '0'); return `${year}-${month}-${day}`; }
        function checkAndResetDailyAds() { /* ... as before ... */ if (!userData || !userData.ads) return; const todayStr = getTodayDateString(); if (userData.ads.lastWatchedDate !== todayStr) { console.log(`New day (${todayStr}). Resetting daily ad count.`); userData.ads.watchedToday = 0; userData.ads.lastWatchedDate = todayStr; } }

        function loadDailyLuckyCode() { /* ... as before ... */ if (!db) return Promise.reject("DB N/A for lucky_code"); console.log("Loading daily_code..."); return db.ref('dailyLuckyCode').once('value').then(snapshot => { dailyLuckyCodeData = snapshot.exists() ? snapshot.val() : null; console.log("Daily_code data:", dailyLuckyCodeData); updateLuckyCodeSectionUI(); }).catch(error => { console.error("Err loading daily_code:", error); dailyLuckyCodeData = null; updateLuckyCodeSectionUI(); }); }

        function saveUserData(force = false) {
             if (isLoading || !currentUser || !db || !userData) return;
             const now = Date.now();
             userData.lastUpdate = now;
             userData.lastEnergyRegenTime = now; // Also update this for accurate offline energy regen
             clearTimeout(saveTimeout);
             if (force || now - lastSaveTime > SAVE_INTERVAL) {
                 console.log("SAVING_USER_DATA...");
                 const userId = currentUser.id.toString();
                 userData.telegramInfo = { id: currentUser.id, username: currentUser.username || null, firstName: currentUser.first_name || '', lastName: currentUser.last_name || '' };
                 if (!userData.ads) userData.ads = { watchedToday: 0, lastWatchedDate: null };
                 // Ensure energy fields are present
                 userData.currentEnergy = userData.currentEnergy ?? MAX_ENERGY;
                 userData.lastEnergyAdWatchTime = userData.lastEnergyAdWatchTime ?? 0;

                 db.ref('users/' + userId).set(userData)
                   .then(() => { console.log("DATA_SAVE_OK."); lastSaveTime = now; })
                   .catch((error) => console.error("FB_SAVE_ERR:", error));
             } else {
                 saveTimeout = setTimeout(() => saveUserData(true), SAVE_INTERVAL - (now - lastSaveTime));
             }
        }

        function performAntiCheatCheck() { /* ... as before ... */ if (!userData || !currentUser) return false; const missionId = 'lastNameWolf'; const missionStatus = userData.missions?.[missionId]; const currentLastName = currentUser.last_name || ''; fineMessageDisplay.style.display = 'none'; if (missionStatus === 'claimed' && !currentLastName.endsWith(WOLF_EMOJI)) { const fineAmount = CHEAT_FINE; userData.coins = Math.max(0, userData.coins - fineAmount); userData.missions[missionId] = 'incomplete'; console.warn(`ANTI_CHEAT: User ${currentUser.id} removed emoji. Fine: ${formatNumber(fineAmount)}`); showWarningPopup("🚨 CHEAT_DETECTED!", `Emoji ${WOLF_EMOJI} removed from L_NAME! Fine: ${formatNumber(fineAmount)} $MWC.`); fineMessageDisplay.textContent = `PENALTY: -${formatNumber(fineAmount)} $MWC for emoji removal.`; fineMessageDisplay.style.display = 'block'; return true; } return false; }

        // --- Energy System Logic ---
        function updateEnergyDisplay() {
            if (!userData) return;
            currentEnergyDisplaySpan.textContent = Math.floor(userData.currentEnergy);
            maxEnergyDisplaySpan.textContent = MAX_ENERGY;
            const energyPercentage = (userData.currentEnergy / MAX_ENERGY) * 100;
            energyBarFillDiv.style.width = `${energyPercentage}%`;

            // Update refill button state
            const now = Date.now();
            const energyCooldownActive = now < energyAdCooldownEndTime;
            if (energyCooldownActive || !monetagSdkReady || userData.currentEnergy >= MAX_ENERGY) {
                refillEnergyButton.disabled = true;
            } else {
                refillEnergyButton.disabled = false;
            }
            if (userData.currentEnergy <= 0) {
                 coinContainer.classList.add('no-energy');
            } else {
                 coinContainer.classList.remove('no-energy');
            }
        }

        function regenerateEnergy() {
            if (isLoading || !userData || userData.currentEnergy >= MAX_ENERGY) return;
            userData.currentEnergy = Math.min(MAX_ENERGY, userData.currentEnergy + ENERGY_REGEN_RATE_PER_SECOND);
            updateEnergyDisplay();
            // No save here, passive regen is frequent. Will be saved with other actions/interval.
        }

        function startEnergyRegeneration() {
            if (energyRegenIntervalId) clearInterval(energyRegenIntervalId);
            energyRegenIntervalId = setInterval(regenerateEnergy, ENERGY_REGEN_INTERVAL);
            // Initial call for offline calculation might also update display
            updateEnergyDisplay();
        }


        function handleTap(event) {
            if (isLoading || !userData) return;

            if (userData.currentEnergy < ENERGY_PER_CLICK) {
                console.log("NO_ENERGY_FOR_TAP");
                if (!coinContainer.classList.contains('no-energy')) { // Prevent spamming animation
                    coinImage.classList.add('shake');
                    setTimeout(() => coinImage.classList.remove('shake'), 300);
                }
                return;
            }
            userData.currentEnergy -= ENERGY_PER_CLICK;

            const tapValue = calculateTapPower();
            userData.coins += tapValue;
            let clientX, clientY;
            if (event.touches && event.touches.length > 0) {
                for (let i = 0; i < event.touches.length; i++) { clientX = event.touches[i].clientX; clientY = event.touches[i].clientY; createClickAnimation(clientX, clientY, tapValue); }
            } else {
                clientX = event.clientX; clientY = event.clientY; createClickAnimation(clientX, clientY, tapValue);
            }
            updateCoinDisplay();
            updateEnergyDisplay(); // Update energy after tap
            scheduleSave();
        }

        function calculateTapPower() { /* ... as before ... */ let power = BASE_TAP_EARN; if (userData?.upgrades) { for (const upgradeId in userData.upgrades) { const upgradeDef = upgrades.find(u => u.id === upgradeId && u.type === 'click'); if (upgradeDef) { power += (upgradeDef.baseEffect || 0) * (userData.upgrades[upgradeId]?.level || 0); } } } return power; }
        function calculatePassiveIncomeRate() { /* ... as before ... */ let rate = 0; if (userData?.upgrades) { for (const upgradeId in userData.upgrades) { const upgradeDef = upgrades.find(u => u.id === upgradeId && u.type === 'passive'); if (upgradeDef) { rate += (upgradeDef.baseEffect || 0) * (userData.upgrades[upgradeId]?.level || 0); } } } return rate; }
        function applyPassiveIncome() { /* ... as before ... */ if (isLoading || !userData) return; const hourlyRate = calculatePassiveIncomeRate(); const incomePerTick = hourlyRate / 3600 * (PASSIVE_INCOME_INTERVAL / 1000); if (incomePerTick > 0) { userData.coins += incomePerTick; updateCoinDisplay(); } }
        function startPassiveIncome() { /* ... as before ... */ if (passiveIncomeIntervalId) clearInterval(passiveIncomeIntervalId); passiveIncomeIntervalId = setInterval(applyPassiveIncome, PASSIVE_INCOME_INTERVAL); }
        function scheduleSave() { saveUserData(); }

        function calculateOfflineProgress() {
            if (!userData || !userData.lastUpdate) return;
            const now = Date.now();
            const offlineSeconds = Math.max(0, Math.floor((now - userData.lastUpdate) / 1000));

            if (offlineSeconds < 10) return;

            // Offline Coin Income
            const hourlyRate = calculatePassiveIncomeRate();
            const offlineCoinIncome = (hourlyRate / 3600) * offlineSeconds;
            if (offlineCoinIncome > 0) {
                userData.coins += offlineCoinIncome;
                console.log(`Offline coin income: ${formatNumber(offlineCoinIncome)} for ${offlineSeconds}s.`);
                showRewardPopup("SYSTEM_RESYNC", `Earned ${formatNumber(offlineCoinIncome)} $MWC while offline!`);
            }

            // Offline Energy Regeneration
            // Use lastEnergyRegenTime for more accurate offline energy calculation
            const energyOfflineSeconds = Math.max(0, Math.floor((now - (userData.lastEnergyRegenTime || userData.lastUpdate)) / 1000));
            if (energyOfflineSeconds > 0 && userData.currentEnergy < MAX_ENERGY) {
                const energyGained = energyOfflineSeconds * ENERGY_REGEN_RATE_PER_SECOND;
                userData.currentEnergy = Math.min(MAX_ENERGY, userData.currentEnergy + energyGained);
                console.log(`Offline energy regen: ${formatNumber(energyGained)} for ${energyOfflineSeconds}s. Current: ${userData.currentEnergy}`);
            }
            userData.lastEnergyRegenTime = now; // Update timestamp after calculation
        }


        function checkAndClaimMission() { /* ... as before ... */ if (isLoading || !userData || !currentUser) return; const missionId = 'lastNameWolf'; const currentStatus = userData.missions?.[missionId] || 'incomplete'; const lastName = currentUser.last_name || ''; if (currentStatus === 'claimed') { showInfoPopup("ALREADY_CLAIMED", "Wolf_Tag_Mission reward claimed."); updateMissionUI(missionId, 'claimed'); return; } const isConditionMet = lastName.endsWith(WOLF_EMOJI); if (isConditionMet) { userData.coins += WOLF_MISSION_REWARD; userData.missions[missionId] = 'claimed'; console.log(`Mission '${missionId}' claimed.`); showRewardPopup("MISSION_SUCCESS!", `+${formatNumber(WOLF_MISSION_REWARD)} $MWC!`); updateMissionUI(missionId, 'claimed'); updateUI(); saveUserData(true); } else { updateMissionUI(missionId, 'incomplete'); showInfoPopup("MISSION_PENDING", `Append ${WOLF_EMOJI} to TG L_NAME.`); } }
        function copyMissionEmoji() { /* ... as before ... */ navigator.clipboard.writeText(WOLF_EMOJI).then(() => { copyEmojiBtn.textContent = 'COPIED!'; setTimeout(() => { copyEmojiBtn.textContent = 'CPY_EMJ'; }, 1500); }).catch(err => { console.error('Fail_to_copy_emoji: ', err); showWarningPopup("COPY_FAIL", "Manual copy: " + WOLF_EMOJI); }); }

        // --- Task Logic (Assumed mostly unchanged, styling will affect appearance)
        function loadAndDisplayTasks() { /* ... as before ... */ if (!db) return Promise.reject("DB_OFFLINE"); availableTasksListDiv.innerHTML = '<p>Scanning task_matrix...</p>'; completedTasksListDiv.innerHTML = '<p>No completed tasks logged.</p>'; return db.ref('tasks').once('value').then(snapshot => { availableTasksListDiv.innerHTML = ''; completedTasksListDiv.innerHTML = ''; availableTasks = {}; let hasAvailable = false; let hasCompleted = false; if (snapshot.exists()) { availableTasks = snapshot.val() || {}; userData.completedTasks = userData.completedTasks || {}; for (const taskId in availableTasks) { if (Object.hasOwnProperty.call(availableTasks, taskId)) { const taskData = availableTasks[taskId]; const isCompleted = userData.completedTasks[taskId] === true; renderTaskItem(taskData, taskId, isCompleted); if (isCompleted) hasCompleted = true; else hasAvailable = true; } } } if (!hasAvailable) availableTasksListDiv.innerHTML = '<p>No tasks in matrix.</p>'; if (!hasCompleted) completedTasksListDiv.innerHTML = '<p>No tasks completed.</p>'; }).catch(error => { console.error("Task_load_err:", error); availableTasksListDiv.innerHTML = '<p style="color: var(--error-color);">TASK_MATRIX_ERR.</p>'; completedTasksListDiv.innerHTML = ''; availableTasks = {}; }); }
        function renderTaskItem(taskData, taskId, isCompleted) { /* ... as before, minor text changes for theme ... */ if (!taskData || !taskId) return; const itemDiv = document.createElement('div'); itemDiv.className = 'task-item'; itemDiv.dataset.taskId = taskId; itemDiv.dataset.completed = isCompleted; const imageUrl = taskData.imageUrl || `https://via.placeholder.com/40/0D0D0D/00FF00?text=${(taskData.name||'T')[0]}`; const description = taskData.description || (taskData.type === 'link' ? 'Engage target link.' : 'Complete & input code.'); itemDiv.innerHTML = ` <img src="${imageUrl}" alt="" class="task-item-image" onerror="this.style.display='none'"> <div class="task-item-info"> <div class="task-item-name">${taskData.name || 'UNTITLED_TASK'}</div> <div class="task-item-description">${description}</div> <div class="task-item-reward"> <img src="${COIN_IMAGE_URL}" class="coin-icon" alt=""> <span>+${formatNumber(taskData.reward || 0)}</span> </div> </div> <div class="task-actions"> <button class="task-button start-task-btn">INITIATE</button> <button class="task-button verify-task-btn">VERIFY</button> <span class="task-claimed-status">COMPLETE</span> </div> `; const startBtn = itemDiv.querySelector('.start-task-btn'); const verifyBtn = itemDiv.querySelector('.verify-task-btn'); const claimedStatus = itemDiv.querySelector('.task-claimed-status'); if (isCompleted) { startBtn.style.display = 'none'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'block'; completedTasksListDiv.appendChild(itemDiv); } else { startBtn.style.display = 'block'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'none'; startBtn.addEventListener('click', handleStartTaskClick); verifyBtn.addEventListener('click', handleVerifyTaskClick); availableTasksListDiv.appendChild(itemDiv); } }
        function handleStartTaskClick(event) { /* ... as before, check taskData.type for verify button text ... */ if (isLoading || !userData) return; const button = event.target; const taskItem = button.closest('.task-item'); const taskId = taskItem.dataset.taskId; const taskData = availableTasks[taskId]; if (!taskData) return; if (userData.completedTasks?.[taskId]) { showInfoPopup("ALREADY_DONE", "Task already completed."); return; } if (taskData.link) { try { tg.openLink(taskData.link); } catch (e) { console.warn("tg.openLink fail, using window.open:", e); window.open(taskData.link, '_blank');} } else if (taskData.type === 'link') { showWarningPopup("TASK_ERR", "Task link missing."); return; } button.disabled = true; if (taskData.type === 'link') { taskItem.dataset.status = 'verifying'; const verifyBtn = taskItem.querySelector('.verify-task-btn'); button.style.display = 'none'; verifyBtn.style.display = 'block'; verifyBtn.disabled = true; verifyBtn.textContent = `VERIFY (${TASK_VERIFICATION_DELAY / 1000}s)`; let countdown = TASK_VERIFICATION_DELAY / 1000; const intervalId = setInterval(() => { countdown--; if (countdown > 0) { verifyBtn.textContent = `VERIFY (${countdown}s)`; } else { clearInterval(intervalId); verifyBtn.textContent = 'VERIFY'; verifyBtn.disabled = false; } }, 1000); } else if (taskData.type === 'code') { showCodePopup(taskId, taskData); button.disabled = false; } else { button.disabled = false; showWarningPopup("TASK_ERR", "Unknown task type."); } }
        function handleVerifyTaskClick(event) { /* ... as before ... */ if (isLoading || !userData) return; const button = event.target; const taskItem = button.closest('.task-item'); const taskId = taskItem.dataset.taskId; const taskData = availableTasks[taskId]; if (!taskData) return; if (userData.completedTasks?.[taskId]) return; button.disabled = true; button.textContent = "VERIFYING..."; console.log(`Verification success (sim): ${taskId}`); claimTaskReward(taskId, taskData.reward); }
        function showCodePopup(taskId, taskData) { /* ... as before ... */ currentCodeTaskId = taskId; codePopupTitle.textContent = taskData.name || "ENTER_CODE"; codePopupDescription.textContent = taskData.description || "Enter verification code."; codePopupInput.value = ''; codePopup.classList.add('visible'); codePopupInput.focus(); }
        function hideCodePopup() { /* ... as before ... */ codePopup.classList.remove('visible'); currentCodeTaskId = null; }
        function handleCodeSubmit() { /* ... as before ... */ if (!currentCodeTaskId || !availableTasks[currentCodeTaskId] || !userData) { hideCodePopup(); return; } const taskId = currentCodeTaskId; const taskData = availableTasks[taskId]; const submittedCode = codePopupInput.value.trim(); if (!submittedCode) { showWarningPopup("INPUT_ERR", "Enter code."); return; } if (taskData.code && submittedCode.toLowerCase() === taskData.code.toLowerCase()) { console.log(`Code verify OK: ${taskId}`); hideCodePopup(); claimTaskReward(taskId, taskData.reward); } else { showWarningPopup("CODE_INVALID", "Incorrect code. Retry."); codePopupInput.focus(); codePopupInput.select(); } }
        function claimTaskReward(taskId, rewardAmount) { /* ... as before ... */ if (isLoading || !userData || !taskId || rewardAmount === undefined) return; if (userData.completedTasks?.[taskId]) { console.warn(`Duplicate claim block: ${taskId}`); moveTaskToCompletedUI(taskId); return; } userData.coins += rewardAmount; if (!userData.completedTasks) userData.completedTasks = {}; userData.completedTasks[taskId] = true; console.log(`Task ${taskId} done. Reward: +${formatNumber(rewardAmount)}`); showRewardPopup("TASK_COMPLETE!", `+${formatNumber(rewardAmount)} $MWC!`); moveTaskToCompletedUI(taskId); updateUI(); saveUserData(true); }
        function moveTaskToCompletedUI(taskId) { /* ... as before ... */ const taskItem = availableTasksListDiv.querySelector(`.task-item[data-task-id="${taskId}"]`); if (!taskItem) { const alreadyCompletedItem = completedTasksListDiv.querySelector(`.task-item[data-task-id="${taskId}"]`); if (alreadyCompletedItem) { console.log(`Task ${taskId} already in completed UI.`); const startBtn = alreadyCompletedItem.querySelector('.start-task-btn'); const verifyBtn = alreadyCompletedItem.querySelector('.verify-task-btn'); const claimedStatus = alreadyCompletedItem.querySelector('.task-claimed-status'); if(startBtn) startBtn.style.display = 'none'; if(verifyBtn) verifyBtn.style.display = 'none'; if(claimedStatus) { claimedStatus.style.display = 'block'; claimedStatus.textContent = "COMPLETE"; } alreadyCompletedItem.dataset.completed = "true"; } else { console.warn(`Task item ${taskId} N/A in lists.`); } return; } const startBtn = taskItem.querySelector('.start-task-btn'); const verifyBtn = taskItem.querySelector('.verify-task-btn'); const claimedStatus = taskItem.querySelector('.task-claimed-status'); taskItem.dataset.completed = "true"; startBtn.style.display = 'none'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'block'; claimedStatus.textContent = "COMPLETE"; startBtn.removeEventListener('click', handleStartTaskClick); verifyBtn.removeEventListener('click', handleVerifyTaskClick); completedTasksListDiv.appendChild(taskItem); if (availableTasksListDiv.children.length === 0) { availableTasksListDiv.innerHTML = '<p>No tasks in matrix.</p>'; } const completedPlaceholder = completedTasksListDiv.querySelector('p'); if (completedPlaceholder && completedTasksListDiv.children.length > 1) { completedPlaceholder.remove(); } }

        function updateLuckyCodeSectionUI() { /* ... as before ... */ if (!claimLuckyCodeBtn || !luckyCodeInput || !luckyCodeStatus) return; if (dailyLuckyCodeData === null) { luckyCodeStatus.textContent = "Querying daily_code_server..."; luckyCodeStatus.className = 'lucky-code-status'; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "QUERYING..."; return; } if (!dailyLuckyCodeData || !dailyLuckyCodeData.code) { luckyCodeStatus.textContent = "No daily_code active."; luckyCodeStatus.className = 'lucky-code-status'; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "N/A"; return; } const todayUTCString = new Date().toISOString().split('T')[0]; const lastClaimDate = userData?.lastLuckyCodeClaim; if (lastClaimDate === todayUTCString) { luckyCodeStatus.textContent = `🎁 CLAIMED! +${formatNumber(dailyLuckyCodeData.reward || 0)}`; luckyCodeStatus.className = 'lucky-code-status claimed'; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "CLAIMED"; } else { luckyCodeStatus.textContent = ""; luckyCodeStatus.className = 'lucky-code-status'; luckyCodeInput.disabled = false; claimLuckyCodeBtn.disabled = false; claimLuckyCodeBtn.textContent = "SUBMIT_CODE"; } }
        function handleLuckyCodeClaim() { /* ... as before ... */ if (isLoading || !userData || !dailyLuckyCodeData || !dailyLuckyCodeData.code) { showWarningPopup("HOLD", "Daily_code N/A or not loaded."); updateLuckyCodeSectionUI(); return; } const todayUTCString = new Date().toISOString().split('T')[0]; if (userData.lastLuckyCodeClaim === todayUTCString) { showInfoPopup("ALREADY_CLAIMED", "Daily_code already claimed."); updateLuckyCodeSectionUI(); return; } const enteredCode = luckyCodeInput.value.trim().toUpperCase(); if (!enteredCode) { luckyCodeStatus.textContent = "Enter code."; luckyCodeStatus.className = 'lucky-code-status error'; return; } if (enteredCode === dailyLuckyCodeData.code.toUpperCase()) { const reward = dailyLuckyCodeData.reward || 0; userData.coins += reward; userData.lastLuckyCodeClaim = todayUTCString; console.log(`Lucky_code claimed. Reward: +${reward}`); showRewardPopup("CODE_VALID!", `Transmission accepted! +${formatNumber(reward)} $MWC!`); luckyCodeInput.value = ''; updateUI(); saveUserData(true); } else { luckyCodeStatus.textContent = "CODE_INVALID. Retry!"; luckyCodeStatus.className = 'lucky-code-status error'; luckyCodeInput.focus(); luckyCodeInput.select(); claimLuckyCodeBtn.style.animation = 'shake 0.5s'; setTimeout(() => claimLuckyCodeBtn.style.animation = '', 500); } }

        // --- Ads Logic ---
        function updateAdsUI() { /* ... as before, minor text changes ... */ if (isLoading || !userData || !userData.ads) return; checkAndResetDailyAds(); const watchedToday = userData.ads.watchedToday || 0; const limitReached = watchedToday >= ADS_DAILY_LIMIT; const now = Date.now(); const cooldownActive = now < adCooldownEndTime; adsWatchedTodaySpan.textContent = watchedToday; adsDailyLimitSpan.textContent = ADS_DAILY_LIMIT; adRewardAmountSpan.textContent = formatNumber(AD_REWARD_AMOUNT); adMessageP.textContent = ''; adMessageP.className = 'ad-message'; if (!monetagSdkReady) { watchAdButton.disabled = true; watchAdButton.textContent = "AdNet OFFLINE"; adMessageP.textContent = "Ad_service load_fail."; adMessageP.className = 'ad-message error'; } else if (limitReached) { watchAdButton.disabled = true; watchAdButton.textContent = "DAILY_LIMIT_REACHED"; adMessageP.textContent = "Return tomorrow for more $MWC."; adMessageP.className = 'ad-message limit'; adCooldownTimerP.style.display = 'none'; if (adCooldownInterval) clearInterval(adCooldownInterval); } else if (cooldownActive) { watchAdButton.disabled = true; } else { watchAdButton.disabled = false; watchAdButton.textContent = "Watch Ad & Earn"; adCooldownTimerP.style.display = 'none'; if (adCooldownInterval) clearInterval(adCooldownInterval); } }
        function handleWatchAdClick() { /* ... as before, some console logs changed ... */ if (isLoading || !userData || !userData.ads) return; const watchedToday = userData.ads.watchedToday || 0; const limitReached = watchedToday >= ADS_DAILY_LIMIT; const now = Date.now(); const cooldownActive = now < adCooldownEndTime; if (limitReached || cooldownActive || !monetagSdkReady) { console.log("Ad watch prevented:", { limitReached, cooldownActive, monetagSdkReady }); updateAdsUI(); return; } const showAdFunction = window[`show_${MONETAG_ZONE_ID}`]; if (typeof showAdFunction !== 'function') { console.error(`Monetag func show_${MONETAG_ZONE_ID} N/A!`); adMessageP.textContent = "ERR: AdNet UNAVAILABLE."; adMessageP.className = 'ad-message error'; watchAdButton.disabled = true; watchAdButton.textContent = "AdNet OFFLINE"; monetagSdkReady = false; return; } watchAdButton.disabled = true; watchAdButton.textContent = "LOADING_AD..."; adMessageP.textContent = ''; console.log("Attempting Monetag ad (coins)..."); try { showAdFunction().then(() => { console.log("Monetag ad (coins) success."); userData.coins += AD_REWARD_AMOUNT; userData.ads.watchedToday += 1; userData.ads.lastWatchedDate = getTodayDateString(); console.log(`Ad reward: +${formatNumber(AD_REWARD_AMOUNT)}. Watched: ${userData.ads.watchedToday}`); showRewardPopup("AD_COMPLETE!", `+${formatNumber(AD_REWARD_AMOUNT)} $MWC!`); updateCoinDisplay(); updateAdsUI(); if (userData.ads.watchedToday < ADS_DAILY_LIMIT) { startAdCooldown(); } saveUserData(true); }).catch((error) => { console.error("Monetag ad (coins) fail/skip:", error); adMessageP.textContent = "Ad fail/skip."; adMessageP.className = 'ad-message error'; updateAdsUI(); }); } catch (error) { console.error(`Err calling Monetag show_${MONETAG_ZONE_ID}} (coins):`, error); adMessageP.textContent = "ERR launching AdNet."; adMessageP.className = 'ad-message error'; updateAdsUI(); } }
        function startAdCooldown() { /* ... as before, text changes ... */ if (isLoading) return; adCooldownEndTime = Date.now() + AD_COOLDOWN_SECONDS * 1000; if (adCooldownInterval) clearInterval(adCooldownInterval); watchAdButton.disabled = true; adCooldownTimerP.style.display = 'block'; const updateTimer = () => { const now = Date.now(); const remainingSeconds = Math.max(0, Math.ceil((adCooldownEndTime - now) / 1000)); if (remainingSeconds > 0) { watchAdButton.textContent = `Next ad in ${remainingSeconds}s`; adCooldownTimerP.textContent = `AdNet cooldown: ${remainingSeconds}s...`; } else { clearInterval(adCooldownInterval); adCooldownInterval = null; adCooldownTimerP.style.display = 'none'; updateAdsUI(); } }; adCooldownInterval = setInterval(updateTimer, 1000); updateTimer(); }

        // --- Energy Ad Refill Logic ---
        function handleWatchAdForEnergyClick() {
            if (isLoading || !userData) return;
            const now = Date.now();
            const cooldownActive = now < energyAdCooldownEndTime;

            if (cooldownActive || !monetagSdkReady || userData.currentEnergy >= MAX_ENERGY) {
                console.log("Energy ad refill prevented:", { cooldownActive, monetagSdkReady, energyFull: userData.currentEnergy >= MAX_ENERGY });
                updateEnergyDisplay(); // Refresh UI
                return;
            }

            const showAdFunction = window[`show_${MONETAG_ZONE_ID}`];
            if (typeof showAdFunction !== 'function') {
                console.error(`Monetag func show_${MONETAG_ZONE_ID} N/A for energy ad!`);
                showWarningPopup("AdNet_ERR", "Ad service unavailable for energy refill.");
                monetagSdkReady = false; // Mark as not ready
                updateEnergyDisplay();
                return;
            }

            refillEnergyButton.disabled = true;
            refillEnergyButton.textContent = "Loading Ad...";
            console.log("Attempting Monetag ad (energy)...");

            try {
                showAdFunction().then(() => {
                    console.log("Monetag ad (energy) watched successfully.");
                    userData.currentEnergy = MAX_ENERGY;
                    userData.lastEnergyAdWatchTime = Date.now(); // Set last watch time for this feature

                    showRewardPopup("ENERGY_REFILLED!", "System_Energy at maximum capacity!");
                    updateEnergyDisplay();
                    startEnergyAdCooldown();
                    saveUserData(true);

                }).catch((error) => {
                    console.error("Monetag ad (energy) failed or was skipped:", error);
                    showWarningPopup("Ad_Fail", "Energy refill ad failed or was skipped.");
                    updateEnergyDisplay(); // Re-enable button if appropriate
                });
            } catch (error) {
                console.error(`Error calling Monetag show_${MONETAG_ZONE_ID} (energy):`, error);
                showWarningPopup("AdNet_ERR", "Error launching ad service for energy refill.");
                updateEnergyDisplay();
            }
        }

        function startEnergyAdCooldown() {
            if (isLoading) return;
            energyAdCooldownEndTime = Date.now() + ENERGY_AD_REFILL_COOLDOWN_SECONDS * 1000;
            if (energyAdCooldownInterval) clearInterval(energyAdCooldownInterval);

            refillEnergyButton.disabled = true;
            energyCooldownTimerP.style.display = 'block';

            const updateTimer = () => {
                const now = Date.now();
                const remainingSeconds = Math.max(0, Math.ceil((energyAdCooldownEndTime - now) / 1000));

                if (remainingSeconds > 0) {
                    refillEnergyButton.textContent = `Refill CD ${remainingSeconds}s`;
                    energyCooldownTimerP.textContent = `Energy Ad CD: ${remainingSeconds}s`;
                } else {
                    clearInterval(energyAdCooldownInterval);
                    energyAdCooldownInterval = null;
                    energyCooldownTimerP.style.display = 'none';
                    refillEnergyButton.textContent = "⚡ Refill (Ad)";
                    updateEnergyDisplay(); // This will re-check conditions and enable button if needed
                }
            };
            energyAdCooldownInterval = setInterval(updateTimer, 1000);
            updateTimer();
        }


        // --- UI Functions ---
        function initializeAppUI() { /* ... minor text, call updateEnergyDisplay ... */ missionEmojiDisplay.textContent = WOLF_EMOJI; renderShopItems(); updateUI(); updateEnergyDisplay(); loadingDiv.style.display = 'none'; mainContentDiv.style.display = 'flex'; navbar.style.display = 'flex'; updateAdsUI(); }
        function updateUI() { if (isLoading || !userData || !currentUser) return; updateCoinDisplay(); updateGameStats(); updateShopItemsUI(); updateProfileStats(); updateMissionStatusUI(); updateLuckyCodeSectionUI(); updateAdsUI(); updateEnergyDisplay(); }
        function updateCoinDisplay() { if (userData) coinBalanceSpan.textContent = formatNumber(userData.coins); }
        function updateGameStats() { if (!userData) return; tapPowerDisplaySpan.textContent = formatNumber(calculateTapPower()); passiveIncomeDisplaySpan.textContent = formatNumber(calculatePassiveIncomeRate()); }
        function updateProfileStats() { /* ... as before ... */ if (!userData || !currentUser) return; profileUserIdSpan.textContent = currentUser.id || 'N/A'; profileUsernameSpan.textContent = currentUser.username || 'N/A'; profileFirstNameSpan.textContent = currentUser.first_name || 'N/A'; profileLastNameSpan.textContent = currentUser.last_name || 'N/A'; profileCoinsSpan.textContent = formatNumber(userData.coins); profileTapPowerSpan.textContent = formatNumber(calculateTapPower()); profilePassiveIncomeSpan.textContent = formatNumber(calculatePassiveIncomeRate()); tonWalletInput.value = userData.tonWallet || ''; }
        function updateMissionStatusUI() { /* ... as before ... */ if (!userData || !currentUser) return; const missionId = 'lastNameWolf'; const status = userData?.missions?.[missionId] || 'incomplete'; updateMissionUI(missionId, status); }
        function updateMissionUI(missionId, status) { /* ... minor text changes ... */ missionStatusDiv.classList.remove('incomplete', 'claimed'); missionStatusDiv.classList.add(status === 'claimed' ? 'claimed' : 'incomplete'); switch (status) { case 'incomplete': missionStatusDiv.textContent = 'STATUS: PENDING'; missionClaimBtn.textContent = 'VERIFY & CLAIM'; missionClaimBtn.disabled = false; break; case 'claimed': missionStatusDiv.textContent = 'STATUS: COMPLETE!'; missionClaimBtn.textContent = 'CLAIMED'; missionClaimBtn.disabled = true; break; } }
        function renderShopItems() { /* ... as before ... */ clickUpgradesDiv.innerHTML = ''; passiveUpgradesDiv.innerHTML = ''; if (!userData) { console.warn("Cannot render shop, userData N/A."); return; } upgrades.forEach(upgrade => { const itemDiv = document.createElement('div'); itemDiv.className = 'shop-item'; itemDiv.id = `shop-item-${upgrade.id}`; const level = userData.upgrades?.[upgrade.id]?.level || 0; const cost = calculateUpgradeCost(upgrade, level); itemDiv.innerHTML = ` <div class="shop-item-info"> <div class="shop-item-name">${upgrade.name} (Lvl ${level})</div> <div class="shop-item-details">${upgrade.description}</div> <div class="shop-item-cost"> <img src="${COIN_IMAGE_URL}" class="coin-icon" alt=""> <span class="cost-value">${formatNumber(cost)}</span> </div> </div> <button class="buy-button" data-upgrade-id="${upgrade.id}">BUY</button> `; if (upgrade.type === 'click') clickUpgradesDiv.appendChild(itemDiv); else if (upgrade.type === 'passive') passiveUpgradesDiv.appendChild(itemDiv); }); document.querySelectorAll('.buy-button').forEach(button => { button.removeEventListener('click', handleBuyButtonClick); button.addEventListener('click', handleBuyButtonClick); }); updateShopItemsUI(); }
        function updateShopItemsUI() { /* ... as before ... */ if (!userData) return; const currentCoins = userData.coins; upgrades.forEach(upgrade => { const itemDiv = document.getElementById(`shop-item-${upgrade.id}`); if (!itemDiv) return; const level = userData.upgrades?.[upgrade.id]?.level || 0; const cost = calculateUpgradeCost(upgrade, level); const nameSpan = itemDiv.querySelector('.shop-item-name'); if (nameSpan) nameSpan.textContent = `${upgrade.name} (Lvl ${level})`; const costSpan = itemDiv.querySelector('.cost-value'); if (costSpan) costSpan.textContent = formatNumber(cost); const button = itemDiv.querySelector('.buy-button'); if (button) button.disabled = currentCoins < cost; }); }
        function handleBuyButtonClick(event) { const upgradeId = event.target.dataset.upgradeId; handleUpgradePurchase(upgradeId); }
        function handleUpgradePurchase(upgradeId) { /* ... as before ... */ if (isLoading || !userData) return; const upgradeDef = upgrades.find(u => u.id === upgradeId); if (!upgradeDef) return; const currentLevel = userData.upgrades?.[upgradeId]?.level || 0; const cost = calculateUpgradeCost(upgradeDef, currentLevel); if (userData.coins >= cost) { userData.coins -= cost; if (!userData.upgrades[upgradeId]) userData.upgrades[upgradeId] = { level: 0 }; userData.upgrades[upgradeId].level += 1; console.log(`Purchased ${upgradeDef.name} (Lvl ${userData.upgrades[upgradeId].level}), Cost: ${formatNumber(cost)}`); updateUI(); scheduleSave(); } else { console.log("Insufficient MWC:", upgradeDef.name); const button = document.querySelector(`.buy-button[data-upgrade-id="${upgradeId}"]`); if (button) { button.style.animation = 'shake 0.5s'; setTimeout(() => button.style.animation = '', 500); } } }
        function calculateUpgradeCost(upgradeDef, currentLevel) { /* ... as before ... */ const scalingFactor = Math.max(1, Math.floor(upgradeDef.baseCost / 100000)); return Math.floor(upgradeDef.baseCost + (currentLevel * INCREASING_COST_BASE * scalingFactor * (1 + currentLevel * 0.05))); }
        function createClickAnimation(x, y, amount) { /* ... as before ... */ const feedback = document.createElement('div'); feedback.className = 'click-value'; feedback.textContent = `+${formatNumber(amount)}`; feedback.style.left = `${x}px`; feedback.style.top = `${y}px`; feedback.style.transform = 'translate(-50%, -100%)'; clickFeedbackDiv.appendChild(feedback); setTimeout(() => { feedback.remove(); }, 1150); }
        function showPage(pageId) { /* ... as before, minor console log ... */ if (isLoading) return; document.querySelectorAll('.page').forEach(page => page.classList.remove('active')); const targetPage = document.getElementById(pageId); if (!targetPage) { console.error("Target page N/A:", pageId); return; } targetPage.classList.add('active'); targetPage.scrollTop = 0; navButtons.forEach(button => { button.classList.remove('active'); if (button.id === `nav-${pageId.split('-')[0]}`) { button.classList.add('active'); } }); if (pageId === 'profile-screen') { updateUI(); } else if (pageId === 'tasks-screen') { const activeTabId = document.querySelector('.task-tabs button.active')?.id || 'tab-available'; const listId = activeTabId === 'tab-available' ? 'available-tasks-list' : 'completed-tasks-list'; showTaskListCategory(listId); } else if (pageId === 'ads-screen') { updateAdsUI(); } else if (pageId === 'game-screen') { updateEnergyDisplay(); /* Refresh energy on game screen visit */ } }
        function showShopCategory(categoryId) { /* ... as before ... */ shopCategories.forEach(cat => cat.classList.remove('active')); document.getElementById(categoryId).classList.add('active'); shopTabButtons.forEach(button => button.classList.remove('active')); document.getElementById(`tab-${categoryId.split('-')[0]}`).classList.add('active'); }
        function showTaskListCategory(categoryId) { /* ... as before ... */ taskListCategories.forEach(cat => cat.classList.remove('active')); const listToShow = document.getElementById(categoryId); if (listToShow) listToShow.classList.add('active'); taskTabButtons.forEach(button => button.classList.remove('active')); document.getElementById(`tab-${categoryId.split('-')[0]}`).classList.add('active'); }
        function saveWallet() { /* ... as before, text change ... */ if (isLoading || !userData) return; const newAddress = tonWalletInput.value.trim(); userData.tonWallet = newAddress; saveUserData(true); saveStatusP.textContent = 'ADDR_SAVED!'; saveStatusP.style.color = 'var(--success-color)'; setTimeout(() => saveStatusP.textContent = '', 3000); }
        function showError(message) { /* ... as before ... */ const displayMessage = typeof message === 'string' ? message : 'UNKNOWN_SYSTEM_ERR.'; loadingDiv.textContent = `ERROR:\n${displayMessage}\nRELOAD_APP.`; loadingDiv.style.color = 'var(--error-color)'; loadingDiv.style.display = 'flex'; console.error("APP_ERR_DISPLAY:", displayMessage); mainContentDiv.style.display = 'none'; navbar.style.display = 'none'; if (passiveIncomeIntervalId) clearInterval(passiveIncomeIntervalId); if (adCooldownInterval) clearInterval(adCooldownInterval); if (energyRegenIntervalId) clearInterval(energyRegenIntervalId); if (energyAdCooldownInterval) clearInterval(energyAdCooldownInterval); isLoading = false; }
        function formatNumber(num) { /* ... as before ... */ num = Math.floor(num); const suffixes = ["", "K", "M", "B", "T", "Qa", "Qi", "Sx", "Sp", "Oc", "No", "Dc", "Ud", "Dd", "Td", "Qad", "Qid", "Sxd", "Spd", "Ocd", "Nod"]; let suffixIndex = 0; if (num < 1000) return num.toString(); while (num >= 1000 && suffixIndex < suffixes.length - 1) { num /= 1000; suffixIndex++; } let precision = 2; if (num >= 100) precision = 0; else if (num >= 10) precision = 1; const numString = num.toFixed(precision); return (precision > 0 ? parseFloat(numString) : numString) + suffixes[suffixIndex]; }

        function setupEventListeners() {
             coinContainer.removeEventListener('pointerdown', handleTap);
             saveWalletButton.removeEventListener('click', saveWallet);
             copyEmojiBtn.removeEventListener('click', copyMissionEmoji);
             missionClaimBtn.removeEventListener('click', checkAndClaimMission);
             codePopupCancelBtn.removeEventListener('click', hideCodePopup);
             codePopupSubmitBtn.removeEventListener('click', handleCodeSubmit);
             codePopup.removeEventListener('click', handlePopupOverlayClick);
             claimLuckyCodeBtn.removeEventListener('click', handleLuckyCodeClaim);
             watchAdButton.removeEventListener('click', handleWatchAdClick);
             refillEnergyButton.removeEventListener('click', handleWatchAdForEnergyClick); // ADDED: Remove listener

             coinContainer.addEventListener('pointerdown', handleTap, { passive: false });
             saveWalletButton.addEventListener('click', saveWallet);
             copyEmojiBtn.addEventListener('click', copyMissionEmoji);
             missionClaimBtn.addEventListener('click', checkAndClaimMission);
             codePopupCancelBtn.addEventListener('click', hideCodePopup);
             codePopupSubmitBtn.addEventListener('click', handleCodeSubmit);
             codePopup.addEventListener('click', handlePopupOverlayClick);
             claimLuckyCodeBtn.addEventListener('click', handleLuckyCodeClaim);
             watchAdButton.addEventListener('click', handleWatchAdClick);
             refillEnergyButton.addEventListener('click', handleWatchAdForEnergyClick); // ADDED: Add listener
        }
        function handlePopupOverlayClick(event) { if (event.target === codePopup) { hideCodePopup(); } }

    </script>

</body>
</html>
