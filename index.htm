<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Meme Wolf Tap - 8Bit Edition</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

    <!-- Analytics & SDKs (Order preserved from original) -->
    <script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
    <script
        async
        src="https://tganalytics.xyz/index.js"
        onload="initAnalytics()"
        type="text/javascript"
    ></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script type="module">
      import { Analytics } from 'https://cdn.jsdelivr.net/npm/@tma.js/analytics';
      const analytics = Analytics.init({
        token: "eyJhcHBfbmFtZSI6Ik1lbWVXb2xmIiwiYXBwX3VybCI6Imh0dHBzOi8vdC5tZS9NZW1ld29sZmVhcm5ib3QiLCJhcHBfZG9tYWluIjoiaHR0cHM6Ly9tZW1ld29sZmJvdC52ZXJjZWwuYXBwLyJ9!aHpBDg5nS3R8RqG692rUXAHxunVeLkJEzq7R2UIyP1M="
      });
      analytics.track("app_opened");
    </script>
    <script
        async
        src="https://unpkg.com/@telegram-apps/analytics@latest/dist/index.js"
        onload="initAnalytics()"
        type="text/javascript"
    ></script>
    <script src='//whephiwums.com/sdk.js' data-zone='9300768' data-sdk='show_9300768'></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>

    <script>
        function initAnalytics() {
          if (window.telegramAnalytics && typeof window.telegramAnalytics.init === 'function') {
              window.telegramAnalytics.init({
                  token: '7117728183:AAHNrUikov1d9lN1aojYGNyobKHOOvodUm4',
                  appName: 'MemeWolf',
              });
              console.log("Telegram Analytics Initialized");
          }
          console.log("Analytics Initialized (or attempted for tganalytics.xyz)");
        }
    </script>

    <style>
        :root {
            --font-pixel: 'Press Start 2P', cursive;
            --bg-main: #1E1B41; /* Dark Purple/Blue */
            --bg-main-light: #2F2A6B;
            --bg-surface: #3A357E; /* Lighter Purple/Blue for cards */
            --bg-surface-alpha: rgba(58, 53, 126, 0.85);
            --accent-pink: #FF00FF; /* Vibrant Pink */
            --accent-pink-dark: #CC00CC;
            --accent-cyan: #00FFFF;
            --accent-yellow: #FFFF00;
            --text-light: #F0F0F0;
            --text-dark: #1A1A1A;
            --text-muted: #A0A0C0;
            --border-color: #5F5AA2;
            --border-color-light: #7C78C0;
            --success-color: #39FF14; /* Neon Green */
            --warning-color: #FFFF00; /* Yellow */
            --error-color: #FF3131;   /* Bright Red */
            --disabled-bg: #4A4A6A;
            --disabled-text: #8888AA;
            --shadow-color: rgba(0, 0, 0, 0.5);
            --pixel-unit: 4px; /* Base for pixelated borders */
        }

        * {
            box-sizing: border-box; margin: 0; padding: 0;
            -webkit-tap-highlight-color: transparent;
            image-rendering: pixelated; /* For sharper images in pixel style */
            font-smooth: never; /* Helps with pixel font rendering */
            -webkit-font-smoothing : none;
        }

        html, body {
            height: 100%; width: 100%; overflow: hidden;
            font-family: var(--font-pixel);
            background-color: var(--bg-main);
            color: var(--text-light);
            overscroll-behavior: none;
            font-size: 10px; /* Adjust base for pixel font */
            line-height: 1.6;
        }

        body { display: flex; flex-direction: column; touch-action: manipulation; }
        #app { display: flex; flex-direction: column; height: 100%; width: 100%; overflow: hidden; }

        #loading {
            display: flex; flex-direction: column; justify-content: center; align-items: center;
            height: 100%; font-size: 1.4em; color: var(--accent-pink); text-align: center; padding: 20px;
            background-image: linear-gradient(45deg, var(--bg-main-light) 25%, transparent 25%),
                              linear-gradient(-45deg, var(--bg-main-light) 25%, transparent 25%),
                              linear-gradient(45deg, transparent 75%, var(--bg-main-light) 75%),
                              linear-gradient(-45deg, transparent 75%, var(--bg-main-light) 75%);
            background-size: 20px 20px;
            background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
        }
        #loading.error-state { color: var(--error-color); }


        #main-content { flex-grow: 1; display: flex; overflow: hidden; }
        .page {
            width: 100%; height: 100%; display: none; flex-direction: column; flex-grow: 1;
            overflow-y: auto; -webkit-overflow-scrolling: touch;
            padding: 15px 10px 80px 10px; /* Nav height */
            scroll-behavior: smooth;
        }
        .page.active { display: flex; }

        nav {
            position: fixed; bottom: 0; left: 0; width: 100%;
            display: flex; justify-content: space-around; align-items: center;
            background-color: var(--bg-surface-alpha);
            border-top: var(--pixel-unit) solid var(--accent-pink);
            padding: 5px 0; z-index: 100;
            box-shadow: 0 calc(-1 * var(--pixel-unit)) 0 0 var(--bg-main); /* Pixel shadow */
        }
        nav button {
            background: none; border: none; color: var(--text-muted); cursor: pointer;
            display: flex; flex-direction: column; align-items: center;
            font-size: 0.8em; padding: 5px; transition: color 0.2s;
            flex-grow: 1; flex-basis: 0;
        }
        nav button .material-icons { font-size: 22px; margin-bottom: 2px; }
        nav button:hover { color: var(--text-light); }
        nav button.active { color: var(--accent-pink); }

        /* Pixel Button Style */
        .pixel-button {
            background-color: var(--accent-pink); color: var(--text-dark);
            border: none; padding: 10px 15px; font-family: var(--font-pixel);
            font-size: 1em; cursor: pointer; text-transform: uppercase;
            box-shadow: inset calc(-1 * var(--pixel-unit)) calc(-1 * var(--pixel-unit)) 0 0 rgba(0,0,0,0.2),
                        inset var(--pixel-unit) var(--pixel-unit) 0 0 rgba(255,255,255,0.3),
                        var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main); /* 3D effect */
            transition: transform 0.1s, box-shadow 0.1s;
        }
        .pixel-button:hover:not(:disabled) { background-color: var(--accent-pink-dark); }
        .pixel-button:active:not(:disabled) {
            transform: translate(calc(0.5 * var(--pixel-unit)), calc(0.5 * var(--pixel-unit)));
            box-shadow: inset calc(-0.5 * var(--pixel-unit)) calc(-0.5 * var(--pixel-unit)) 0 0 rgba(0,0,0,0.2),
                        inset calc(0.5 * var(--pixel-unit)) calc(0.5 * var(--pixel-unit)) 0 0 rgba(255,255,255,0.3),
                        calc(0.5 * var(--pixel-unit)) calc(0.5 * var(--pixel-unit)) 0 0 var(--bg-main);
        }
        .pixel-button:disabled {
            background-color: var(--disabled-bg); color: var(--disabled-text);
            cursor: not-allowed; opacity: 0.7;
            box-shadow: inset calc(-1 * var(--pixel-unit)) calc(-1 * var(--pixel-unit)) 0 0 rgba(0,0,0,0.1),
                        var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main-light);
        }
        .pixel-button.secondary { background-color: var(--accent-cyan); color: var(--text-dark); }
        .pixel-button.secondary:hover:not(:disabled) { background-color: #00CCCC; }
        .pixel-button.success { background-color: var(--success-color); color: var(--text-dark); }
        .pixel-button.success:hover:not(:disabled) { background-color: #2AAE0F; }


        /* Game Screen Specific */
        #game-screen { justify-content: space-between; align-items: center; text-align: center; padding-top: 5px; }
        .stats-bar {
            display: flex; justify-content: space-around; width: 100%; max-width: 300px; margin-bottom: 8px;
            font-size: 0.9em; color: var(--text-muted); background-color: var(--bg-surface);
            padding: 6px 8px; border: calc(0.5 * var(--pixel-unit)) solid var(--border-color);
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main);
        }
        .stat-item { display: flex; align-items: center; gap: 4px; }
        .stat-item .material-icons { font-size: 14px; color: var(--accent-yellow); }

        .coin-balance-container {
            display: flex; align-items: center; justify-content: center; margin-bottom: 10px;
        }
        #coin-icon-balance { width: 24px; height: 24px; margin-right: 6px; vertical-align: middle; }
        #coin-balance { font-size: 2.4em; font-weight: normal; color: var(--accent-yellow); text-shadow: 1px 1px 0 var(--accent-pink); }

        .coin-area { flex-grow: 1; display: flex; justify-content: center; align-items: center; width: 100%; margin-bottom: 5px; }
        #coin-container {
            position: relative; width: clamp(150px, 45vmin, 220px); height: clamp(150px, 45vmin, 220px);
            cursor: pointer; user-select: none; -webkit-user-drag: none;
            border: var(--pixel-unit) solid var(--bg-main);
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--accent-pink),
                        calc(2*var(--pixel-unit)) calc(2*var(--pixel-unit)) 0 0 var(--bg-main);
            image-rendering: pixelated;
        }
        #coin-image {
            width: 100%; height: 100%; transition: transform 0.05s linear;
            background-color: var(--accent-yellow); /* Fallback if image fails */
            border: var(--pixel-unit) solid var(--accent-cyan); /* Inner border */
        }
        #coin-container:active #coin-image { transform: scale(0.95); }

        #energy-bar-container {
            width: 100%; max-width: 250px; margin: 10px auto;
            border: calc(0.5 * var(--pixel-unit)) solid var(--border-color);
            background-color: var(--bg-main-light); padding: calc(0.5 * var(--pixel-unit));
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main);
        }
        #energy-bar-fill {
            height: 15px; background-color: var(--accent-cyan); width: 100%;
            transition: width 0.2s linear;
            border-right: calc(0.5 * var(--pixel-unit)) solid var(--accent-pink); /* Edge highlight */
        }
        #energy-display { font-size: 0.9em; margin-top: 4px; color: var(--text-muted); }
        #get-energy-ad-button {
            margin-top: 10px; font-size: 0.9em; padding: 8px 12px;
            background-color: var(--accent-yellow); color: var(--text-dark);
        }
         #get-energy-ad-button:hover:not(:disabled) { background-color: #DDDD00; }


        #click-feedback { position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; overflow: hidden; z-index: 99; }
        .click-value {
            position: absolute; font-size: clamp(1.4em, 4vw, 2em); color: var(--accent-yellow);
            user-select: none; pointer-events: none; animation: floatUpFadeOutPixel 1s ease-out forwards;
            white-space: nowrap; text-shadow: 1px 1px 0 var(--accent-pink);
            padding: 2px 4px; background-color: rgba(30, 27, 65, 0.5); /* --bg-main with alpha */
            border: 1px solid var(--accent-pink);
        }
        @keyframes floatUpFadeOutPixel {
            0% { opacity: 1; transform: translateY(0) scale(1); }
            20% { transform: translateY(-15px) scale(1.1); }
            100% { opacity: 0; transform: translateY(-60px) scale(0.7); }
        }

        /* General Section & Tab Styling */
        .page-title {
            text-align: center; margin-bottom: 20px; color: var(--accent-pink);
            font-size: 1.6em; text-shadow: 1px 1px 0px var(--bg-main-light);
            padding: 5px; border-bottom: var(--pixel-unit) solid var(--accent-cyan);
            background-color: var(--bg-surface);
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main);
        }
        #shop-screen h2, #profile-screen h2, #tasks-screen h2, #ads-screen h2 { /* Use .page-title */ }

        .tabs-container {
            display: flex; justify-content: center; margin-bottom: 20px;
            border-bottom: calc(0.5*var(--pixel-unit)) solid var(--border-color);
            position: sticky; top: -15px; /* Sticky tabs, adjust for padding */
            background-color: var(--bg-main); padding-top: 10px; z-index: 10;
        }
        .tabs-container button {
            background: none; border: none; color: var(--text-muted);
            padding: 8px 12px; cursor: pointer; font-size: 0.9em;
            border-bottom: var(--pixel-unit) solid transparent; margin-bottom: -calc(0.5*var(--pixel-unit));
            transition: color 0.2s, border-color 0.2s; text-transform: uppercase;
        }
        .tabs-container button:hover { color: var(--text-light); }
        .tabs-container button.active { color: var(--accent-pink); border-bottom-color: var(--accent-pink); }

        .category-list { display: none; flex-direction: column; gap: 10px; }
        .category-list.active { display: flex; }
        .category-list > p { color: var(--text-muted); text-align: center; padding: 15px; font-size: 0.9em; }

        /* Item Card Style (Shop, Tasks) */
        .item-card {
            background-color: var(--bg-surface); padding: 12px;
            display: flex; justify-content: space-between; align-items: center; gap: 10px;
            border: calc(0.5 * var(--pixel-unit)) solid var(--border-color);
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main);
        }
        .item-info { flex-grow: 1; }
        .item-name { font-weight: normal; font-size: 1em; margin-bottom: 3px; color: var(--text-light); }
        .item-details, .item-description { font-size: 0.8em; color: var(--text-muted); margin-bottom: 6px; }
        .item-cost, .item-reward {
            display: flex; align-items: center; gap: 4px;
            font-weight: normal; color: var(--accent-yellow); font-size: 0.9em;
        }
        .item-cost img, .item-reward img { width: 12px; height: 12px; }
        .item-card .buy-button, .item-card .task-button { font-size: 0.85em; padding: 8px 12px; }

        /* Profile Screen */
        .profile-section {
            background-color: var(--bg-surface); padding: 15px; margin-bottom: 15px;
            border: calc(0.5 * var(--pixel-unit)) solid var(--border-color);
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main);
        }
        .profile-info p { margin-bottom: 8px; font-size: 0.9em; word-break: break-all; display: flex; align-items: center; flex-wrap: wrap; }
        .profile-info p strong { color: var(--accent-cyan); margin-right: 6px; min-width: 90px; display: inline-block; }
        .profile-info p span { flex-grow: 1; }
        .pixel-input {
            width: 100%; padding: 8px; margin-bottom: 10px;
            border: calc(0.5 * var(--pixel-unit)) solid var(--border-color);
            background-color: var(--bg-main-light); color: var(--text-light);
            font-family: var(--font-pixel); font-size: 0.9em;
        }
        .pixel-input:focus { outline: var(--pixel-unit) solid var(--accent-pink); }
        #save-status, #lucky-code-status, #ad-message {
            margin-top: 8px; text-align: center; font-size: 0.85em; height: 1.1em;
        }
        #save-status.success { color: var(--success-color); }
        #lucky-code-status.success { color: var(--success-color); }
        #lucky-code-status.claimed { color: var(--accent-yellow); }
        #lucky-code-status.error, #ad-message.error { color: var(--error-color); }
        #ad-message.success { color: var(--success-color); }
        #ad-message.limit { color: var(--text-muted); }


        .mission-section { text-align: center; }
        .mission-title { font-size: 1.1em; margin-bottom: 8px; color: var(--accent-pink); }
        .mission-description { font-size: 0.85em; color: var(--text-muted); margin-bottom: 12px; line-height: 1.4; }
        .mission-emoji { font-size: 1.8em; margin: 0 4px; display: inline-block; vertical-align: middle; }
        .copy-emoji-button {
            background-color: var(--accent-cyan); color: var(--text-dark);
            border: none; padding: 4px 8px; font-size: 0.75em; cursor: pointer;
            margin-left: 8px; text-transform: uppercase;
            box-shadow: inset -2px -2px 0 0 rgba(0,0,0,0.2), inset 2px 2px 0 0 rgba(255,255,255,0.3);
        }
        .copy-emoji-button:active { transform: translate(1px, 1px); box-shadow: inset -1px -1px 0 0 rgba(0,0,0,0.2); }
        .mission-status { margin: 12px 0; font-size: 0.9em; }
        .mission-status.incomplete { color: var(--text-muted); }
        .mission-status.claimed { color: var(--accent-yellow); }
        .mission-action-button { /* Uses .pixel-button */ }
        .reward-display { display: flex; align-items: center; justify-content: center; gap: 4px; color: var(--accent-yellow); margin-top: 4px; font-size: 0.9em; }
        .fine-applied { color: var(--error-color); margin-top: 8px; font-size: 0.85em; }
        .coin-icon { width: 1em; height: 1em; vertical-align: middle; margin: 0 2px; image-rendering: pixelated; }

        @keyframes shake-pixel {
          0%, 100% { transform: translateX(0); }
          20% { transform: translateX(calc(-0.5 * var(--pixel-unit))); }
          40% { transform: translateX(calc(0.5 * var(--pixel-unit))); }
          60% { transform: translateX(calc(-0.5 * var(--pixel-unit))); }
          80% { transform: translateX(calc(0.5 * var(--pixel-unit))); }
        }
        .shake-animation { animation: shake-pixel 0.4s linear; }


        /* Tasks Specific */
        .task-item-image { width: 40px; height: 40px; object-fit: cover; flex-shrink: 0; background-color: var(--bg-main-light); border: 1px solid var(--border-color); }
        .task-actions { display: flex; flex-direction: column; align-items: flex-end; gap: 6px; flex-shrink: 0; }
        .task-button { /* Uses .pixel-button */ }
        .verify-task-btn, .task-claimed-status { display: none; }
        .task-claimed-status { font-size: 0.85em; color: var(--success-color); text-transform: uppercase; }
        .task-item[data-completed="true"] .start-task-btn, .task-item[data-completed="true"] .verify-task-btn { display: none; }
        .task-item[data-completed="true"] .task-claimed-status { display: block; }

        /* Custom Modal (Popup) Styles */
        .custom-modal-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(30, 27, 65, 0.7); /* --bg-main with alpha */
            display: none; justify-content: center; align-items: center;
            z-index: 1000; backdrop-filter: blur(2px); animation: fadeInPixel 0.2s ease-out;
        }
        .custom-modal-overlay.visible { display: flex; }
        .custom-modal-content {
            background-color: var(--bg-surface); color: var(--text-light);
            padding: 20px; min-width: 280px; max-width: 90%;
            border: var(--pixel-unit) solid var(--accent-pink);
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main),
                        calc(2*var(--pixel-unit)) calc(2*var(--pixel-unit)) 0 0 var(--bg-main);
            text-align: center; animation: slideInPixel 0.2s ease-out;
        }
        .custom-modal-title {
            font-size: 1.3em; color: var(--accent-pink); margin-bottom: 10px;
            padding-bottom: 5px; border-bottom: calc(0.5 * var(--pixel-unit)) dotted var(--border-color);
        }
        .custom-modal-message { font-size: 0.95em; margin-bottom: 15px; line-height: 1.5; }
        .custom-modal-input { /* Uses .pixel-input */ margin-bottom: 15px; text-align: center; }
        .custom-modal-actions { display: flex; gap: 10px; justify-content: center; flex-wrap: wrap; }
        .custom-modal-actions .pixel-button { font-size: 0.9em; }

        @keyframes fadeInPixel { from { opacity: 0; } to { opacity: 1; } }
        @keyframes slideInPixel { from { transform: translateY(-10px) scale(0.95); opacity: 0; } to { transform: translateY(0) scale(1); opacity: 1; } }

        /* Ads Screen Styles */
        #ads-screen { justify-content: flex-start; align-items: center; text-align: center; }
        .ads-section {
            background-color: var(--bg-surface); padding: 20px; margin-top: 15px;
            border: calc(0.5 * var(--pixel-unit)) solid var(--border-color);
            box-shadow: var(--pixel-unit) var(--pixel-unit) 0 0 var(--bg-main);
            width: 100%; max-width: 380px;
        }
        .ads-section p { margin-bottom: 12px; line-height: 1.4; font-size: 0.9em; }
        .ads-section p:first-child { font-size: 1em; color: var(--text-light); }
        #ad-status-container { margin-bottom: 15px; font-size: 0.9em; }
        #ad-status-container p { margin-bottom: 6px; }
        #ad-status-container span { font-weight: normal; color: var(--text-light); }
        #ad-status-container .coin-icon { vertical-align: text-bottom; width: 1em; height: 1em; }
        #watch-ad-button { font-size: 1em; background-color: var(--success-color); color: var(--text-dark); }
        #watch-ad-button:hover:not(:disabled) { background-color: #2AAE0F; }
        #ad-cooldown-timer { font-size: 0.85em; color: var(--warning-color); }


    </style>
</head>
<body>
    <div id="app">
        <div id="loading">Initializing Meme Wolf 8-Bit...</div>

        <div id="main-content" style="display: none;">

            <div id="game-screen" class="page active">
                <div class="stats-bar">
                    <div class="stat-item" title="Coins per tap"><span class="material-icons">touch_app</span> <span id="tap-power-display">1</span></div>
                    <div class="stat-item" title="Profit per hour"><span class="material-icons">hourglass_bottom</span> <span id="passive-income-display">0</span>/hr</div>
                </div>
                <div class="coin-balance-container">
                    <img id="coin-icon-balance" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt="Coin">
                    <span id="coin-balance">0</span>
                </div>
                <div class="coin-area">
                    <div id="coin-container">
                        <img id="coin-image" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt="Tap Me!">
                    </div>
                </div>
                <div id="energy-bar-container">
                    <div id="energy-bar-fill"></div>
                </div>
                <div id="energy-display">ENERGY: 1000 / 1000</div>
                <button id="get-energy-ad-button" class="pixel-button" style="display: none;">⚡️ GET ENERGY ⚡️</button>
                <div id="click-feedback"></div>
            </div>

            <div id="shop-screen" class="page">
                <h2 class="page-title">UPGRADES SHOP</h2>
                <div class="tabs-container shop-tabs">
                    <button id="tab-click" class="active" onclick="showShopCategory('click-upgrades')">Click</button>
                    <button id="tab-passive" onclick="showShopCategory('passive-upgrades')">Passive</button>
                </div>
                <div id="click-upgrades" class="category-list shop-category active"><p>Loading click upgrades...</p></div>
                <div id="passive-upgrades" class="category-list shop-category"><p>Loading passive income upgrades...</p></div>
            </div>

            <div id="tasks-screen" class="page">
                <h2 class="page-title">TASKS HUB</h2>
                <div class="tabs-container task-tabs">
                    <button id="tab-available" class="active" onclick="showTaskListCategory('available-tasks-list')">Available</button>
                    <button id="tab-completed" onclick="showTaskListCategory('completed-tasks-list')">Done</button>
                </div>
                <div id="available-tasks-list" class="category-list task-list-category active"><p>Loading tasks...</p></div>
                <div id="completed-tasks-list" class="category-list task-list-category"><p>No completed tasks.</p></div>
            </div>

            <div id="ads-screen" class="page">
                <h2 class="page-title">WATCH ADS</h2>
                <div class="ads-section">
                    <p>Watch ads for MW coins!</p>
                    <div id="ad-status-container">
                        <p>Daily Ads: <span id="ads-watched-today">0</span> / <span id="ads-daily-limit">20</span></p>
                        <p>Reward: <span id="ad-reward-amount">1000</span> <img class="coin-icon" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt=""></p>
                    </div>
                    <button id="watch-ad-button" class="pixel-button" disabled>Loading Ads...</button>
                    <p id="ad-cooldown-timer" style="display: none;"></p>
                    <p id="ad-message"></p>
                </div>
            </div>

            <div id="profile-screen" class="page">
                <h2 class="page-title">PROFILE</h2>
                <div class="profile-section profile-info">
                    <p><strong>User ID:</strong> <span id="profile-userid">N/A</span></p>
                    <p><strong>Username:</strong> <span id="profile-username">N/A</span></p>
                    <p><strong>Name:</strong> <span id="profile-firstname">N/A</span> <span id="profile-lastname"></span></p>
                    <p><strong>Coins:</strong> <span id="profile-coins">0</span> <img class="coin-icon" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt=""></p>
                    <p><strong>Tap Power:</strong> <span id="profile-tap-power">1</span></p>
                    <p><strong>Passive:</strong> <span id="profile-passive-income">0</span>/hr</p>
                </div>
                <div class="profile-section mission-section">
                    <div class="mission-title">🐺 WOLF NAME MISSION 🐺</div>
                    <p class="mission-description">Add <span class="mission-emoji" id="mission-emoji-display">🐺</span> to end of TG Last Name! <button class="copy-emoji-button" id="copy-emoji-btn">Copy</button> </p>
                    <div class="mission-status incomplete" id="mission-status">Status: Checking...</div>
                    <div id="fine-message-display" class="fine-applied" style="display: none;"></div>
                    <button class="mission-action-button pixel-button" id="mission-claim-btn" disabled>Check & Claim</button>
                    <div class="reward-display"><span>Reward: 50K</span> <img src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" class="coin-icon" alt=""></div>
                </div>
                <div class="profile-section lucky-code-section">
                    <label for="lucky-code-input" style="display:block; margin-bottom: 5px; font-size: 1.1em; color: var(--accent-cyan);">🎁 Daily Lucky Code</label>
                    <input type="text" id="lucky-code-input" class="pixel-input" placeholder="ENTER CODE" maxlength="20" style="text-transform: uppercase; text-align:center;">
                    <button id="claim-lucky-code-btn" class="pixel-button" disabled style="width:100%;">Claim</button>
                    <p id="lucky-code-status"></p>
                 </div>
                 <div class="profile-section wallet-section">
                    <label for="ton-wallet-input" style="display:block; margin-bottom: 5px; font-size: 1.1em; color: var(--accent-cyan);">TON Address</label>
                    <input type="text" id="ton-wallet-input" class="pixel-input" placeholder="Enter Your TON Address">
                    <button id="save-wallet-button" class="pixel-button secondary" style="width:100%;">Save Wallet</button>
                    <p id="save-status"></p>
                </div>
            </div>
        </div>

        <nav id="navbar" style="display: none;">
            <button id="nav-game" class="active" onclick="showPage('game-screen')"><span class="material-icons">pets</span><span>Game</span></button>
            <button id="nav-shop" onclick="showPage('shop-screen')"><span class="material-icons">shopping_bag</span><span>Shop</span></button>
            <button id="nav-tasks" onclick="showPage('tasks-screen')"><span class="material-icons">checklist</span><span>Tasks</span></button>
            <button id="nav-ads" onclick="showPage('ads-screen')"><span class="material-icons">play_circle_filled</span><span>Ads</span></button>
            <button id="nav-profile" onclick="showPage('profile-screen')"><span class="material-icons">account_circle</span><span>Profile</span></button>
        </nav>

        <!-- Code Input Modal (Uses Custom Modal Structure) -->
        <!-- The generic custom modal below will be used for this -->

        <!-- Generic Custom Modal -->
        <div id="custom-modal" class="custom-modal-overlay">
            <div class="custom-modal-content">
                <h3 id="custom-modal-title" class="custom-modal-title">Modal Title</h3>
                <p id="custom-modal-message" class="custom-modal-message">This is a sample message.</p>
                <input type="text" id="custom-modal-input" class="custom-modal-input pixel-input" style="display:none;" placeholder="Enter code">
                <div id="custom-modal-actions" class="custom-modal-actions">
                    <!-- Buttons will be added here by JS -->
                </div>
            </div>
        </div>
    </div>

    <script>
        // --- Config ---
        const firebaseConfig = {
             apiKey: "AIzaSyCyH3Z92F8RQweInLC5w_bk_AaLx6XT7UE", authDomain: "ab-wallet-62482.firebaseapp.com", databaseURL: "https://ab-wallet-62482-default-rtdb.firebaseio.com", projectId: "ab-wallet-62482", storageBucket: "ab-wallet-62482.firebasestorage.app", messagingSenderId: "642030839072", appId: "1:642030839072:web:77fc92375ba72e2ee62345"
        };
        const COIN_IMAGE_URL = "https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png";
        const BASE_TAP_EARN = 1; const SAVE_INTERVAL = 6000; const PASSIVE_INCOME_INTERVAL = 1000; const INCREASING_COST_BASE = 10000; const WOLF_MISSION_REWARD = 50000; const WOLF_EMOJI = '🐺'; const CHEAT_FINE = 100000;
        const TASK_VERIFICATION_DELAY = 10000;
        const ADS_DAILY_LIMIT = 50; // Kept from original user's value
        const AD_REWARD_AMOUNT = 1000;
        const AD_COOLDOWN_SECONDS = 20; // Kept from original user's value
        const MONETAG_ZONE_ID = 9300768;

        // NEW: Energy System Config
        const MAX_ENERGY = 1000;
        const ENERGY_PER_TAP = 1;
        const ENERGY_REGEN_RATE = 1; // Per second
        const ENERGY_REGEN_INTERVAL = 1000; // Milliseconds

        // --- Telegram & Firebase Vars ---
        let tg = null; let db = null; let currentUser = null; let userData = null; let lastSaveTime = 0; let saveTimeout = null; let passiveIncomeIntervalId = null; let isLoading = true;
        let availableTasks = {}; let currentCodeTaskId = null; let dailyLuckyCodeData = null;
        let adCooldownInterval = null; let adCooldownEndTime = 0; let monetagSdkReady = false;

        // NEW: Energy System Vars
        let currentEnergy = MAX_ENERGY;
        let energyRegenIntervalId = null;
        let isWatchingAdForEnergy = false; // To differentiate ad calls

        // --- DOM Elements ---
        const loadingDiv = document.getElementById('loading'); const mainContentDiv = document.getElementById('main-content'); const navbar = document.getElementById('navbar');
        const coinBalanceSpan = document.getElementById('coin-balance'); const tapPowerDisplaySpan = document.getElementById('tap-power-display'); const passiveIncomeDisplaySpan = document.getElementById('passive-income-display');
        const coinContainer = document.getElementById('coin-container'); const clickFeedbackDiv = document.getElementById('click-feedback');
        const clickUpgradesDiv = document.getElementById('click-upgrades'); const passiveUpgradesDiv = document.getElementById('passive-upgrades');
        const profileUserIdSpan = document.getElementById('profile-userid'); const profileUsernameSpan = document.getElementById('profile-username'); const profileFirstNameSpan = document.getElementById('profile-firstname'); const profileLastNameSpan = document.getElementById('profile-lastname');
        const profileCoinsSpan = document.getElementById('profile-coins'); const profileTapPowerSpan = document.getElementById('profile-tap-power'); const profilePassiveIncomeSpan = document.getElementById('profile-passive-income');
        const tonWalletInput = document.getElementById('ton-wallet-input'); const saveWalletButton = document.getElementById('save-wallet-button'); const saveStatusP = document.getElementById('save-status');
        const missionEmojiDisplay = document.getElementById('mission-emoji-display'); const copyEmojiBtn = document.getElementById('copy-emoji-btn'); const missionStatusDiv = document.getElementById('mission-status'); const missionClaimBtn = document.getElementById('mission-claim-btn'); const fineMessageDisplay = document.getElementById('fine-message-display');
        const navButtons = document.querySelectorAll('nav button'); const shopTabButtons = document.querySelectorAll('.shop-tabs button'); const shopCategories = document.querySelectorAll('.shop-category');
        const availableTasksListDiv = document.getElementById('available-tasks-list'); const completedTasksListDiv = document.getElementById('completed-tasks-list');
        const taskTabButtons = document.querySelectorAll('.task-tabs button'); const taskListCategories = document.querySelectorAll('.task-list-category');
        // Code popup elements removed, using generic custom modal
        const luckyCodeInput = document.getElementById('lucky-code-input'); const claimLuckyCodeBtn = document.getElementById('claim-lucky-code-btn'); const luckyCodeStatus = document.getElementById('lucky-code-status');
        const adsWatchedTodaySpan = document.getElementById('ads-watched-today'); const adsDailyLimitSpan = document.getElementById('ads-daily-limit'); const adRewardAmountSpan = document.getElementById('ad-reward-amount');
        const watchAdButton = document.getElementById('watch-ad-button'); const adCooldownTimerP = document.getElementById('ad-cooldown-timer'); const adMessageP = document.getElementById('ad-message');

        // NEW: Energy DOM Elements
        const energyBarFill = document.getElementById('energy-bar-fill');
        const energyDisplay = document.getElementById('energy-display');
        const getEnergyAdButton = document.getElementById('get-energy-ad-button');

        // NEW: Custom Modal DOM Elements
        const customModal = document.getElementById('custom-modal');
        const customModalTitle = document.getElementById('custom-modal-title');
        const customModalMessage = document.getElementById('custom-modal-message');
        const customModalInput = document.getElementById('custom-modal-input');
        const customModalActions = document.getElementById('custom-modal-actions');

        // --- Upgrade Definitions (Full list as requested) ---
        const upgrades = [
             { id: 'click_1', name: 'Stronger Paws', description: '+1 coin per tap', baseCost: 10000, baseEffect: 1, type: 'click' }, { id: 'click_2', name: 'Sharper Claws', description: '+2 coins per tap', baseCost: 100000, baseEffect: 2, type: 'click' }, { id: 'click_3', name: 'Meme Energy', description: '+5 coins per tap', baseCost: 500000, baseEffect: 5, type: 'click' }, { id: 'click_4', name: 'Wolf Pack Call', description: '+10 coins per tap', baseCost: 2000000, baseEffect: 10, type: 'click' }, { id: 'click_5', name: 'Lunar Boost', description: '+25 coins per tap', baseCost: 10000000, baseEffect: 25, type: 'click' }, { id: 'click_6', name: 'Golden Howl', description: '+50 coins per tap', baseCost: 50000000, baseEffect: 50, type: 'click' }, { id: 'click_7', name: 'Diamond Fangs', description: '+100 coins per tap', baseCost: 250000000, baseEffect: 100, type: 'click' }, { id: 'click_8', name: 'Alpha Presence', description: '+200 coins per tap', baseCost: 1000000000, baseEffect: 200, type: 'click' }, { id: 'click_9', name: 'Meme Lord Aura', description: '+500 coins per tap', baseCost: 5000000000, baseEffect: 500, type: 'click' }, { id: 'click_10', name: 'Cosmic Wolf', description: '+1000 coins per tap', baseCost: 20000000000, baseEffect: 1000, type: 'click' },
             { id: 'passive_1', name: 'Sniffing Coins', description: '+100 profit/hour', baseCost: 10000, baseEffect: 100, type: 'passive' }, { id: 'passive_2', name: 'Digging Spot', description: '+250 profit/hour', baseCost: 50000, baseEffect: 250, type: 'passive' }, { id: 'passive_3', name: 'Treasure Map', description: '+600 profit/hour', baseCost: 150000, baseEffect: 600, type: 'passive' }, { id: 'passive_4', name: 'Meme Stash', description: '+1.5K profit/hour', baseCost: 500000, baseEffect: 1500, type: 'passive' }, { id: 'passive_5', name: 'Coin Sapling', description: '+3.5K profit/hour', baseCost: 1500000, baseEffect: 3500, type: 'passive' }, { id: 'passive_6', name: 'Howling ATM', description: '+8K profit/hour', baseCost: 5000000, baseEffect: 8000, type: 'passive' }, { id: 'passive_7', name: 'Pack Tribute', description: '+18K profit/hour', baseCost: 15000000, baseEffect: 18000, type: 'passive' }, { id: 'passive_8', name: 'Wolf Den Bank', description: '+40K profit/hour', baseCost: 50000000, baseEffect: 40000, type: 'passive' }, { id: 'passive_9', name: 'Meme Coin Mine', description: '+90K profit/hour', baseCost: 150000000, baseEffect: 90000, type: 'passive' }, { id: 'passive_10', name: 'Moonlit Mint', description: '+200K profit/hour', baseCost: 500000000, baseEffect: 200000, type: 'passive' }, { id: 'passive_11', name: 'Crypto Kennel', description: '+450K profit/hour', baseCost: 1200000000, baseEffect: 450000, type: 'passive' }, { id: 'passive_12', name: 'Decentral Den', description: '+1M profit/hour', baseCost: 3000000000, baseEffect: 1000000, type: 'passive' }, { id: 'passive_13', name: 'Chain Burrow', description: '+2.2M profit/hour', baseCost: 7000000000, baseEffect: 2200000, type: 'passive' }, { id: 'passive_14', name: 'Wolf St Journal', description: '+5M profit/hour', baseCost: 15000000000, baseEffect: 5000000, type: 'passive' }, { id: 'passive_15', name: 'Golden Bone Fund', description: '+11M profit/hour', baseCost: 35000000000, baseEffect: 11000000, type: 'passive' }, { id: 'passive_16', name: 'Diamond Paw Trust', description: '+25M profit/hour', baseCost: 80000000000, baseEffect: 25000000, type: 'passive' }, { id: 'passive_17', name: 'Alpha Invest Group', description: '+55M profit/hour', baseCost: 180000000000, baseEffect: 55000000, type: 'passive' }, { id: 'passive_18', name: 'Meme Hegemony', description: '+120M profit/hour', baseCost: 400000000000, baseEffect: 120000000, type: 'passive' }, { id: 'passive_19', name: 'Lunar Treasury', description: '+250M profit/hour', baseCost: 900000000000, baseEffect: 250000000, type: 'passive' }, { id: 'passive_20', name: 'Cosmic Coin Flow', description: '+500M profit/hour', baseCost: 2000000000000, baseEffect: 500000000, type: 'passive' },
        ];

        // --- Initialization ---
        window.onload = () => {
             try {
                 isLoading = true; loadingDiv.textContent = "Loading 8-Bit Wolf...";
                 tg = window.Telegram.WebApp; tg.ready(); tg.expand();
                 try { tg.setHeaderColor(getComputedStyle(document.documentElement).getPropertyValue('--bg-main').trim()); tg.setBackgroundColor(getComputedStyle(document.documentElement).getPropertyValue('--bg-main').trim()); } catch (themeError) { console.warn("Could not set TG theme colors:", themeError); }
                 if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) { showError("User data missing. Launch from Telegram."); return; }
                 currentUser = tg.initDataUnsafe.user;
                 firebase.initializeApp(firebaseConfig); db = firebase.database();

                 setTimeout(() => {
                     monetagSdkReady = typeof window[`show_${MONETAG_ZONE_ID}`] === 'function';
                     console.log("Monetag SDK Ready:", monetagSdkReady);
                     if (!monetagSdkReady) console.warn(`Monetag function show_${MONETAG_ZONE_ID} not found. Ads may not work.`);
                     loadUserDataAndInit();
                 }, 500);

                 setupEventListeners();
                 startEnergyRegeneration(); // Start energy regen early
             } catch (error) { console.error("Crit Init Error:", error); showError(`Init failed: ${error.message}. Reload.`); }
        };

        // --- Custom Popup System ---
        function openCustomPopup(options) {
            customModalTitle.textContent = options.title || "Alert";
            customModalMessage.innerHTML = options.message || ""; // Use innerHTML for potential formatting
            customModalInput.style.display = options.showInput ? 'block' : 'none';
            customModalInput.value = options.inputValue || '';
            customModalInput.placeholder = options.inputPlaceholder || 'Enter value';

            customModalActions.innerHTML = ''; // Clear previous buttons
            if (options.buttons && options.buttons.length > 0) {
                options.buttons.forEach(btnConfig => {
                    const button = document.createElement('button');
                    button.textContent = btnConfig.text || "OK";
                    button.className = `pixel-button ${btnConfig.style || ''}`; // e.g., 'success', 'secondary'
                    button.onclick = () => {
                        if (btnConfig.callback) btnConfig.callback(options.showInput ? customModalInput.value : undefined);
                        closeCustomPopup();
                    };
                    customModalActions.appendChild(button);
                });
            } else { // Default OK button if none provided
                const okButton = document.createElement('button');
                okButton.textContent = "OK";
                okButton.className = "pixel-button";
                okButton.onclick = closeCustomPopup;
                customModalActions.appendChild(okButton);
            }
            customModal.classList.add('visible');
        }

        function closeCustomPopup() {
            customModal.classList.remove('visible');
            customModalInput.value = ''; // Clear input
             // If a task code popup was active, reset its state
            if (currentCodeTaskId) {
                const taskItem = availableTasksListDiv.querySelector(`.task-item[data-task-id="${currentCodeTaskId}"]`);
                if (taskItem) {
                    const startBtn = taskItem.querySelector('.start-task-btn');
                    if (startBtn) startBtn.disabled = false; // Re-enable start button
                }
                currentCodeTaskId = null; // Reset task ID
            }
        }

        // Wrapper functions for different popup types
        function showInfoPopup(title, message) {
            openCustomPopup({ title: `ℹ️ ${title || "Info"}`, message: message, buttons: [{ text: "OK", style: "secondary" }] });
        }
        function showWarningPopup(title, message) {
            openCustomPopup({ title: `⚠️ ${title || "Warning"}`, message: message, buttons: [{ text: "Got it", style: "secondary" }] });
        }
        function showRewardPopup(title, message) {
            openCustomPopup({ title: `🎉 ${title || "Reward!"}`, message: message, buttons: [{ text: "Sweet!", style: "success" }] });
        }
        function showErrorPopup(title, message) { // For critical errors
            openCustomPopup({ title: `🛑 ${title || "Error"}`, message: message, buttons: [{ text: "Dismiss" }] });
        }


        // --- Firebase Functions ---
        function loadUserDataAndInit() {
             if (!currentUser || !db) { showError("User/DB not ready."); return; }
             const userId = currentUser.id.toString(); const userRef = db.ref('users/' + userId);
             loadingDiv.textContent = "Loading Profile...";
             userRef.once('value').then((snapshot) => {
                 const defaultData = {
                     coins: 0, upgrades: {}, missions: { lastNameWolf: 'incomplete' },
                     completedTasks: {}, lastLuckyCodeClaim: null, tonWallet: '',
                     ads: { watchedToday: 0, lastWatchedDate: null },
                     lastUpdate: Date.now(),
                     telegramInfo: { id: currentUser.id, username: currentUser.username || null, firstName: currentUser.first_name || '', lastName: currentUser.last_name || '' }
                 };
                 if (snapshot.exists()) {
                     userData = snapshot.val();
                     userData.coins = userData.coins ?? defaultData.coins;
                     userData.upgrades = userData.upgrades ?? defaultData.upgrades;
                     userData.missions = userData.missions ?? defaultData.missions;
                     userData.missions.lastNameWolf = userData.missions.lastNameWolf ?? defaultData.missions.lastNameWolf;
                     userData.completedTasks = userData.completedTasks ?? defaultData.completedTasks;
                     userData.lastLuckyCodeClaim = userData.lastLuckyCodeClaim ?? defaultData.lastLuckyCodeClaim;
                     userData.tonWallet = userData.tonWallet ?? defaultData.tonWallet;
                     userData.ads = userData.ads ?? defaultData.ads;
                     userData.ads.watchedToday = userData.ads.watchedToday ?? defaultData.ads.watchedToday;
                     userData.ads.lastWatchedDate = userData.ads.lastWatchedDate ?? defaultData.ads.lastWatchedDate;
                     userData.lastUpdate = userData.lastUpdate ?? defaultData.lastUpdate;
                     userData.telegramInfo = defaultData.telegramInfo;
                 } else {
                     userData = defaultData; saveUserData(true);
                 }
                 checkAndResetDailyAds();
                 const cheatDetected = performAntiCheatCheck();
                 if (!cheatDetected) { calculateOfflineProgress(); } else { userData.lastUpdate = Date.now(); }
                 return Promise.all([loadAndDisplayTasks(), loadDailyLuckyCode()]);
             }).then(() => {
                 initializeAppUI(); startPassiveIncome(); isLoading = false; console.log("App Ready.");
             }).catch((error) => {
                 console.error("Firebase Load/Init Error:", error);
                 let displayMessage = `Failed to load data. Check connection & reload.`;
                 if (error?.code) { displayMessage += ` (Code: ${error.code})`; }
                 showError(displayMessage); isLoading = false;
             });
        }

        function getTodayDateString() {
            const today = new Date();
            return `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
        }

        function checkAndResetDailyAds() {
            if (!userData || !userData.ads) return;
            const todayStr = getTodayDateString();
            if (userData.ads.lastWatchedDate !== todayStr) {
                console.log(`New day (${todayStr}). Resetting daily ad count.`);
                userData.ads.watchedToday = 0;
                userData.ads.lastWatchedDate = todayStr;
            }
        }

        function loadDailyLuckyCode() {
             if (!db) return Promise.reject("DB not ready for lucky code");
             return db.ref('dailyLuckyCode').once('value').then(snapshot => {
                 dailyLuckyCodeData = snapshot.exists() ? snapshot.val() : null;
                 updateLuckyCodeSectionUI();
             }).catch(error => { console.error("Error loading daily code:", error); dailyLuckyCodeData = null; updateLuckyCodeSectionUI(); });
        }

        function saveUserData(force = false) {
             if (isLoading || !currentUser || !db || !userData) return; const now = Date.now(); userData.lastUpdate = now; clearTimeout(saveTimeout);
             if (force || now - lastSaveTime > SAVE_INTERVAL) {
                 console.log("Saving data..."); const userId = currentUser.id.toString();
                 userData.telegramInfo = { id: currentUser.id, username: currentUser.username || null, firstName: currentUser.first_name || '', lastName: currentUser.last_name || '' };
                 if (!userData.ads) userData.ads = { watchedToday: 0, lastWatchedDate: null };
                 db.ref('users/' + userId).set(userData).then(() => { console.log("Data saved."); lastSaveTime = now; }).catch((error) => console.error("Firebase Save Error:", error));
             } else { saveTimeout = setTimeout(() => saveUserData(true), SAVE_INTERVAL - (now - lastSaveTime)); }
        }

        function performAntiCheatCheck() {
            if (!userData || !currentUser) return false; const missionId = 'lastNameWolf'; const missionStatus = userData.missions?.[missionId]; const currentLastName = currentUser.last_name || ''; fineMessageDisplay.style.display = 'none';
            if (missionStatus === 'claimed' && !currentLastName.endsWith(WOLF_EMOJI)) {
                const fineAmount = CHEAT_FINE; userData.coins = Math.max(0, userData.coins - fineAmount); userData.missions[missionId] = 'incomplete';
                console.warn(`Anti-cheat: User ${currentUser.id} removed emoji. Fine: ${formatNumber(fineAmount)}`);
                showWarningPopup("🚨 CHEAT DETECTED!", `You removed ${WOLF_EMOJI} from your name! Fine: ${formatNumber(fineAmount)} coins.`);
                fineMessageDisplay.textContent = `Fine: -${formatNumber(fineAmount)} coins for emoji removal.`; fineMessageDisplay.style.display = 'block';
                return true;
            } return false;
        }

        // --- Energy System Logic ---
        function updateEnergyUI() {
            if (!energyBarFill || !energyDisplay) return;
            const percentage = (currentEnergy / MAX_ENERGY) * 100;
            energyBarFill.style.width = `${percentage}%`;
            energyDisplay.textContent = `ENERGY: ${Math.floor(currentEnergy)} / ${MAX_ENERGY}`;

            if (currentEnergy < MAX_ENERGY && monetagSdkReady) {
                getEnergyAdButton.style.display = 'block';
            } else {
                getEnergyAdButton.style.display = 'none';
            }
             getEnergyAdButton.disabled = isLoading || currentEnergy >= MAX_ENERGY || !monetagSdkReady || (Date.now() < adCooldownEndTime && isWatchingAdForEnergy);
        }

        function startEnergyRegeneration() {
            if (energyRegenIntervalId) clearInterval(energyRegenIntervalId);
            energyRegenIntervalId = setInterval(() => {
                if (currentEnergy < MAX_ENERGY) {
                    currentEnergy += ENERGY_REGEN_RATE;
                    if (currentEnergy > MAX_ENERGY) currentEnergy = MAX_ENERGY;
                    updateEnergyUI();
                }
            }, ENERGY_REGEN_INTERVAL);
        }

        function consumeEnergy(amount) {
            if (currentEnergy >= amount) {
                currentEnergy -= amount;
                updateEnergyUI();
                return true;
            }
            return false;
        }

        function refillEnergyToMax() {
            currentEnergy = MAX_ENERGY;
            updateEnergyUI();
            showRewardPopup("Energy Full!", "Your energy bar has been refilled!");
        }

        function handleGetEnergyAdClick() {
            if (isLoading || currentEnergy >= MAX_ENERGY || !monetagSdkReady) return;
            if (Date.now() < adCooldownEndTime) { // Use general ad cooldown
                showInfoPopup("Cooldown Active", `Please wait for the ad cooldown to finish.`);
                return;
            }

            isWatchingAdForEnergy = true; // Set flag
            const showAdFunction = window[`show_${MONETAG_ZONE_ID}`];
            if (typeof showAdFunction !== 'function') {
                adError("Ad service unavailable for energy refill.");
                isWatchingAdForEnergy = false;
                return;
            }

            getEnergyAdButton.disabled = true;
            getEnergyAdButton.textContent = "Loading Ad...";

            try {
                showAdFunction().then(() => { // Ad watched successfully
                    console.log("Monetag ad for energy watched successfully.");
                    refillEnergyToMax();
                    startAdCooldown(true); // Start cooldown, true indicates for energy refill
                }).catch((error) => { // Ad failed or closed early
                    console.error("Monetag ad for energy failed or closed (via catch):", error);
                    adError("Ad skipped or failed. No energy refill.");
                }).finally(() => {
                    getEnergyAdButton.disabled = false;
                    getEnergyAdButton.textContent = "⚡️ GET ENERGY ⚡️";
                    isWatchingAdForEnergy = false;
                    updateEnergyUI(); // Refresh button state
                });
            } catch (error) {
                console.error(`Error calling Monetag show_${MONETAG_ZONE_ID} for energy:`, error);
                adError("Error launching ad service for energy.");
                isWatchingAdForEnergy = false;
            }
        }
        function adError(message) { // Helper for energy ad errors
            showWarningPopup("Ad Error", message);
            getEnergyAdButton.disabled = false;
            getEnergyAdButton.textContent = "⚡️ GET ENERGY ⚡️";
            updateEnergyUI();
        }


        // --- Game Logic ---
        function handleTap(event) {
            if (isLoading || !userData) return;
            if (!consumeEnergy(ENERGY_PER_TAP)) {
                // Optional: feedback for no energy
                // coinContainer.classList.add('shake-animation');
                // setTimeout(() => coinContainer.classList.remove('shake-animation'), 400);
                console.log("Not enough energy to tap.");
                return;
            }
            const tapValue = calculateTapPower();
            userData.coins += tapValue;
            let clientX, clientY;
            if (event.touches && event.touches.length > 0) {
                for (let i = 0; i < event.touches.length; i++) {
                    if (!consumeEnergy(ENERGY_PER_TAP * i)) break; // Stop if multi-touch exhausts energy
                    clientX = event.touches[i].clientX; clientY = event.touches[i].clientY;
                    createClickAnimation(clientX, clientY, tapValue);
                }
            } else {
                clientX = event.clientX; clientY = event.clientY;
                createClickAnimation(clientX, clientY, tapValue);
            }
            updateCoinDisplay(); scheduleSave();
        }

        function calculateTapPower() { let power = BASE_TAP_EARN; if (userData?.upgrades) { for (const upgradeId in userData.upgrades) { const upgradeDef = upgrades.find(u => u.id === upgradeId && u.type === 'click'); if (upgradeDef) { power += (upgradeDef.baseEffect || 0) * (userData.upgrades[upgradeId]?.level || 0); } } } return power; }
        function calculatePassiveIncomeRate() { let rate = 0; if (userData?.upgrades) { for (const upgradeId in userData.upgrades) { const upgradeDef = upgrades.find(u => u.id === upgradeId && u.type === 'passive'); if (upgradeDef) { rate += (upgradeDef.baseEffect || 0) * (userData.upgrades[upgradeId]?.level || 0); } } } return rate; }
        function applyPassiveIncome() { if (isLoading || !userData) return; const hourlyRate = calculatePassiveIncomeRate(); const incomePerTick = hourlyRate / 3600 * (PASSIVE_INCOME_INTERVAL / 1000); if (incomePerTick > 0) { userData.coins += incomePerTick; updateCoinDisplay(); } }
        function startPassiveIncome() { if (passiveIncomeIntervalId) clearInterval(passiveIncomeIntervalId); passiveIncomeIntervalId = setInterval(applyPassiveIncome, PASSIVE_INCOME_INTERVAL); }
        function scheduleSave() { saveUserData(); }
        function calculateOfflineProgress() {
            if (!userData || !userData.lastUpdate) return; const now = Date.now(); const offlineSeconds = Math.max(0, Math.floor((now - userData.lastUpdate) / 1000)); if (offlineSeconds < 10) return;
            const hourlyRate = calculatePassiveIncomeRate(); const offlineIncome = (hourlyRate / 3600) * offlineSeconds;
            if (offlineIncome > 0) { userData.coins += offlineIncome; showRewardPopup("Welcome Back!", `You earned ${formatNumber(offlineIncome)} ${WOLF_EMOJI} coins while away!`); }
        }

        // --- Mission Logic ---
        function checkAndClaimMission() { if (isLoading || !userData || !currentUser) return; const missionId = 'lastNameWolf'; const currentStatus = userData.missions?.[missionId] || 'incomplete'; const lastName = currentUser.last_name || ''; if (currentStatus === 'claimed') { showInfoPopup("Already Claimed", "Wolf Name Mission reward already claimed."); updateMissionUI(missionId, 'claimed'); return; } const isConditionMet = lastName.endsWith(WOLF_EMOJI); if (isConditionMet) { userData.coins += WOLF_MISSION_REWARD; userData.missions[missionId] = 'claimed'; showRewardPopup("Mission Complete!", `Earned ${formatNumber(WOLF_MISSION_REWARD)} coins!`); updateMissionUI(missionId, 'claimed'); updateUI(); saveUserData(true); } else { updateMissionUI(missionId, 'incomplete'); showInfoPopup("Mission Incomplete", `Add ${WOLF_EMOJI} to the *end* of your Telegram Last Name!`); } }
        function copyMissionEmoji() { navigator.clipboard.writeText(WOLF_EMOJI).then(() => { copyEmojiBtn.textContent = 'Copied!'; setTimeout(() => { copyEmojiBtn.textContent = 'Copy'; }, 1500); }).catch(err => { showWarningPopup("Copy Failed", "Could not copy. Manual: " + WOLF_EMOJI); }); }


        // --- Task Logic ---
        function loadAndDisplayTasks() {
            if (!db) return Promise.reject("DB missing");
            availableTasksListDiv.innerHTML = '<p>Loading tasks...</p>'; completedTasksListDiv.innerHTML = '<p>No tasks done yet.</p>';
            return db.ref('tasks').once('value').then(snapshot => {
                availableTasksListDiv.innerHTML = ''; completedTasksListDiv.innerHTML = ''; availableTasks = {};
                let hasAvailable = false; let hasCompleted = false;
                if (snapshot.exists()) {
                    availableTasks = snapshot.val() || {}; userData.completedTasks = userData.completedTasks || {};
                    for (const taskId in availableTasks) {
                        if (Object.hasOwnProperty.call(availableTasks, taskId)) {
                            const taskData = availableTasks[taskId]; const isCompleted = userData.completedTasks[taskId] === true;
                            renderTaskItem(taskData, taskId, isCompleted);
                            if (isCompleted) hasCompleted = true; else hasAvailable = true;
                        }
                    }
                }
                if (!hasAvailable) availableTasksListDiv.innerHTML = '<p>No tasks available.</p>';
                if (!hasCompleted) completedTasksListDiv.innerHTML = '<p>No tasks done yet.</p>';
            }).catch(error => { console.error("Error loading tasks:", error); availableTasksListDiv.innerHTML = '<p style="color: var(--error-color);">Could not load tasks.</p>'; completedTasksListDiv.innerHTML = ''; availableTasks = {}; });
        }
        function renderTaskItem(taskData, taskId, isCompleted) {
             if (!taskData || !taskId) return;
             const itemDiv = document.createElement('div'); itemDiv.className = 'item-card task-item'; itemDiv.dataset.taskId = taskId; itemDiv.dataset.completed = isCompleted;
             const imageUrl = taskData.imageUrl || `https://via.placeholder.com/40/1E1B41/FF00FF?text=${(taskData.name||'T')[0]}`;
             const description = taskData.description || (taskData.type === 'link' ? 'Complete action.' : 'Complete & enter code.');
             itemDiv.innerHTML = `
                 <img src="${imageUrl}" alt="" class="task-item-image" onerror="this.style.display='none'">
                 <div class="item-info task-item-info">
                     <div class="item-name task-item-name">${taskData.name || 'Task'}</div>
                     <div class="item-description task-item-description">${description}</div>
                     <div class="item-reward task-item-reward">
                         <img src="${COIN_IMAGE_URL}" class="coin-icon" alt="">
                         <span>+${formatNumber(taskData.reward || 0)}</span>
                     </div>
                 </div>
                 <div class="task-actions">
                     <button class="pixel-button task-button start-task-btn">Start</button>
                     <button class="pixel-button task-button verify-task-btn">Verify</button>
                     <span class="task-claimed-status">Claimed</span>
                 </div>`;
             const startBtn = itemDiv.querySelector('.start-task-btn'); const verifyBtn = itemDiv.querySelector('.verify-task-btn'); const claimedStatus = itemDiv.querySelector('.task-claimed-status');
             if (isCompleted) {
                 startBtn.style.display = 'none'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'block';
                 completedTasksListDiv.appendChild(itemDiv);
             } else {
                 startBtn.style.display = 'block'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'none';
                 startBtn.addEventListener('click', handleStartTaskClick); verifyBtn.addEventListener('click', handleVerifyTaskClick);
                 availableTasksListDiv.appendChild(itemDiv);
             }
        }
        function handleStartTaskClick(event) {
            if (isLoading || !userData) return; const button = event.target; const taskItem = button.closest('.task-item'); const taskId = taskItem.dataset.taskId; const taskData = availableTasks[taskId]; if (!taskData) return; if (userData.completedTasks?.[taskId]) { showInfoPopup("Already Done", "This task is completed."); return; }
             if (taskData.link) { try { tg.openLink(taskData.link); } catch (e) { window.open(taskData.link, '_blank');} }
             else if (taskData.type === 'link') { showWarningPopup("Task Error", "Task link missing."); return; }
             button.disabled = true;
             if (taskData.type === 'link') {
                 taskItem.dataset.status = 'verifying'; const verifyBtn = taskItem.querySelector('.verify-task-btn');
                 button.style.display = 'none'; verifyBtn.style.display = 'block'; verifyBtn.disabled = true;
                 verifyBtn.textContent = `Wait (${TASK_VERIFICATION_DELAY / 1000}s)`; let countdown = TASK_VERIFICATION_DELAY / 1000; const intervalId = setInterval(() => { countdown--; if (countdown > 0) { verifyBtn.textContent = `Wait (${countdown}s)`; } else { clearInterval(intervalId); verifyBtn.textContent = 'Verify'; verifyBtn.disabled = false; } }, 1000);
             } else if (taskData.type === 'code') {
                 showCodePopup(taskId, taskData);
                 // button.disabled = false; // Re-enable handled by closeCustomPopup if cancelled
             } else { button.disabled = false; showWarningPopup("Task Error", "Unknown task type."); }
         }
        function handleVerifyTaskClick(event) {
            if (isLoading || !userData) return; const button = event.target; const taskItem = button.closest('.task-item'); const taskId = taskItem.dataset.taskId; const taskData = availableTasks[taskId]; if (!taskData) return; if (userData.completedTasks?.[taskId]) return;
             button.disabled = true; button.textContent = "Verifying...";
             claimTaskReward(taskId, taskData.reward); // Simulate verification
         }
        function showCodePopup(taskId, taskData) {
            currentCodeTaskId = taskId; // Store globally for submit
            openCustomPopup({
                title: taskData.name || "Enter Code",
                message: taskData.description || "Enter the code found after completing the task.",
                showInput: true,
                inputPlaceholder: "ENTER CODE HERE",
                buttons: [
                    { text: "Cancel", style: "secondary", callback: () => {
                        // Re-enable start button on cancel
                        const taskItem = availableTasksListDiv.querySelector(`.task-item[data-task-id="${taskId}"]`);
                        if(taskItem) {
                            const startBtn = taskItem.querySelector('.start-task-btn');
                            if(startBtn) startBtn.disabled = false;
                        }
                    }},
                    { text: "Submit", style: "success", callback: handleCodeSubmit }
                ]
            });
        }
        function handleCodeSubmit(submittedCode) { // submittedCode is passed by custom popup
             if (!currentCodeTaskId || !availableTasks[currentCodeTaskId] || !userData) { currentCodeTaskId = null; return; }
             const taskId = currentCodeTaskId; const taskData = availableTasks[taskId];
             if (!submittedCode) { showWarningPopup("Input Error", "Please enter the code."); showCodePopup(taskId, taskData); return; } // Re-open if empty
             if (taskData.code && submittedCode.trim().toLowerCase() === taskData.code.toLowerCase()) {
                 claimTaskReward(taskId, taskData.reward);
             } else {
                 showWarningPopup("Incorrect Code", "The code is incorrect. Please try again.");
                 showCodePopup(taskId, taskData); // Re-open popup on incorrect code
             }
             currentCodeTaskId = null; // Reset after attempt
        }
        function claimTaskReward(taskId, rewardAmount) {
             if (isLoading || !userData || !taskId || rewardAmount === undefined) return;
             if (userData.completedTasks?.[taskId]) { moveTaskToCompletedUI(taskId); return; }
             userData.coins += rewardAmount; if (!userData.completedTasks) userData.completedTasks = {}; userData.completedTasks[taskId] = true;
             showRewardPopup("Task Complete!", `You earned +${formatNumber(rewardAmount)} coins!`);
             moveTaskToCompletedUI(taskId); updateUI(); saveUserData(true);
        }
        function moveTaskToCompletedUI(taskId) {
            const taskItem = availableTasksListDiv.querySelector(`.task-item[data-task-id="${taskId}"]`);
             if (!taskItem) {
                 const alreadyCompletedItem = completedTasksListDiv.querySelector(`.task-item[data-task-id="${taskId}"]`);
                 if (alreadyCompletedItem) { // Ensure its UI is correct if somehow missed
                     const startBtn = alreadyCompletedItem.querySelector('.start-task-btn'); const verifyBtn = alreadyCompletedItem.querySelector('.verify-task-btn'); const claimedStatus = alreadyCompletedItem.querySelector('.task-claimed-status');
                     if(startBtn) startBtn.style.display = 'none'; if(verifyBtn) verifyBtn.style.display = 'none'; if(claimedStatus) claimedStatus.style.display = 'block';
                     alreadyCompletedItem.dataset.completed = "true";
                 }
                 return;
             }
             const startBtn = taskItem.querySelector('.start-task-btn'); const verifyBtn = taskItem.querySelector('.verify-task-btn'); const claimedStatus = taskItem.querySelector('.task-claimed-status');
             taskItem.dataset.completed = "true";
             startBtn.style.display = 'none'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'block';
             startBtn.removeEventListener('click', handleStartTaskClick); verifyBtn.removeEventListener('click', handleVerifyTaskClick);
             completedTasksListDiv.appendChild(taskItem);
             if (availableTasksListDiv.children.length === 0 || (availableTasksListDiv.children.length === 1 && availableTasksListDiv.children[0].tagName === 'P')) { availableTasksListDiv.innerHTML = '<p>No tasks available.</p>'; }
             const completedPlaceholder = completedTasksListDiv.querySelector('p');
             if (completedPlaceholder && completedTasksListDiv.children.length > 1) { completedPlaceholder.style.display = 'none'; }
        }

        // --- Daily Lucky Code Logic ---
        function updateLuckyCodeSectionUI() {
            if (!claimLuckyCodeBtn || !luckyCodeInput || !luckyCodeStatus) return;
             if (dailyLuckyCodeData === null) { luckyCodeStatus.textContent = "Checking code..."; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "Checking..."; return; }
             if (!dailyLuckyCodeData || !dailyLuckyCodeData.code) { luckyCodeStatus.textContent = "No code today."; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "N/A"; return; }
             const todayUTCString = new Date().toISOString().split('T')[0]; const lastClaimDate = userData?.lastLuckyCodeClaim;
             if (lastClaimDate === todayUTCString) { luckyCodeStatus.textContent = `🎁 Claimed! +${formatNumber(dailyLuckyCodeData.reward || 0)}`; luckyCodeStatus.className = 'lucky-code-status claimed'; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "Claimed"; }
             else { luckyCodeStatus.textContent = ""; luckyCodeInput.disabled = false; claimLuckyCodeBtn.disabled = false; claimLuckyCodeBtn.textContent = "Claim"; }
        }
        function handleLuckyCodeClaim() {
            if (isLoading || !userData || !dailyLuckyCodeData || !dailyLuckyCodeData.code) { showWarningPopup("Hold On!", "Daily code not ready."); updateLuckyCodeSectionUI(); return; }
             const todayUTCString = new Date().toISOString().split('T')[0]; if (userData.lastLuckyCodeClaim === todayUTCString) { showInfoPopup("Already Claimed", "Code claimed for today."); updateLuckyCodeSectionUI(); return; }
             const enteredCode = luckyCodeInput.value.trim().toUpperCase();
             if (!enteredCode) { luckyCodeStatus.textContent = "Enter the code."; luckyCodeStatus.className = 'lucky-code-status error'; return; }
             if (enteredCode === dailyLuckyCodeData.code.toUpperCase()) {
                 const reward = dailyLuckyCodeData.reward || 0; userData.coins += reward; userData.lastLuckyCodeClaim = todayUTCString;
                 showRewardPopup("Code Accepted!", `+${formatNumber(reward)} lucky coins!`); luckyCodeInput.value = ''; updateUI(); saveUserData(true);
             } else { luckyCodeStatus.textContent = "Incorrect code!"; luckyCodeStatus.className = 'lucky-code-status error'; luckyCodeInput.focus(); luckyCodeInput.select(); claimLuckyCodeBtn.classList.add('shake-animation'); setTimeout(() => claimLuckyCodeBtn.classList.remove('shake-animation'), 400); }
        }

        // --- Ads Logic ---
        function updateAdsUI() {
            if (isLoading || !userData || !userData.ads) return;
            checkAndResetDailyAds();
            const watchedToday = userData.ads.watchedToday || 0; const limitReached = watchedToday >= ADS_DAILY_LIMIT;
            const now = Date.now(); const cooldownActive = now < adCooldownEndTime && !isWatchingAdForEnergy; // Don't show cooldown if trying energy ad

            adsWatchedTodaySpan.textContent = watchedToday; adsDailyLimitSpan.textContent = ADS_DAILY_LIMIT; adRewardAmountSpan.textContent = formatNumber(AD_REWARD_AMOUNT);
            adMessageP.textContent = ''; adMessageP.className = 'ad-message';

            if (!monetagSdkReady) { watchAdButton.disabled = true; watchAdButton.textContent = "Ads N/A"; adMessageP.textContent = "Ad service failed."; adMessageP.className = 'ad-message error'; }
            else if (limitReached) { watchAdButton.disabled = true; watchAdButton.textContent = "Limit Reached"; adMessageP.textContent = "Come back tomorrow!"; adMessageP.className = 'ad-message limit'; adCooldownTimerP.style.display = 'none'; if (adCooldownInterval) clearInterval(adCooldownInterval); }
            else if (cooldownActive) { watchAdButton.disabled = true; /* Timer handled by startAdCooldown */ }
            else { watchAdButton.disabled = false; watchAdButton.textContent = "Watch Ad"; adCooldownTimerP.style.display = 'none'; if (adCooldownInterval) clearInterval(adCooldownInterval); }
        }

        function handleWatchAdClick() { // For regular coin reward ads
            if (isLoading || !userData || !userData.ads || isWatchingAdForEnergy) return;
            const watchedToday = userData.ads.watchedToday || 0; const limitReached = watchedToday >= ADS_DAILY_LIMIT;
            const now = Date.now(); const cooldownActive = now < adCooldownEndTime;
            if (limitReached || cooldownActive || !monetagSdkReady) { updateAdsUI(); return; }

            const showAdFunction = window[`show_${MONETAG_ZONE_ID}`];
            if (typeof showAdFunction !== 'function') {
                adMessageP.textContent = "Error: Ad service unavailable."; adMessageP.className = 'ad-message error';
                watchAdButton.disabled = true; watchAdButton.textContent = "Ads N/A"; monetagSdkReady = false; return;
            }
            watchAdButton.disabled = true; watchAdButton.textContent = "Loading Ad..."; adMessageP.textContent = '';
            try {
                showAdFunction().then(() => {
                    userData.coins += AD_REWARD_AMOUNT; userData.ads.watchedToday += 1; userData.ads.lastWatchedDate = getTodayDateString();
                    showRewardPopup("Ad Watched!", `+${formatNumber(AD_REWARD_AMOUNT)} coins!`);
                    updateCoinDisplay(); updateAdsUI();
                    if (userData.ads.watchedToday < ADS_DAILY_LIMIT) startAdCooldown(false); // false for regular ad
                    saveUserData(true);
                }).catch((error) => {
                    adMessageP.textContent = "Ad failed or skipped."; adMessageP.className = 'ad-message error'; updateAdsUI();
                });
            } catch (error) {
                adMessageP.textContent = "Error launching ad."; adMessageP.className = 'ad-message error'; updateAdsUI();
            }
        }

        function startAdCooldown(forEnergyAd) { // Parameter to distinguish context
            if (isLoading) return;
            adCooldownEndTime = Date.now() + AD_COOLDOWN_SECONDS * 1000;
            if (adCooldownInterval) clearInterval(adCooldownInterval);

            const buttonToUpdate = forEnergyAd ? getEnergyAdButton : watchAdButton;
            const timerDisplay = forEnergyAd ? null : adCooldownTimerP; // Only regular ads use the specific timer P element

            if(buttonToUpdate) buttonToUpdate.disabled = true;
            if(timerDisplay) timerDisplay.style.display = 'block';

            const updateTimer = () => {
                const now = Date.now(); const remainingSeconds = Math.max(0, Math.ceil((adCooldownEndTime - now) / 1000));
                if (remainingSeconds > 0) {
                    if(buttonToUpdate) buttonToUpdate.textContent = `Wait ${remainingSeconds}s`;
                    if(timerDisplay) timerDisplay.textContent = `Next ad in ${remainingSeconds}s...`;
                } else {
                    clearInterval(adCooldownInterval); adCooldownInterval = null;
                    if(timerDisplay) timerDisplay.style.display = 'none';
                    if (forEnergyAd) { updateEnergyUI(); } else { updateAdsUI(); }
                }
            };
            adCooldownInterval = setInterval(updateTimer, 1000); updateTimer();
        }

        // --- UI Functions ---
        function initializeAppUI() {
            missionEmojiDisplay.textContent = WOLF_EMOJI; renderShopItems(); updateUI();
            loadingDiv.style.display = 'none'; mainContentDiv.style.display = 'flex'; navbar.style.display = 'flex';
            updateAdsUI(); updateEnergyUI(); // Init these specific UIs
        }
        function updateUI() {
            if (isLoading || !userData || !currentUser) return;
            updateCoinDisplay(); updateGameStats(); updateShopItemsUI(); updateProfileStats();
            updateMissionStatusUI(); updateLuckyCodeSectionUI(); updateAdsUI(); updateEnergyUI();
        }
        function updateCoinDisplay() { if (userData) coinBalanceSpan.textContent = formatNumber(userData.coins); }
        function updateGameStats() { if (!userData) return; tapPowerDisplaySpan.textContent = formatNumber(calculateTapPower()); passiveIncomeDisplaySpan.textContent = formatNumber(calculatePassiveIncomeRate()); }
        function updateProfileStats() { if (!userData || !currentUser) return; profileUserIdSpan.textContent = currentUser.id || 'N/A'; profileUsernameSpan.textContent = currentUser.username || 'N/A'; profileFirstNameSpan.textContent = currentUser.first_name || ''; profileLastNameSpan.textContent = currentUser.last_name || ''; profileCoinsSpan.textContent = formatNumber(userData.coins); profileTapPowerSpan.textContent = formatNumber(calculateTapPower()); profilePassiveIncomeSpan.textContent = formatNumber(calculatePassiveIncomeRate()); tonWalletInput.value = userData.tonWallet || ''; }
        function updateMissionStatusUI() { if (!userData || !currentUser) return; const missionId = 'lastNameWolf'; const status = userData?.missions?.[missionId] || 'incomplete'; updateMissionUI(missionId, status); }
        function updateMissionUI(missionId, status) { missionStatusDiv.classList.remove('incomplete', 'claimed'); missionStatusDiv.classList.add(status === 'claimed' ? 'claimed' : 'incomplete'); switch (status) { case 'incomplete': missionStatusDiv.textContent = 'Status: Incomplete'; missionClaimBtn.textContent = 'Check & Claim'; missionClaimBtn.disabled = false; break; case 'claimed': missionStatusDiv.textContent = 'Status: Claimed!'; missionClaimBtn.textContent = 'Claimed'; missionClaimBtn.disabled = true; break; } }
        function renderShopItems() {
            clickUpgradesDiv.innerHTML = ''; passiveUpgradesDiv.innerHTML = ''; if (!userData) return;
            upgrades.forEach(upgrade => {
                const itemDiv = document.createElement('div'); itemDiv.className = 'item-card shop-item'; itemDiv.id = `shop-item-${upgrade.id}`;
                const level = userData.upgrades?.[upgrade.id]?.level || 0; const cost = calculateUpgradeCost(upgrade, level);
                itemDiv.innerHTML = `
                    <div class="item-info shop-item-info">
                        <div class="item-name shop-item-name">${upgrade.name} (Lv.${level})</div>
                        <div class="item-details shop-item-details">${upgrade.description}</div>
                        <div class="item-cost shop-item-cost">
                            <img src="${COIN_IMAGE_URL}" class="coin-icon" alt="">
                            <span class="cost-value">${formatNumber(cost)}</span>
                        </div>
                    </div>
                    <button class="pixel-button buy-button" data-upgrade-id="${upgrade.id}">Buy</button>`;
                if (upgrade.type === 'click') clickUpgradesDiv.appendChild(itemDiv);
                else if (upgrade.type === 'passive') passiveUpgradesDiv.appendChild(itemDiv);
            });
            document.querySelectorAll('.buy-button').forEach(button => { button.removeEventListener('click', handleBuyButtonClick); button.addEventListener('click', handleBuyButtonClick); });
            updateShopItemsUI();
        }
        function updateShopItemsUI() { if (!userData) return; const currentCoins = userData.coins; upgrades.forEach(upgrade => { const itemDiv = document.getElementById(`shop-item-${upgrade.id}`); if (!itemDiv) return; const level = userData.upgrades?.[upgrade.id]?.level || 0; const cost = calculateUpgradeCost(upgrade, level); const nameSpan = itemDiv.querySelector('.shop-item-name'); if (nameSpan) nameSpan.textContent = `${upgrade.name} (Lv.${level})`; const costSpan = itemDiv.querySelector('.cost-value'); if (costSpan) costSpan.textContent = formatNumber(cost); const button = itemDiv.querySelector('.buy-button'); if (button) button.disabled = currentCoins < cost; }); }
        function handleBuyButtonClick(event) { const upgradeId = event.target.dataset.upgradeId; handleUpgradePurchase(upgradeId); }
        function handleUpgradePurchase(upgradeId) { if (isLoading || !userData) return; const upgradeDef = upgrades.find(u => u.id === upgradeId); if (!upgradeDef) return; const currentLevel = userData.upgrades?.[upgradeId]?.level || 0; const cost = calculateUpgradeCost(upgradeDef, currentLevel); if (userData.coins >= cost) { userData.coins -= cost; if (!userData.upgrades[upgradeId]) userData.upgrades[upgradeId] = { level: 0 }; userData.upgrades[upgradeId].level += 1; updateUI(); scheduleSave(); } else { const button = document.querySelector(`.buy-button[data-upgrade-id="${upgradeId}"]`); if (button) { button.classList.add('shake-animation'); setTimeout(() => button.classList.remove('shake-animation'), 400); } } }
        function calculateUpgradeCost(upgradeDef, currentLevel) { const scalingFactor = Math.max(1, Math.floor(upgradeDef.baseCost / 100000)); return Math.floor(upgradeDef.baseCost + (currentLevel * INCREASING_COST_BASE * scalingFactor * (1 + currentLevel * 0.05))); }
        function createClickAnimation(x, y, amount) { const feedback = document.createElement('div'); feedback.className = 'click-value'; feedback.textContent = `+${formatNumber(amount)}`; feedback.style.left = `${x}px`; feedback.style.top = `${y}px`; feedback.style.transform = 'translate(-50%, -100%)'; clickFeedbackDiv.appendChild(feedback); setTimeout(() => { feedback.remove(); }, 950); }
        function showPage(pageId) {
             if (isLoading) return;
             document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
             const targetPage = document.getElementById(pageId); if (!targetPage) { console.error("Target page not found:", pageId); return; }
             targetPage.classList.add('active'); targetPage.scrollTop = 0;
             navButtons.forEach(button => { button.classList.remove('active'); if (button.id === `nav-${pageId.split('-')[0]}`) { button.classList.add('active'); } });
             if (pageId === 'profile-screen') { updateProfileStats(); updateMissionStatusUI(); updateLuckyCodeSectionUI(); }
             else if (pageId === 'tasks-screen') { const activeTabId = document.querySelector('.task-tabs button.active')?.id || 'tab-available'; const listId = activeTabId === 'tab-available' ? 'available-tasks-list' : 'completed-tasks-list'; showTaskListCategory(listId); }
             else if (pageId === 'ads-screen') { updateAdsUI(); }
             else if (pageId === 'game-screen') { updateEnergyUI(); }
         }
        function showShopCategory(categoryId) { shopCategories.forEach(cat => cat.classList.remove('active')); document.getElementById(categoryId).classList.add('active'); shopTabButtons.forEach(button => button.classList.remove('active')); document.getElementById(`tab-${categoryId.split('-')[0]}`).classList.add('active'); }
        function showTaskListCategory(categoryId) { taskListCategories.forEach(cat => cat.classList.remove('active')); const listToShow = document.getElementById(categoryId); if (listToShow) listToShow.classList.add('active'); taskTabButtons.forEach(button => button.classList.remove('active')); document.getElementById(`tab-${categoryId.split('-')[0]}`).classList.add('active'); }
        function saveWallet() { if (isLoading || !userData) return; const newAddress = tonWalletInput.value.trim(); userData.tonWallet = newAddress; saveUserData(true); saveStatusP.textContent = 'Wallet saved!'; saveStatusP.className = 'success'; setTimeout(() => {saveStatusP.textContent = ''; saveStatusP.className='';}, 3000); }
        function showError(message) {
            const displayMessage = typeof message === 'string' ? message : 'Unknown error.';
            loadingDiv.innerHTML = `Error:<br>${displayMessage}<br>Please Reload.`; // Use innerHTML for <br>
            loadingDiv.classList.add('error-state'); // Add error class for specific styling if needed
            loadingDiv.style.display = 'flex';
            console.error("App Error Displayed:", displayMessage);
            mainContentDiv.style.display = 'none'; navbar.style.display = 'none';
            if (passiveIncomeIntervalId) clearInterval(passiveIncomeIntervalId);
            if (adCooldownInterval) clearInterval(adCooldownInterval);
            if (energyRegenIntervalId) clearInterval(energyRegenIntervalId);
            isLoading = false;
            // Use custom popup for error if app is partially loaded
            if (tg && customModal) { // Check if tg and modal system are available
                 openCustomPopup({ title: "🛑 App Error", message: displayMessage + "<br>Please try reloading.", buttons: [{text: "Reload", callback: () => window.location.reload()}] });
            }
        }
        function formatNumber(num) { num = Math.floor(num); const suffixes = ["", "K", "M", "B", "T", "Qa", "Qi"]; let suffixIndex = 0; if (num < 1000) return num.toString(); while (num >= 1000 && suffixIndex < suffixes.length - 1) { num /= 1000; suffixIndex++; } let precision = (num < 10 && suffixIndex > 0) ? 1 : 0; const numString = num.toFixed(precision); return (precision > 0 ? parseFloat(numString) : numString) + suffixes[suffixIndex]; }

        // --- Event Listeners Setup ---
        function setupEventListeners() {
             coinContainer.removeEventListener('pointerdown', handleTap);
             saveWalletButton.removeEventListener('click', saveWallet);
             copyEmojiBtn.removeEventListener('click', copyMissionEmoji);
             missionClaimBtn.removeEventListener('click', checkAndClaimMission);
             // codePopupCancelBtn/SubmitBtn removed, handled by custom modal
             // codePopup (overlay click) removed, handled by custom modal
             claimLuckyCodeBtn.removeEventListener('click', handleLuckyCodeClaim);
             watchAdButton.removeEventListener('click', handleWatchAdClick);
             getEnergyAdButton.removeEventListener('click', handleGetEnergyAdClick); // New

             coinContainer.addEventListener('pointerdown', handleTap, { passive: false });
             saveWalletButton.addEventListener('click', saveWallet);
             copyEmojiBtn.addEventListener('click', copyMissionEmoji);
             missionClaimBtn.addEventListener('click', checkAndClaimMission);
             claimLuckyCodeBtn.addEventListener('click', handleLuckyCodeClaim);
             watchAdButton.addEventListener('click', handleWatchAdClick);
             getEnergyAdButton.addEventListener('click', handleGetEnergyAdClick); // New

             // Custom modal overlay click to close (optional, if not clicking specific buttons)
             customModal.addEventListener('click', (event) => {
                if (event.target === customModal) {
                    // Decide if overlay click should always close, or only if no input/specific state
                    // For now, let's assume it doesn't close on overlay click to force button interaction
                    // closeCustomPopup();
                }
             });
        }
    </script>
</body>
</html>
