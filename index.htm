<!DOCTYPE html>
<html lang="en">
<head>
    <script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
    <script
        async
        src="https://tganalytics.xyz/index.js"
        onload="initAnalytics()"
        type="text/javascript"
    ></script>

    <script src="https://telegram.org/js/telegram-web-app.js"></script>

    <script type="module">
      import { Analytics } from 'https://cdn.jsdelivr.net/npm/@tma.js/analytics';

      const analytics = Analytics.init({
        token: "eyJhcHBfbmFtZSI6Ik1lbWVXb2xmIiwiYXBwX3VybCI6Imh0dHBzOi8vdC5tZS9NZW1ld29sZmVhcm5ib3QiLCJhcHBfZG9tYWluIjoiaHR0cHM6Ly9tZW1ld29sZmJvdC52ZXJjZWwuYXBwLyJ9!aHpBDg5nS3R8RqG692rUXAHxunVeLkJEzq7R2UIyP1M="
      });

      analytics.track("app_opened");
    </script>

    <script
        async
        src="https://unpkg.com/@telegram-apps/analytics@latest/dist/index.js"
        onload="initAnalytics()"
        type="text/javascript"
    ></script>

    <script src='//whephiwums.com/sdk.js' data-zone='9300768' data-sdk='show_9300768'></script>

    <script>
        function initAnalytics() {
          if (window.telegramAnalytics && typeof window.telegramAnalytics.init === 'function') {
              window.telegramAnalytics.init({
                  token: '7117728183:AAHNrUikov1d9lN1aojYGNyobKHOOvodUm4', // Your TG Analytics Token
                  appName: 'MemeWolf',
              });
              console.log("Telegram Analytics Initialized");
          }
          console.log("Analytics Initialized (or attempted)");
        }
    </script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Meme Wolf Tap - 8Bit</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>

    <style>
        :root {
            --primary-bg: #1a001a;
            --secondary-bg: #330033;
            --accent-color: #ff00ff;
            --accent-hover: #cc00cc;
            --text-color: #f0f0f0;
            --text-muted-color: #a0a0a0;
            --coin-color: #ffd700;
            --icon-color: #c0c0c0;
            --icon-active-color: #ffffff;
            --button-bg: var(--accent-color);
            --button-text-color: #000000;
            --button-hover-bg: var(--accent-hover);
            --success-color: #00ff00;
            --warning-color: #ffff00;
            --error-color: #ff0000;
            --disabled-bg: #444;
            --disabled-text: #888;
            --shadow-color-pixel: #000000;
            --energy-bar-bg: #500050;
            --energy-bar-fill: #ff00ff;
            --energy-text-color: #ffffff;

            font-family: 'Press Start 2P', cursive;
            font-size: 10px; /* Base for 8-bit, scale up with em */
        }
        * { box-sizing: border-box; margin: 0; padding: 0; -webkit-tap-highlight-color: transparent; image-rendering: pixelated; }
        html, body { height: 100%; width: 100%; overflow: hidden; background: var(--primary-bg); color: var(--text-color); overscroll-behavior: none; }
        body { display: flex; flex-direction: column; touch-action: manipulation; }
        #app { display: flex; flex-direction: column; height: 100%; width: 100%; overflow: hidden; border: 3px solid var(--accent-color); }
        #loading { display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100%; font-size: 1.5em; color: var(--text-color); text-align: center; padding: 20px; }
        #main-content { flex-grow: 1; display: flex; overflow: hidden; }
        .page { width: 100%; height: 100%; display: none; flex-direction: column; flex-grow: 1; overflow-y: auto; -webkit-overflow-scrolling: touch; padding: 15px 10px 75px 10px; scroll-behavior: smooth; }
        .page.active { display: flex; }
        nav { position: fixed; bottom: 0; left: 0; width: 100%; display: flex; justify-content: space-around; align-items: center; background-color: var(--secondary-bg); border-top: 2px solid var(--accent-color); padding: 5px 0; z-index: 100; box-shadow: 0 -2px 0px 0px var(--shadow-color-pixel); }
        nav button { background: none; border: none; color: var(--icon-color); cursor: pointer; display: flex; flex-direction: column; align-items: center; font-size: 0.8em; padding: 5px; transition: color 0.2s ease; flex-grow: 1; flex-basis: 0; }
        nav button .material-icons { font-size: 20px; margin-bottom: 2px; }
        nav button:hover { color: var(--icon-active-color); }
        nav button.active { color: var(--accent-color); }

        #game-screen { justify-content: space-between; align-items: center; text-align: center; padding-top: 5px; }
        .stats-bar { display: flex; justify-content: space-around; width: 100%; max-width: 300px; margin-bottom: 8px; font-size: 0.8em; color: var(--text-muted-color); background-color: var(--secondary-bg); padding: 6px 8px; border: 2px solid var(--accent-color); box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); }
        .stat-item { display: flex; align-items: center; gap: 4px; }
        .stat-item .material-icons { font-size: 12px; color: var(--coin-color); }
        .coin-balance-container { display: flex; align-items: center; justify-content: center; margin-bottom: 10px; }
        #coin-icon-balance { width: 24px; height: 24px; margin-right: 6px; vertical-align: middle; }
        #coin-balance { font-size: 2em; font-weight: bold; color: var(--coin-color); text-shadow: 1px 1px 0px var(--shadow-color-pixel); }

        .energy-container { width: 90%; max-width: 250px; margin: 0 auto 10px auto; }
        #energy-bar-bg { background-color: var(--energy-bar-bg); border: 2px solid var(--accent-color); padding: 2px; height: 20px; box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); }
        #energy-bar-fill { background-color: var(--energy-bar-fill); height: 100%; width: 100%; transition: width 0.2s linear; }
        #energy-text { text-align: center; font-size: 0.9em; margin-top: 3px; color: var(--energy-text-color); text-shadow: 1px 1px 0px var(--shadow-color-pixel); }
        #refill-energy-button { font-size: 0.9em; padding: 8px 12px; margin-top: 5px; background-color: var(--success-color); color: var(--button-text-color); border: 2px solid var(--shadow-color-pixel); box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); }
        #refill-energy-button:hover:not(:disabled) { background-color: #00cc00; }


        .coin-area { flex-grow: 1; display: flex; justify-content: center; align-items: center; width: 100%; margin-bottom: 8px; }
        #coin-container { position: relative; width: clamp(150px, 45vmin, 200px); height: clamp(150px, 45vmin, 200px); cursor: pointer; user-select: none; -webkit-user-drag: none; border: 3px solid var(--accent-color); background-color: var(--secondary-bg); box-shadow: 3px 3px 0px 0px var(--shadow-color-pixel); }
        #coin-image { width: 100%; height: 100%; transition: transform 0.08s ease-out; filter: drop-shadow(2px 2px 0px var(--shadow-color-pixel)); padding: 10%; }
        #coin-container:active #coin-image { transform: scale(0.95); filter: drop-shadow(1px 1px 0px var(--shadow-color-pixel)); }
        #click-feedback { position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; overflow: hidden; z-index: 99; }
        .click-value { position: absolute; font-size: clamp(1.3em, 4vw, 1.6em); font-weight: bold; color: var(--coin-color); user-select: none; pointer-events: none; animation: floatUpFadeOut 1.2s ease-out forwards; white-space: nowrap; text-shadow: 1px 1px 0px var(--shadow-color-pixel); }
        @keyframes floatUpFadeOut { 0% { opacity: 1; transform: translateY(0) scale(1); } 100% { opacity: 0; transform: translateY(-60px) scale(0.8); } }

        #shop-screen h2, #profile-screen h2, #tasks-screen h2, #ads-screen h2 { text-align: center; margin-bottom: 20px; color: var(--accent-color); font-size: 1.4em; text-shadow: 1px 1px 0px var(--shadow-color-pixel); }
        .shop-tabs, .task-tabs { display: flex; justify-content: center; margin-bottom: 20px; border-bottom: 2px solid var(--accent-color); position: sticky; top: -15px; background: var(--primary-bg); padding-top: 10px; z-index: 10; }
        .shop-tabs button, .task-tabs button { background: none; border: none; color: var(--icon-color); padding: 8px 12px; cursor: pointer; font-size: 0.9em; font-weight: 500; border-bottom: 3px solid transparent; margin-bottom: -2px; transition: color 0.2s ease, border-color 0.2s ease; }
        .shop-tabs button:hover, .task-tabs button:hover { color: var(--icon-active-color); }
        .shop-tabs button.active, .task-tabs button.active { color: var(--accent-color); border-bottom-color: var(--accent-color); }
        .shop-category, .task-list-category { display: none; flex-direction: column; gap: 10px; }
        .shop-category.active, .task-list-category.active { display: flex; }
        .shop-item { background-color: var(--secondary-bg); padding: 12px; display: flex; justify-content: space-between; align-items: center; gap: 10px; border: 2px solid var(--accent-color); box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); }
        .shop-item-info { flex-grow: 1; }
        .shop-item-name { font-weight: 600; font-size: 1em; margin-bottom: 3px; color: var(--text-color); }
        .shop-item-details { font-size: 0.8em; color: var(--text-muted-color); margin-bottom: 6px; }
        .shop-item-cost { display: flex; align-items: center; gap: 4px; font-weight: bold; color: var(--coin-color); font-size: 0.9em; }
        .shop-item-cost img { width: 12px; height: 12px; }
        .buy-button, .task-button, .mission-action-button, #save-wallet-button, #claim-lucky-code-btn { background: var(--button-bg); color: var(--button-text-color); border: 2px solid var(--shadow-color-pixel); padding: 8px 15px; cursor: pointer; font-weight: 600; font-size: 0.9em; transition: background 0.2s ease, transform 0.1s ease, box-shadow 0.2s ease; white-space: nowrap; box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); font-family: 'Press Start 2P', cursive; }
        .buy-button:hover:not(:disabled), .task-button:hover:not(:disabled), .mission-action-button:hover:not(:disabled), #save-wallet-button:hover:not(:disabled), #claim-lucky-code-btn:hover:not(:disabled) { background: var(--button-hover-bg); box-shadow: 2px 2px 0px 0px #222; }
        .buy-button:active:not(:disabled), .task-button:active:not(:disabled), .mission-action-button:active:not(:disabled), #save-wallet-button:active:not(:disabled), #claim-lucky-code-btn:active:not(:disabled) { transform: translate(1px, 1px); box-shadow: 1px 1px 0px 0px var(--shadow-color-pixel); }
        .buy-button:disabled, .task-button:disabled, .mission-action-button:disabled, #save-wallet-button:disabled, #claim-lucky-code-btn:disabled, #refill-energy-button:disabled { background: var(--disabled-bg); color: var(--disabled-text); cursor: not-allowed; box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); opacity: 0.7; }

        .profile-section { background-color: var(--secondary-bg); padding: 15px; margin-bottom: 15px; border: 2px solid var(--accent-color); box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); }
        .profile-info p { margin-bottom: 8px; font-size: 0.9em; line-height: 1.4; word-break: break-all; display: flex; align-items: center; flex-wrap: wrap; }
        .profile-info p strong { color: var(--coin-color); margin-right: 6px; min-width: 100px; display: inline-block; }
        .profile-info p span { flex-grow: 1; }
        .wallet-section label, .lucky-code-section label { display: block; margin-bottom: 8px; font-weight: 600; color: var(--text-muted-color); font-size: 0.9em; }
        #ton-wallet-input, #lucky-code-input { width: 100%; padding: 8px; margin-bottom: 10px; border: 2px solid var(--accent-color); background-color: var(--primary-bg); color: var(--text-color); font-size: 0.9em; font-family: 'Press Start 2P', cursive; }
        #save-status, #lucky-code-status { margin-top: 8px; text-align: center; font-size: 0.8em; height: 1.2em; font-weight: 500; }
        #save-status { color: var(--success-color); }
        #lucky-code-status { color: var(--warning-color); } #lucky-code-status.success { color: var(--success-color); } #lucky-code-status.claimed { color: var(--coin-color); }
        .mission-title { font-size: 1.1em; font-weight: 600; margin-bottom: 8px; color: var(--text-color); }
        .mission-description { font-size: 0.9em; color: var(--text-muted-color); margin-bottom: 10px; line-height: 1.4; }
        .mission-emoji { font-size: 1.5em; margin: 0 3px; display: inline-block; cursor: default; }
        .copy-emoji-button { border: 1px solid var(--accent-color); color: var(--accent-color); padding: 3px 6px; font-size: 0.7em; cursor: pointer; margin-left: 8px; transition: background-color 0.2s ease, color 0.2s ease; font-family: 'Press Start 2P', cursive; }
        .copy-emoji-button:hover { background-color: var(--accent-color); color: var(--button-text-color); }
        .mission-status { font-weight: bold; margin: 10px 0; font-size: 0.9em; }
        .mission-status.incomplete { color: var(--text-muted-color); } .mission-status.claimed { color: var(--coin-color); }
        .reward-display { display: flex; align-items: center; justify-content: center; gap: 4px; font-weight: bold; color: var(--coin-color); margin-top: 4px; font-size: 0.9em; }
        .fine-applied { color: var(--error-color); font-weight: bold; margin-top: 8px; font-size: 0.8em; }
        .coin-icon { width: 1em; height: 1em; vertical-align: middle; margin: 0 2px; }
        @keyframes shake { 10%, 90% { transform: translate3d(-1px, 0, 0); } 20%, 80% { transform: translate3d(2px, 0, 0); } 30%, 50%, 70% { transform: translate3d(-2px, 0, 0); } 40%, 60% { transform: translate3d(2px, 0, 0); } }

        .task-item { display: flex; gap: 12px; align-items: center; background-color: var(--secondary-bg); padding: 12px; border: 2px solid var(--accent-color); box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); transition: transform 0.2s ease; }
        .task-item:hover { transform: translateY(-1px); box-shadow: 3px 3px 0px 0px var(--shadow-color-pixel); }
        .task-item-image { width: 40px; height: 40px; object-fit: cover; flex-shrink: 0; background-color: var(--primary-bg); border: 1px solid var(--accent-color); }
        .task-item-info { flex-grow: 1; }
        .task-item-name { font-weight: 600; font-size: 1em; margin-bottom: 3px; color: var(--text-color); }
        .task-item-description { font-size: 0.8em; color: var(--text-muted-color); margin-bottom: 6px; line-height: 1.3; }
        .task-item-reward { display: flex; align-items: center; gap: 4px; font-weight: bold; color: var(--coin-color); font-size: 0.9em; }
        .task-item-reward img { width: 12px; height: 12px; }
        .task-actions { display: flex; flex-direction: column; align-items: flex-end; gap: 6px; flex-shrink: 0; }
        .verify-task-btn, .task-claimed-status { display: none; }
        .task-claimed-status { font-size: 0.8em; font-weight: bold; color: var(--success-color); }
        .task-item[data-completed="true"] .start-task-btn, .task-item[data-completed="true"] .verify-task-btn { display: none; }
        .task-item[data-completed="true"] .task-claimed-status { display: block; }
        .task-list-category > p { color: var(--text-muted-color); text-align: center; padding: 15px; font-style: italic; font-size: 0.9em; }

        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.8); display: none; justify-content: center; align-items: center; z-index: 1000; animation: fadeIn 0.2s ease-out; }
        .modal-overlay.visible { display: flex; }
        .modal-content { background: var(--secondary-bg); padding: 20px; border: 3px solid var(--accent-color); box-shadow: 3px 3px 0px 0px var(--shadow-color-pixel); width: 90%; max-width: 320px; text-align: center; animation: slideIn 0.2s ease-out; }
        .modal-title { font-size: 1.2em; font-weight: 600; color: var(--accent-color); margin-bottom: 12px; }
        .modal-description { font-size: 0.9em; color: var(--text-muted-color); margin-bottom: 15px; }
        .modal-input { width: 100%; padding: 8px; margin-bottom: 15px; border: 2px solid var(--accent-color); background-color: var(--primary-bg); color: var(--text-color); font-size: 0.9em; text-align: center; font-family: 'Press Start 2P', cursive; }
        .modal-actions { display: flex; gap: 8px; justify-content: center; }
        .modal-button { padding: 8px 15px; font-size: 0.8em; }
        .modal-button.cancel { background: var(--disabled-bg); color: var(--disabled-text); }
        .modal-button.cancel:hover { background: #555; }
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        @keyframes slideIn { from { transform: translateY(-15px); opacity: 0; } to { transform: translateY(0); opacity: 1; } }
        .lucky-code-section { text-align: center; }
        #lucky-code-input { text-align: center; margin-bottom: 8px; text-transform: uppercase; }
        #claim-lucky-code-btn { width: 100%; padding: 10px 18px; font-size: 0.9em; }

        #ads-screen { justify-content: flex-start; align-items: center; text-align: center; }
        .ads-section { background-color: var(--secondary-bg); padding: 20px; margin-top: 15px; border: 2px solid var(--accent-color); box-shadow: 2px 2px 0px 0px var(--shadow-color-pixel); width: 100%; max-width: 380px; }
        .ads-section p { margin-bottom: 12px; line-height: 1.4; color: var(--text-muted-color); font-size: 0.9em;}
        .ads-section p:first-child { font-size: 1em; color: var(--text-color); }
        #ad-status-container { margin-bottom: 15px; font-size: 0.85em; }
        #ad-status-container p { margin-bottom: 6px; }
        #ad-status-container span { font-weight: bold; color: var(--text-color); }
        #ad-status-container .coin-icon { vertical-align: text-bottom; width: 1em; height: 1em; }
        #watch-ad-button { width: 100%; padding: 10px 18px; font-size: 1em; background: var(--success-color); }
        #watch-ad-button:hover:not(:disabled) { background: #00cc00; box-shadow: 2px 2px 0px 0px #222; }
        #watch-ad-button:disabled { background: var(--disabled-bg); opacity: 0.7; }
        #ad-cooldown-timer { font-size: 0.8em; color: var(--warning-color); font-weight: 500; }
        #ad-message { font-size: 0.85em; min-height: 1.2em; }
        #ad-message.error { color: var(--error-color); }
        #ad-message.success { color: var(--success-color); }
        #ad-message.limit { color: var(--text-muted-color); }

        /* Material Icons basic styling - replace with pixel icons if possible */
        .material-icons {
            /* font-family: 'Material Icons'; /* Already set by link */
            /* For a more pixelated look if you had a pixel icon font: */
            /* font-family: 'YourPixelIconFont', 'Material Icons'; */
            /* image-rendering: pixelated; /* May not work on font icons directly */
        }

    </style>
</head>
<body>
    <div id="app">
        <div id="loading">Initializing Meme Wolf 8-Bit...</div>

        <div id="main-content" style="display: none;">

            <div id="game-screen" class="page active">
                 <div class="stats-bar">
                     <div class="stat-item" title="Coins per tap"><span class="material-icons">touch_app</span> <span id="tap-power-display">1</span></div>
                     <div class="stat-item" title="Profit per hour"><span class="material-icons">hourglass_bottom</span> <span id="passive-income-display">0</span>/hr</div>
                 </div>
                <div class="coin-balance-container"><img id="coin-icon-balance" src="https://tinyimg.io/i/Qm5aZ5H.png" alt="Coin"> <span id="coin-balance">0</span></div>

                <div class="energy-container">
                    <div id="energy-bar-bg">
                        <div id="energy-bar-fill"></div>
                    </div>
                    <div id="energy-text">ENERGY: 0/0</div>
                    <button id="refill-energy-button" class="task-button">Watch Ad for Full Energy</button>
                </div>

                <div class="coin-area"><div id="coin-container"><img id="coin-image" src="https://tinyimg.io/i/Qm5aZ5H.png" alt="Tap Me!"></div></div>
                <div id="click-feedback"></div>
            </div>

            <div id="shop-screen" class="page">
                <h2>UPGRADES</h2>
                <div class="shop-tabs">
                    <button id="tab-click" class="active" onclick="showShopCategory('click-upgrades')">CLICK PWR</button>
                    <button id="tab-passive" onclick="showShopCategory('passive-upgrades')">PASSIVE</button>
                </div>
                <div id="click-upgrades" class="shop-category active"><p>Loading click upgrades...</p></div>
                <div id="passive-upgrades" class="shop-category"><p>Loading passive income upgrades...</p></div>
            </div>

            <div id="tasks-screen" class="page">
                <h2>TASKS</h2>
                <div class="task-tabs">
                    <button id="tab-available" class="active" onclick="showTaskListCategory('available-tasks-list')">AVAILABLE</button>
                    <button id="tab-completed" onclick="showTaskListCategory('completed-tasks-list')">COMPLETED</button>
                </div>
                <div id="available-tasks-list" class="task-list-category active">
                    <p>Loading available tasks...</p>
                </div>
                <div id="completed-tasks-list" class="task-list-category">
                    <p>Loading completed tasks...</p>
                </div>
            </div>

            <div id="ads-screen" class="page">
                <h2>ADS FOR COINS</h2>
                <div class="ads-section">
                    <p>Watch ads for $MEMEWOLF coins!</p>
                    <div id="ad-status-container">
                        <p>Ads Watched: <span id="ads-watched-today">0</span>/<span id="ads-daily-limit">20</span></p>
                        <p>Reward: <span id="ad-reward-amount">1000</span> <img class="coin-icon" src="https://tinyimg.io/i/Qm5aZ5H.png" alt=""></p>
                    </div>
                    <button id="watch-ad-button" class="task-button" disabled>Loading Ads...</button>
                    <p id="ad-cooldown-timer" style="display: none;"></p>
                    <p id="ad-message"></p>
                </div>
            </div>

            <div id="profile-screen" class="page">
                <h2>PROFILE</h2>
                <div class="profile-section profile-info">
                    <p><strong>User ID:</strong> <span id="profile-userid">N/A</span></p>
                    <p><strong>Username:</strong> <span id="profile-username">N/A</span></p>
                    <p><strong>Name:</strong> <span id="profile-firstname">N/A</span> <span id="profile-lastname"></span></p>
                    <p><strong>Coins:</strong> <span id="profile-coins">0</span> <img class="coin-icon" src="https://tinyimg.io/i/Qm5aZ5H.png" alt=""></p>
                    <p><strong>Tap Power:</strong> <span id="profile-tap-power">1</span></p>
                    <p><strong>Passive:</strong> <span id="profile-passive-income">0</span>/hr</p>
                </div>
                <div class="profile-section mission-section">
                    <div class="mission-title">WOLF NAME MISSION</div>
                    <p class="mission-description">Add <span class="mission-emoji" id="mission-emoji-display">🐺</span> to your TG Last Name! <button class="copy-emoji-button" id="copy-emoji-btn">Copy</button> </p>
                    <div class="mission-status incomplete" id="mission-status">Status: ???</div>
                    <div id="fine-message-display" class="fine-applied" style="display: none;"></div>
                    <button class="mission-action-button" id="mission-claim-btn" disabled>Check & Claim</button>
                    <div class="reward-display"><span>Reward: 50K</span> <img src="https://tinyimg.io/i/Qm5aZ5H.png" class="coin-icon" alt=""></div>
                </div>
                <div class="profile-section lucky-code-section">
                    <label for="lucky-code-input">LUCKY CODE</label>
                    <input type="text" id="lucky-code-input" placeholder="ENTER CODE" maxlength="20">
                    <button id="claim-lucky-code-btn" class="task-button" disabled>Claim</button>
                    <p id="lucky-code-status"></p>
                 </div>
                 <div class="profile-section wallet-section">
                    <label for="ton-wallet-input">TON ADDRESS</label>
                    <input type="text" id="ton-wallet-input" placeholder="Your TON Address">
                    <button id="save-wallet-button" class="task-button">Save Wallet</button>
                    <p id="save-status"></p>
                </div>
            </div>
        </div>

        <nav id="navbar" style="display: none;">
            <button id="nav-game" class="active" onclick="showPage('game-screen')"><span class="material-icons">sports_esports</span><span>Game</span></button>
            <button id="nav-shop" onclick="showPage('shop-screen')"><span class="material-icons">store</span><span>Shop</span></button>
            <button id="nav-tasks" onclick="showPage('tasks-screen')"><span class="material-icons">assignment</span><span>Tasks</span></button>
            <button id="nav-ads" onclick="showPage('ads-screen')"><span class="material-icons">play_circle</span><span>Ads</span></button>
            <button id="nav-profile" onclick="showPage('profile-screen')"><span class="material-icons">account_box</span><span>Profile</span></button>
        </nav>

        <div id="code-popup" class="modal-overlay">
            <div class="modal-content">
                <h3 id="code-popup-title" class="modal-title">Enter Code</h3>
                <p id="code-popup-description" class="modal-description">Enter code from task.</p>
                <input type="text" id="code-popup-input" class="modal-input" placeholder="CODE HERE">
                <div class="modal-actions">
                    <button id="code-popup-cancel" class="modal-button task-button cancel">Cancel</button>
                    <button id="code-popup-submit" class="modal-button task-button">Submit</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const firebaseConfig = {
             apiKey: "AIzaSyCyH3Z92F8RQweInLC5w_bk_AaLx6XT7UE", authDomain: "ab-wallet-62482.firebaseapp.com", databaseURL: "https://ab-wallet-62482-default-rtdb.firebaseio.com", projectId: "ab-wallet-62482", storageBucket: "ab-wallet-62482.firebasestorage.app", messagingSenderId: "642030839072", appId: "1:642030839072:web:77fc92375ba72e2ee62345"
         };
        const COIN_IMAGE_URL = "https://tinyimg.io/i/Qm5aZ5H.png"; // Pixel coin
        const BASE_TAP_EARN = 1; const SAVE_INTERVAL = 5000; const PASSIVE_INCOME_INTERVAL = 1000; const INCREASING_COST_BASE = 10000; const WOLF_MISSION_REWARD = 50000; const WOLF_EMOJI = '🐺'; const CHEAT_FINE = 100000;
        const TASK_VERIFICATION_DELAY = 10000;

        const ADS_DAILY_LIMIT = 20; // Kept 20 as per original, can be adjusted
        const AD_REWARD_AMOUNT = 1000;
        const AD_COOLDOWN_SECONDS = 20;
        const MONETAG_ZONE_ID = 9300768;

        // Energy System Config
        const MAX_ENERGY = 1000;
        const ENERGY_PER_CLICK = 1;
        const ENERGY_REGEN_PER_SECOND = 1;
        const ENERGY_REGEN_INTERVAL = 1000; // ms
        const REFILL_ENERGY_AD_COOLDOWN_SECONDS = 300; // 5 minutes for refill energy ad

        let tg = null; let db = null; let currentUser = null; let userData = null; let lastSaveTime = 0; let saveTimeout = null; let passiveIncomeIntervalId = null; let isLoading = true;
        let availableTasks = {}; let currentCodeTaskId = null; let dailyLuckyCodeData = null;
        
        let energyRegenIntervalId = null;
        let refillEnergyAdCooldownEndTime = 0;

        let adCooldownInterval = null;
        let adCooldownEndTime = 0;
        let monetagSdkReady = false;

        const loadingDiv = document.getElementById('loading'); const mainContentDiv = document.getElementById('main-content'); const navbar = document.getElementById('navbar'); const coinBalanceSpan = document.getElementById('coin-balance'); const tapPowerDisplaySpan = document.getElementById('tap-power-display'); const passiveIncomeDisplaySpan = document.getElementById('passive-income-display'); const coinContainer = document.getElementById('coin-container'); const clickFeedbackDiv = document.getElementById('click-feedback'); const clickUpgradesDiv = document.getElementById('click-upgrades'); const passiveUpgradesDiv = document.getElementById('passive-upgrades'); const profileUserIdSpan = document.getElementById('profile-userid'); const profileUsernameSpan = document.getElementById('profile-username'); const profileFirstNameSpan = document.getElementById('profile-firstname'); const profileLastNameSpan = document.getElementById('profile-lastname'); const profileCoinsSpan = document.getElementById('profile-coins'); const profileTapPowerSpan = document.getElementById('profile-tap-power'); const profilePassiveIncomeSpan = document.getElementById('profile-passive-income'); const tonWalletInput = document.getElementById('ton-wallet-input'); const saveWalletButton = document.getElementById('save-wallet-button'); const saveStatusP = document.getElementById('save-status'); const missionEmojiDisplay = document.getElementById('mission-emoji-display'); const copyEmojiBtn = document.getElementById('copy-emoji-btn'); const missionStatusDiv = document.getElementById('mission-status'); const missionClaimBtn = document.getElementById('mission-claim-btn'); const fineMessageDisplay = document.getElementById('fine-message-display'); const navButtons = document.querySelectorAll('nav button'); const shopTabButtons = document.querySelectorAll('.shop-tabs button'); const shopCategories = document.querySelectorAll('.shop-category');
        const availableTasksListDiv = document.getElementById('available-tasks-list');
        const completedTasksListDiv = document.getElementById('completed-tasks-list');
        const taskTabButtons = document.querySelectorAll('.task-tabs button');
        const taskListCategories = document.querySelectorAll('.task-list-category');
        const codePopup = document.getElementById('code-popup'); const codePopupTitle = document.getElementById('code-popup-title'); const codePopupDescription = document.getElementById('code-popup-description'); const codePopupInput = document.getElementById('code-popup-input'); const codePopupCancelBtn = document.getElementById('code-popup-cancel'); const codePopupSubmitBtn = document.getElementById('code-popup-submit');
        const luckyCodeInput = document.getElementById('lucky-code-input'); const claimLuckyCodeBtn = document.getElementById('claim-lucky-code-btn'); const luckyCodeStatus = document.getElementById('lucky-code-status');
        
        const energyBarFill = document.getElementById('energy-bar-fill');
        const energyText = document.getElementById('energy-text');
        const refillEnergyButton = document.getElementById('refill-energy-button');

        const adsWatchedTodaySpan = document.getElementById('ads-watched-today');
        const adsDailyLimitSpan = document.getElementById('ads-daily-limit');
        const adRewardAmountSpan = document.getElementById('ad-reward-amount');
        const watchAdButton = document.getElementById('watch-ad-button');
        const adCooldownTimerP = document.getElementById('ad-cooldown-timer');
        const adMessageP = document.getElementById('ad-message');

        // Updated coin image URL in HTML
        document.getElementById('coin-icon-balance').src = COIN_IMAGE_URL;
        document.getElementById('coin-image').src = COIN_IMAGE_URL;
        document.querySelectorAll('.coin-icon').forEach(img => img.src = COIN_IMAGE_URL);


        const upgrades = [
             { id: 'click_1', name: 'Power Glove', description: '+1 tap pwr', baseCost: 10000, baseEffect: 1, type: 'click' }, { id: 'click_2', name: 'Sharp Pixels', description: '+2 tap pwr', baseCost: 100000, baseEffect: 2, type: 'click' }, { id: 'click_3', name: '8-Bit Energy', description: '+5 tap pwr', baseCost: 500000, baseEffect: 5, type: 'click' }, { id: 'click_4', name: 'Wolf Howl OS', description: '+10 tap pwr', baseCost: 2000000, baseEffect: 10, type: 'click' }, { id: 'click_5', name: 'CRT Boost', description: '+25 tap pwr', baseCost: 10000000, baseEffect: 25, type: 'click' }, { id: 'click_6', name: 'Golden Cartridge', description: '+50 tap pwr', baseCost: 50000000, baseEffect: 50, type: 'click' }, { id: 'click_7', name: 'Diamond Joystick', description: '+100 tap pwr', baseCost: 250000000, baseEffect: 100, type: 'click' }, { id: 'click_8', name: 'Alpha ROM', description: '+200 tap pwr', baseCost: 1000000000, baseEffect: 200, type: 'click' }, { id: 'click_9', name: 'Meme Lord CPU', description: '+500 tap pwr', baseCost: 5000000000, baseEffect: 500, type: 'click' }, { id: 'click_10', name: 'Cosmic Console', description: '+1K tap pwr', baseCost: 20000000000, baseEffect: 1000, type: 'click' },
             { id: 'passive_1', name: 'Coin Finder.EXE', description: '+100 profit/hr', baseCost: 10000, baseEffect: 100, type: 'passive' }, { id: 'passive_2', name: 'Pixel Farm', description: '+250 profit/hr', baseCost: 50000, baseEffect: 250, type: 'passive' }, { id: 'passive_3', name: 'Data Miner', description: '+600 profit/hr', baseCost: 150000, baseEffect: 600, type: 'passive' }, { id: 'passive_4', name: 'Meme Cache', description: '+1.5K profit/hr', baseCost: 500000, baseEffect: 1500, type: 'passive' }, { id: 'passive_5', name: 'Code Tree', description: '+3.5K profit/hr', baseCost: 1500000, baseEffect: 3500, type: 'passive' }, { id: 'passive_6', name: 'Robo-Howler', description: '+8K profit/hr', baseCost: 5000000, baseEffect: 8000, type: 'passive' }, { id: 'passive_7', name: 'PackNet Tribute', description: '+18K profit/hr', baseCost: 15000000, baseEffect: 18000, type: 'passive' }, { id: 'passive_8', name: 'Wolf Den Server', description: '+40K profit/hr', baseCost: 50000000, baseEffect: 40000, type: 'passive' }, { id: 'passive_9', name: 'Meme Coin Rig', description: '+90K profit/hr', baseCost: 150000000, baseEffect: 90000, type: 'passive' }, { id: 'passive_10', name 'Retro Mint', description: '+200K profit/hr', baseCost: 500000000, baseEffect: 200000, type: 'passive' },
        ]; // Simplified for brevity, more can be added in the same 8-bit theme.

        window.onload = () => {
             try {
                 isLoading = true; loadingDiv.textContent = "INIT MEME WOLF...";
                 tg = window.Telegram.WebApp; tg.ready(); tg.expand();
                 try { 
                    const bgColor = getComputedStyle(document.documentElement).getPropertyValue('--primary-bg').trim(); 
                    tg.setHeaderColor(bgColor); tg.setBackgroundColor(bgColor); 
                } catch (themeError) { console.warn("Could not set theme colors:", themeError); }
                 if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) { showError("USER DATA ERR. LAUNCH FROM TG."); return; }
                 currentUser = tg.initDataUnsafe.user;
                 firebase.initializeApp(firebaseConfig); db = firebase.database();

                 setTimeout(() => {
                     monetagSdkReady = typeof window[`show_${MONETAG_ZONE_ID}`] === 'function';
                     console.log("Monetag SDK Ready:", monetagSdkReady);
                     if (!monetagSdkReady) {
                         console.warn(`Monetag func show_${MONETAG_ZONE_ID} not found.`);
                     }
                     loadUserDataAndInit();
                 }, 500);

                 setupEventListeners();
             } catch (error) { console.error("Critical Init Error:", error); showError(`INIT FAIL: ${error.message}. RELOAD.`); }
        };

        function showPopup(params) { if (tg) { try { tg.showPopup(params); } catch(e){ console.warn("Popup failed:", e); alert(`${params.title}\n\n${params.message}`); } } else { alert(`${params.title}\n\n${params.message}`); } }
        function showInfoPopup(title, message) { showPopup({ title: title || "INFO", message: message, buttons: [{ type: "ok" }] }); }
        function showWarningPopup(title, message) { showPopup({ title: title || "WARNING!", message: message, buttons: [{ type: "ok" }] }); }
        function showRewardPopup(title, message) { showPopup({ title: title || "REWARD!", message: message, buttons: [{ type: "ok" }] }); }

        function loadUserDataAndInit() {
             if (!currentUser || !db) { showError("USER/DB NOT READY."); return; }
             const userId = currentUser.id.toString(); const userRef = db.ref('users/' + userId);
             loadingDiv.textContent = "LOAD PROGRESS...";
             userRef.once('value').then((snapshot) => {
                 const defaultData = {
                     coins: 0,
                     energy: MAX_ENERGY, // Initialize energy
                     upgrades: {},
                     missions: { lastNameWolf: 'incomplete' },
                     completedTasks: {},
                     lastLuckyCodeClaim: null,
                     tonWallet: '',
                     ads: { watchedToday: 0, lastWatchedDate: null },
                     lastRefillEnergyAdTime: 0, // For energy ad cooldown
                     lastUpdate: Date.now(),
                     telegramInfo: { id: currentUser.id, username: currentUser.username || null, firstName: currentUser.first_name || '', lastName: currentUser.last_name || '' }
                 };
                 if (snapshot.exists()) {
                     userData = snapshot.val();
                     userData.coins = userData.coins ?? defaultData.coins;
                     userData.energy = userData.energy ?? MAX_ENERGY; // Ensure energy exists
                     if (userData.energy > MAX_ENERGY) userData.energy = MAX_ENERGY; // Cap energy if loaded > max
                     userData.upgrades = userData.upgrades ?? defaultData.upgrades;
                     userData.missions = userData.missions ?? defaultData.missions;
                     userData.missions.lastNameWolf = userData.missions.lastNameWolf ?? defaultData.missions.lastNameWolf;
                     userData.completedTasks = userData.completedTasks ?? defaultData.completedTasks;
                     userData.lastLuckyCodeClaim = userData.lastLuckyCodeClaim ?? defaultData.lastLuckyCodeClaim;
                     userData.tonWallet = userData.tonWallet ?? defaultData.tonWallet;
                     userData.ads = userData.ads ?? defaultData.ads;
                     userData.ads.watchedToday = userData.ads.watchedToday ?? defaultData.ads.watchedToday;
                     userData.ads.lastWatchedDate = userData.ads.lastWatchedDate ?? defaultData.ads.lastWatchedDate;
                     userData.lastRefillEnergyAdTime = userData.lastRefillEnergyAdTime ?? defaultData.lastRefillEnergyAdTime;
                     userData.lastUpdate = userData.lastUpdate ?? defaultData.lastUpdate;
                     userData.telegramInfo = defaultData.telegramInfo;
                 } else {
                     console.log("New user:", userId);
                     userData = defaultData;
                     saveUserData(true);
                 }

                 checkAndResetDailyAds();

                 const cheatDetected = performAntiCheatCheck();
                 if (!cheatDetected) { calculateOfflineProgress(); } else { userData.lastUpdate = Date.now(); }

                 return Promise.all([loadAndDisplayTasks(), loadDailyLuckyCode()]);
             }).then(() => {
                 initializeAppUI(); 
                 startPassiveIncome(); 
                 startEnergyRegeneration(); // Start energy regen
                 isLoading = false; console.log("App Ready.");
             }).catch((error) => {
                 console.error("FB Load/Init Error:", error); 
                 let displayMessage = `LOAD FAIL. CHECK NET & RELOAD.`; if (error?.code) { displayMessage += ` (Code: ${error.code})`; } 
                 if (String(error).includes('WebAppPopupOpened')) { console.warn("Suppressed 'WebAppPopupOpened'."); } 
                 showError(displayMessage); isLoading = false;
             });
        }
        
        function getTodayDateString() {
            const today = new Date();
            const year = today.getFullYear();
            const month = String(today.getMonth() + 1).padStart(2, '0');
            const day = String(today.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function checkAndResetDailyAds() {
            if (!userData || !userData.ads) return;
            const todayStr = getTodayDateString();
            if (userData.ads.lastWatchedDate !== todayStr) {
                console.log(`New day (${todayStr}). Reset daily ad count.`);
                userData.ads.watchedToday = 0;
                userData.ads.lastWatchedDate = todayStr;
            }
        }

        function loadDailyLuckyCode() {
             if (!db) return Promise.reject("DB N/A for lucky code"); console.log("Loading daily code...");
             return db.ref('dailyLuckyCode').once('value').then(snapshot => {
                 dailyLuckyCodeData = snapshot.exists() ? snapshot.val() : null;
                 console.log("Daily code data:", dailyLuckyCodeData);
                 updateLuckyCodeSectionUI();
             }).catch(error => { console.error("Err load daily code:", error); dailyLuckyCodeData = null; updateLuckyCodeSectionUI(); });
        }

        function saveUserData(force = false) {
             if (isLoading || !currentUser || !db || !userData) return; const now = Date.now(); userData.lastUpdate = now; clearTimeout(saveTimeout);
             if (force || now - lastSaveTime > SAVE_INTERVAL) {
                 console.log("Saving data..."); const userId = currentUser.id.toString();
                 userData.telegramInfo = { id: currentUser.id, username: currentUser.username || null, firstName: currentUser.first_name || '', lastName: currentUser.last_name || '' };
                 if (!userData.ads) userData.ads = { watchedToday: 0, lastWatchedDate: null };
                 if (userData.energy === undefined) userData.energy = MAX_ENERGY; // Ensure energy is saved

                 db.ref('users/' + userId).set(userData).then(() => { console.log("Data saved."); lastSaveTime = now; }).catch((error) => console.error("FB Save Error:", error));
             } else { saveTimeout = setTimeout(() => saveUserData(true), SAVE_INTERVAL - (now - lastSaveTime)); }
        }

        function performAntiCheatCheck() {
            if (!userData || !currentUser) return false; const missionId = 'lastNameWolf'; const missionStatus = userData.missions?.[missionId]; const currentLastName = currentUser.last_name || ''; fineMessageDisplay.style.display = 'none';
            if (missionStatus === 'claimed' && !currentLastName.endsWith(WOLF_EMOJI)) {
                const fineAmount = CHEAT_FINE; userData.coins = Math.max(0, userData.coins - fineAmount); userData.missions[missionId] = 'incomplete'; console.warn(`Anti-cheat: User ${currentUser.id} removed emoji. Fine: ${formatNumber(fineAmount)}`);
                showWarningPopup("CHEAT DETECT!", `U removed ${WOLF_EMOJI} from name! Fine: ${formatNumber(fineAmount)} coins.`);
                fineMessageDisplay.textContent = `Fine: -${formatNumber(fineAmount)} for removing emoji.`; fineMessageDisplay.style.display = 'block';
                return true;
            } return false;
        }

        // Energy System Logic
        function updateEnergyBar() {
            if (!userData) return;
            const percentage = (userData.energy / MAX_ENERGY) * 100;
            energyBarFill.style.width = `${percentage}%`;
            energyText.textContent = `ENERGY: ${Math.floor(userData.energy)}/${MAX_ENERGY}`;
            
            // Disable coin tapping if no energy
            coinContainer.style.pointerEvents = userData.energy < ENERGY_PER_CLICK ? 'none' : 'auto';
            coinContainer.style.opacity = userData.energy < ENERGY_PER_CLICK ? 0.5 : 1;
        }

        function regenerateEnergy() {
            if (isLoading || !userData || userData.energy >= MAX_ENERGY) return;
            userData.energy = Math.min(MAX_ENERGY, userData.energy + ENERGY_REGEN_PER_SECOND);
            updateEnergyBar();
            // No saveUserData here, happens with other actions or intervals
        }

        function startEnergyRegeneration() {
            if (energyRegenIntervalId) clearInterval(energyRegenIntervalId);
            energyRegenIntervalId = setInterval(regenerateEnergy, ENERGY_REGEN_INTERVAL);
        }
        
        function handleTap(event) { 
            if (isLoading || !userData) return; 
            if (userData.energy < ENERGY_PER_CLICK) {
                console.log("Not enough energy to tap.");
                // Optional: Show a small "NO ENERGY" message near cursor or shake energy bar
                energyBarFill.parentElement.style.animation = 'shake 0.3s';
                setTimeout(() => energyBarFill.parentElement.style.animation = '', 300);
                return;
            }

            userData.energy -= ENERGY_PER_CLICK;
            updateEnergyBar();

            const tapValue = calculateTapPower(); 
            userData.coins += tapValue; 
            let clientX, clientY; 
            if (event.touches && event.touches.length > 0) {
                for (let i = 0; i < event.touches.length; i++) { clientX = event.touches[i].clientX; clientY = event.touches[i].clientY; createClickAnimation(clientX, clientY, tapValue); } 
            } else { clientX = event.clientX; clientY = event.clientY; createClickAnimation(clientX, clientY, tapValue); } 
            updateCoinDisplay(); 
            scheduleSave(); 
        }

        function calculateTapPower() { let power = BASE_TAP_EARN; if (userData?.upgrades) { for (const upgradeId in userData.upgrades) { const upgradeDef = upgrades.find(u => u.id === upgradeId && u.type === 'click'); if (upgradeDef) { power += (upgradeDef.baseEffect || 0) * (userData.upgrades[upgradeId]?.level || 0); } } } return power; }
        function calculatePassiveIncomeRate() { let rate = 0; if (userData?.upgrades) { for (const upgradeId in userData.upgrades) { const upgradeDef = upgrades.find(u => u.id === upgradeId && u.type === 'passive'); if (upgradeDef) { rate += (upgradeDef.baseEffect || 0) * (userData.upgrades[upgradeId]?.level || 0); } } } return rate; }
        function applyPassiveIncome() { if (isLoading || !userData) return; const hourlyRate = calculatePassiveIncomeRate(); const incomePerTick = hourlyRate / 3600 * (PASSIVE_INCOME_INTERVAL / 1000); if (incomePerTick > 0) { userData.coins += incomePerTick; updateCoinDisplay(); } }
        function startPassiveIncome() { if (passiveIncomeIntervalId) clearInterval(passiveIncomeIntervalId); passiveIncomeIntervalId = setInterval(applyPassiveIncome, PASSIVE_INCOME_INTERVAL); }
        function scheduleSave() { saveUserData(); }
        function calculateOfflineProgress() {
            if (!userData || !userData.lastUpdate) return; const now = Date.now(); const offlineSeconds = Math.max(0, Math.floor((now - userData.lastUpdate) / 1000)); if (offlineSeconds < 10) return;
            const hourlyRate = calculatePassiveIncomeRate(); const offlineIncome = (hourlyRate / 3600) * offlineSeconds;
            if (offlineIncome > 0) { userData.coins += offlineIncome; console.log(`Offline income: ${formatNumber(offlineIncome)} for ${offlineSeconds}s.`); showRewardPopup("WELCOME BACK!", `U earned ${formatNumber(offlineIncome)} ${WOLF_EMOJI} coins offline!`); }
            
            // Calculate offline energy regeneration
            const energyRegainedOffline = Math.floor(offlineSeconds * ENERGY_REGEN_PER_SECOND);
            if (energyRegainedOffline > 0 && userData.energy < MAX_ENERGY) {
                userData.energy = Math.min(MAX_ENERGY, userData.energy + energyRegainedOffline);
                console.log(`Regained ${energyRegainedOffline} energy offline.`);
            }
        }

        function checkAndClaimMission() { if (isLoading || !userData || !currentUser) return; const missionId = 'lastNameWolf'; const currentStatus = userData.missions?.[missionId] || 'incomplete'; const lastName = currentUser.last_name || ''; if (currentStatus === 'claimed') { showInfoPopup("CLAIMED!", "Wolf Name Mission already claimed."); updateMissionUI(missionId, 'claimed'); return; } const isConditionMet = lastName.endsWith(WOLF_EMOJI); if (isConditionMet) { userData.coins += WOLF_MISSION_REWARD; userData.missions[missionId] = 'claimed'; console.log(`Mission '${missionId}' claimed.`); showRewardPopup("MISSION OK!", `Earned ${formatNumber(WOLF_MISSION_REWARD)} coins!`); updateMissionUI(missionId, 'claimed'); updateUI(); saveUserData(true); } else { updateMissionUI(missionId, 'incomplete'); showInfoPopup("MISSION BAD", `Add ${WOLF_EMOJI} to END of TG Last Name.`); } }
        function copyMissionEmoji() { navigator.clipboard.writeText(WOLF_EMOJI).then(() => { copyEmojiBtn.textContent = 'OK!'; setTimeout(() => { copyEmojiBtn.textContent = 'Copy'; }, 1500); }).catch(err => { console.error('Failed to copy: ', err); showWarningPopup("COPY FAIL", "Copy it manually: " + WOLF_EMOJI); }); }

        function loadAndDisplayTasks() {
            if (!db) return Promise.reject("DB missing");
            availableTasksListDiv.innerHTML = '<p>LOAD TASKS...</p>';
            completedTasksListDiv.innerHTML = '<p>LOAD DONE TASKS...</p>';
            return db.ref('tasks').once('value').then(snapshot => {
                availableTasksListDiv.innerHTML = '';
                completedTasksListDiv.innerHTML = '';
                availableTasks = {};
                let hasAvailable = false; let hasCompleted = false;
                if (snapshot.exists()) {
                    availableTasks = snapshot.val() || {};
                    userData.completedTasks = userData.completedTasks || {};
                    for (const taskId in availableTasks) {
                        if (Object.hasOwnProperty.call(availableTasks, taskId)) {
                            const taskData = availableTasks[taskId];
                            const isCompleted = userData.completedTasks[taskId] === true;
                            renderTaskItem(taskData, taskId, isCompleted);
                            if (isCompleted) hasCompleted = true; else hasAvailable = true;
                        }
                    }
                }
                if (!hasAvailable) availableTasksListDiv.innerHTML = '<p>No tasks now.</p>';
                if (!hasCompleted) completedTasksListDiv.innerHTML = '<p>No tasks done.</p>';
            }).catch(error => { console.error("Err load tasks:", error); availableTasksListDiv.innerHTML = '<p style="color: var(--error-color);">FAIL LOAD TASKS.</p>'; completedTasksListDiv.innerHTML = ''; availableTasks = {}; });
        }
        function renderTaskItem(taskData, taskId, isCompleted) {
             if (!taskData || !taskId) return;
             const itemDiv = document.createElement('div'); itemDiv.className = 'task-item'; itemDiv.dataset.taskId = taskId; itemDiv.dataset.completed = isCompleted;

             const imageUrl = taskData.imageUrl || `https://via.placeholder.com/40/1a001a/ff00ff?text=${(taskData.name||'T')[0]}`; 
             const description = taskData.description || (taskData.type === 'link' ? 'Complete action.' : 'Enter code.');
             itemDiv.innerHTML = `
                 <img src="${imageUrl}" alt="" class="task-item-image" onerror="this.style.display='none'">
                 <div class="task-item-info">
                     <div class="task-item-name">${taskData.name || 'Task'}</div>
                     <div class="task-item-description">${description}</div>
                     <div class="task-item-reward">
                         <img src="${COIN_IMAGE_URL}" class="coin-icon" alt="">
                         <span>+${formatNumber(taskData.reward || 0)}</span>
                     </div>
                 </div>
                 <div class="task-actions">
                     <button class="task-button start-task-btn">Start</button>
                     <button class="task-button verify-task-btn">Verify</button>
                     <span class="task-claimed-status">DONE!</span>
                 </div>`;

             const startBtn = itemDiv.querySelector('.start-task-btn'); const verifyBtn = itemDiv.querySelector('.verify-task-btn'); const claimedStatus = itemDiv.querySelector('.task-claimed-status');

             if (isCompleted) {
                 startBtn.style.display = 'none'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'block';
                 completedTasksListDiv.appendChild(itemDiv);
             } else {
                 startBtn.style.display = 'block'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'none';
                 startBtn.addEventListener('click', handleStartTaskClick);
                 verifyBtn.addEventListener('click', handleVerifyTaskClick);
                 availableTasksListDiv.appendChild(itemDiv);
             }
        }
        function handleStartTaskClick(event) {
            if (isLoading || !userData) return; const button = event.target; const taskItem = button.closest('.task-item'); const taskId = taskItem.dataset.taskId; const taskData = availableTasks[taskId]; if (!taskData) return; if (userData.completedTasks?.[taskId]) { showInfoPopup("DONE ALREADY", "This task is done."); return; }

             if (taskData.link) {
                 try { tg.openLink(taskData.link); } catch (e) { console.warn("tg.openLink fail, using window.open:", e); window.open(taskData.link, '_blank');}
             } else if (taskData.type === 'link') {
                 showWarningPopup("TASK ERR", "Task link missing."); return;
             }
             button.disabled = true;

             if (taskData.type === 'link') {
                 taskItem.dataset.status = 'verifying';
                 const verifyBtn = taskItem.querySelector('.verify-task-btn');
                 button.style.display = 'none'; verifyBtn.style.display = 'block'; verifyBtn.disabled = true;
                 verifyBtn.textContent = `Verify (${TASK_VERIFICATION_DELAY / 1000}s)`; let countdown = TASK_VERIFICATION_DELAY / 1000; const intervalId = setInterval(() => { countdown--; if (countdown > 0) { verifyBtn.textContent = `Verify (${countdown}s)`; } else { clearInterval(intervalId); verifyBtn.textContent = 'Verify'; verifyBtn.disabled = false; } }, 1000);
             } else if (taskData.type === 'code') {
                 showCodePopup(taskId, taskData);
                 button.disabled = false;
             } else {
                 button.disabled = false; showWarningPopup("TASK ERR", "Unknown task type.");
             }
         }
        function handleVerifyTaskClick(event) {
            if (isLoading || !userData) return; const button = event.target; const taskItem = button.closest('.task-item'); const taskId = taskItem.dataset.taskId; const taskData = availableTasks[taskId]; if (!taskData) return; if (userData.completedTasks?.[taskId]) return;
             button.disabled = true; button.textContent = "Verifying...";
             console.log(`Verification OK (simulated): ${taskId}`);
             claimTaskReward(taskId, taskData.reward);
         }
        function showCodePopup(taskId, taskData) { currentCodeTaskId = taskId; codePopupTitle.textContent = taskData.name || "Enter Code"; codePopupDescription.textContent = taskData.description || "Enter code."; codePopupInput.value = ''; codePopup.classList.add('visible'); codePopupInput.focus(); }
        function hideCodePopup() { codePopup.classList.remove('visible'); currentCodeTaskId = null; }
        function handleCodeSubmit() {
             if (!currentCodeTaskId || !availableTasks[currentCodeTaskId] || !userData) { hideCodePopup(); return; } const taskId = currentCodeTaskId; const taskData = availableTasks[taskId]; const submittedCode = codePopupInput.value.trim(); if (!submittedCode) { showWarningPopup("INPUT ERR", "Enter code."); return; } 
             if (taskData.code && submittedCode.toLowerCase() === taskData.code.toLowerCase()) { console.log(`Code OK: ${taskId}`); hideCodePopup(); claimTaskReward(taskId, taskData.reward); } else { showWarningPopup("BAD CODE", "Code incorrect. Try again."); codePopupInput.focus(); codePopupInput.select(); }
        }
        function claimTaskReward(taskId, rewardAmount) {
             if (isLoading || !userData || !taskId || rewardAmount === undefined) return;
             if (userData.completedTasks?.[taskId]) { console.warn(`Duplicate claim: ${taskId}`); moveTaskToCompletedUI(taskId); return; }
             userData.coins += rewardAmount;
             if (!userData.completedTasks) userData.completedTasks = {};
             userData.completedTasks[taskId] = true;
             console.log(`Task ${taskId} done. Reward: +${formatNumber(rewardAmount)}`);
             showRewardPopup("TASK DONE!", `U earned +${formatNumber(rewardAmount)} coins!`);
             moveTaskToCompletedUI(taskId);
             updateUI(); saveUserData(true);
        }
        function moveTaskToCompletedUI(taskId) {
            const taskItem = availableTasksListDiv.querySelector(`.task-item[data-task-id="${taskId}"]`);
             if (!taskItem) {
                 const alreadyCompletedItem = completedTasksListDiv.querySelector(`.task-item[data-task-id="${taskId}"]`);
                 if (alreadyCompletedItem) {
                     console.log(`Task ${taskId} already in completed UI.`);
                     const startBtn = alreadyCompletedItem.querySelector('.start-task-btn'); const verifyBtn = alreadyCompletedItem.querySelector('.verify-task-btn'); const claimedStatus = alreadyCompletedItem.querySelector('.task-claimed-status');
                     if(startBtn) startBtn.style.display = 'none'; if(verifyBtn) verifyBtn.style.display = 'none'; if(claimedStatus) claimedStatus.style.display = 'block';
                     alreadyCompletedItem.dataset.completed = "true";
                 } else { console.warn(`Task ${taskId} not found in lists.`); } return;
             }
             const startBtn = taskItem.querySelector('.start-task-btn'); const verifyBtn = taskItem.querySelector('.verify-task-btn'); const claimedStatus = taskItem.querySelector('.task-claimed-status');
             taskItem.dataset.completed = "true";
             startBtn.style.display = 'none'; verifyBtn.style.display = 'none'; claimedStatus.style.display = 'block';
             startBtn.removeEventListener('click', handleStartTaskClick); verifyBtn.removeEventListener('click', handleVerifyTaskClick);
             completedTasksListDiv.appendChild(taskItem);
             if (availableTasksListDiv.children.length === 0) { availableTasksListDiv.innerHTML = '<p>No tasks now.</p>'; }
             const completedPlaceholder = completedTasksListDiv.querySelector('p');
             if (completedPlaceholder && completedTasksListDiv.children.length > 1) { completedPlaceholder.remove(); }
        }

        function updateLuckyCodeSectionUI() {
            if (!claimLuckyCodeBtn || !luckyCodeInput || !luckyCodeStatus) return;
             if (dailyLuckyCodeData === null) {
                 luckyCodeStatus.textContent = "Check daily code..."; luckyCodeStatus.className = 'lucky-code-status'; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "Checking..."; return;
             }
             if (!dailyLuckyCodeData || !dailyLuckyCodeData.code) {
                 luckyCodeStatus.textContent = "No code today."; luckyCodeStatus.className = 'lucky-code-status'; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "N/A"; return;
             }
             const todayUTCString = new Date().toISOString().split('T')[0];
             const lastClaimDate = userData?.lastLuckyCodeClaim;
             if (lastClaimDate === todayUTCString) {
                 luckyCodeStatus.textContent = `Claimed! +${formatNumber(dailyLuckyCodeData.reward || 0)}`; luckyCodeStatus.className = 'lucky-code-status claimed'; luckyCodeInput.disabled = true; claimLuckyCodeBtn.disabled = true; claimLuckyCodeBtn.textContent = "Claimed";
             } else {
                 luckyCodeStatus.textContent = ""; luckyCodeStatus.className = 'lucky-code-status'; luckyCodeInput.disabled = false; claimLuckyCodeBtn.disabled = false; claimLuckyCodeBtn.textContent = "Claim";
             }
        }
        function handleLuckyCodeClaim() {
            if (isLoading || !userData || !dailyLuckyCodeData || !dailyLuckyCodeData.code) { showWarningPopup("WAIT!", "Daily code N/A or not loaded."); updateLuckyCodeSectionUI(); return; }
             const todayUTCString = new Date().toISOString().split('T')[0];
             if (userData.lastLuckyCodeClaim === todayUTCString) { showInfoPopup("CLAIMED!", "Lucky code already claimed today."); updateLuckyCodeSectionUI(); return; }
             const enteredCode = luckyCodeInput.value.trim().toUpperCase();
             if (!enteredCode) { luckyCodeStatus.textContent = "Enter code."; luckyCodeStatus.className = 'lucky-code-status'; return; }
             if (enteredCode === dailyLuckyCodeData.code.toUpperCase()) {
                 const reward = dailyLuckyCodeData.reward || 0; userData.coins += reward; userData.lastLuckyCodeClaim = todayUTCString; console.log(`Lucky code claim. Reward: +${reward}`);
                 showRewardPopup("CODE OK!", `Yay! +${formatNumber(reward)} lucky coins!`); luckyCodeInput.value = ''; updateUI(); saveUserData(true);
             } else {
                 luckyCodeStatus.textContent = "Bad code. Try again!"; luckyCodeStatus.className = 'lucky-code-status error'; luckyCodeInput.focus(); luckyCodeInput.select();
                 claimLuckyCodeBtn.style.animation = 'shake 0.5s'; setTimeout(() => claimLuckyCodeBtn.style.animation = '', 500);
             }
        }

        function updateAdsUI() {
            if (isLoading || !userData || !userData.ads) return;
            checkAndResetDailyAds();
            const watchedToday = userData.ads.watchedToday || 0;
            const limitReached = watchedToday >= ADS_DAILY_LIMIT;
            const now = Date.now();
            const cooldownActive = now < adCooldownEndTime;

            adsWatchedTodaySpan.textContent = watchedToday;
            adsDailyLimitSpan.textContent = ADS_DAILY_LIMIT;
            adRewardAmountSpan.textContent = formatNumber(AD_REWARD_AMOUNT);
            adMessageP.textContent = ''; adMessageP.className = 'ad-message';

            if (!monetagSdkReady) {
                watchAdButton.disabled = true; watchAdButton.textContent = "Ads N/A";
                adMessageP.textContent = "Ad service fail load."; adMessageP.className = 'ad-message error';
            } else if (limitReached) {
                watchAdButton.disabled = true; watchAdButton.textContent = "Limit Reached";
                adMessageP.textContent = "Come back tomorrow!"; adMessageP.className = 'ad-message limit';
                adCooldownTimerP.style.display = 'none';
                if (adCooldownInterval) clearInterval(adCooldownInterval);
            } else if (cooldownActive) {
                watchAdButton.disabled = true;
            } else {
                watchAdButton.disabled = false; watchAdButton.textContent = "Watch Ad & Earn";
                adCooldownTimerP.style.display = 'none';
                if (adCooldownInterval) clearInterval(adCooldownInterval);
            }
            updateRefillEnergyButton(); // Also update the energy ad button
        }

        function handleWatchAdClick() {
            if (isLoading || !userData || !userData.ads) return;
            const watchedToday = userData.ads.watchedToday || 0;
            const limitReached = watchedToday >= ADS_DAILY_LIMIT;
            const now = Date.now();
            const cooldownActive = now < adCooldownEndTime;

            if (limitReached || cooldownActive || !monetagSdkReady) {
                console.log("Ad watch prevented:", { limitReached, cooldownActive, monetagSdkReady });
                updateAdsUI(); return;
            }
            const showAdFunction = window[`show_${MONETAG_ZONE_ID}`];
            if (typeof showAdFunction !== 'function') {
                console.error(`Monetag show_${MONETAG_ZONE_ID} N/A!`);
                adMessageP.textContent = "Error: Ad service N/A."; adMessageP.className = 'ad-message error';
                watchAdButton.disabled = true; watchAdButton.textContent = "Ads N/A";
                monetagSdkReady = false; return;
            }
            watchAdButton.disabled = true; watchAdButton.textContent = "Loading Ad..."; adMessageP.textContent = '';
            console.log("Showing Monetag ad for coins...");
            try {
                showAdFunction().then(() => {
                    console.log("Monetag ad (coins) watched.");
                    userData.coins += AD_REWARD_AMOUNT;
                    userData.ads.watchedToday += 1;
                    userData.ads.lastWatchedDate = getTodayDateString();
                    console.log(`Ad reward: +${formatNumber(AD_REWARD_AMOUNT)}. Watched: ${userData.ads.watchedToday}`);
                    showRewardPopup("AD WATCHED!", `U earned +${formatNumber(AD_REWARD_AMOUNT)} coins!`);
                    updateCoinDisplay(); updateAdsUI();
                    if (userData.ads.watchedToday < ADS_DAILY_LIMIT) { startAdCooldown(); }
                    saveUserData(true);
                }).catch((error) => {
                    console.error("Monetag ad (coins) fail/skip:", error);
                    adMessageP.textContent = "Ad fail/skip."; adMessageP.className = 'ad-message error';
                    updateAdsUI();
                });
            } catch (error) {
                console.error(`Error calling Monetag show_${MONETAG_ZONE_ID} (coins):`, error);
                adMessageP.textContent = "Err launch ad service."; adMessageP.className = 'ad-message error';
                updateAdsUI();
            }
        }

        function startAdCooldown() {
            if (isLoading) return;
            adCooldownEndTime = Date.now() + AD_COOLDOWN_SECONDS * 1000;
            if (adCooldownInterval) clearInterval(adCooldownInterval);
            watchAdButton.disabled = true; adCooldownTimerP.style.display = 'block';
            const updateTimer = () => {
                const now = Date.now();
                const remainingSeconds = Math.max(0, Math.ceil((adCooldownEndTime - now) / 1000));
                if (remainingSeconds > 0) {
                    watchAdButton.textContent = `Next ad: ${remainingSeconds}s`;
                    adCooldownTimerP.textContent = `Wait ${remainingSeconds}s...`;
                } else {
                    clearInterval(adCooldownInterval); adCooldownInterval = null;
                    adCooldownTimerP.style.display = 'none';
                    updateAdsUI();
                }
            };
            adCooldownInterval = setInterval(updateTimer, 1000);
            updateTimer();
        }

        function handleRefillEnergyAdClick() {
            if (isLoading || !userData || !monetagSdkReady) {
                showWarningPopup("ADS N/A", "Ad service not ready.");
                updateRefillEnergyButton();
                return;
            }
            const now = Date.now();
            if (now < refillEnergyAdCooldownEndTime) {
                 const remaining = Math.ceil((refillEnergyAdCooldownEndTime - now) / 1000);
                 showInfoPopup("COOLDOWN", `Next energy ad in ${remaining}s.`);
                 return;
            }

            const showAdFunction = window[`show_${MONETAG_ZONE_ID}`];
            if (typeof showAdFunction !== 'function') {
                console.error(`Monetag show_${MONETAG_ZONE_ID} N/A for energy!`);
                showWarningPopup("ERR", "Ad service N/A.");
                monetagSdkReady = false; // Mark as not ready
                updateRefillEnergyButton();
                return;
            }

            refillEnergyButton.disabled = true;
            refillEnergyButton.textContent = "Loading Ad...";
            console.log("Showing Monetag ad for energy...");

            try {
                showAdFunction().then(() => {
                    console.log("Monetag ad (energy) watched.");
                    userData.energy = MAX_ENERGY;
                    userData.lastRefillEnergyAdTime = Date.now();
                    refillEnergyAdCooldownEndTime = Date.now() + REFILL_ENERGY_AD_COOLDOWN_SECONDS * 1000;
                    
                    showRewardPopup("ENERGY FULL!", "Your energy is refilled!");
                    updateEnergyBar();
                    updateRefillEnergyButton();
                    saveUserData(true);

                }).catch((error) => {
                    console.error("Monetag ad (energy) fail/skip:", error);
                    showWarningPopup("AD FAIL", "Ad failed or skipped.");
                    updateRefillEnergyButton(); // Re-enable if not in cooldown
                });
            } catch (error) {
                console.error(`Error calling Monetag show_${MONETAG_ZONE_ID} (energy):`, error);
                showWarningPopup("ERR", "Error launching ad service.");
                updateRefillEnergyButton();
            }
        }

        function updateRefillEnergyButton() {
            if (!refillEnergyButton) return;
            const now = Date.now();
            if (!monetagSdkReady) {
                refillEnergyButton.disabled = true;
                refillEnergyButton.textContent = "Ads N/A";
            } else if (now < refillEnergyAdCooldownEndTime) {
                refillEnergyButton.disabled = true;
                const remainingSeconds = Math.ceil((refillEnergyAdCooldownEndTime - now) / 1000);
                refillEnergyButton.textContent = `Refill Ad (${remainingSeconds}s)`;
            } else {
                refillEnergyButton.disabled = false;
                refillEnergyButton.textContent = "Watch Ad for Full Energy";
            }
        }


        function initializeAppUI() {
            missionEmojiDisplay.textContent = WOLF_EMOJI;
            renderShopItems();
            updateUI();
            loadingDiv.style.display = 'none';
            mainContentDiv.style.display = 'flex';
            navbar.style.display = 'flex';
            updateAdsUI();
            updateEnergyBar(); // Initial energy bar update
            updateRefillEnergyButton(); // Initial state for energy ad button
        }
        function updateUI() {
            if (isLoading || !userData || !currentUser) return;
            updateCoinDisplay();
            updateGameStats();
            updateShopItemsUI();
            updateProfileStats();
            updateMissionStatusUI();
            updateLuckyCodeSectionUI();
            updateAdsUI();
            updateEnergyBar();
            updateRefillEnergyButton();
        }
        function updateCoinDisplay() { if (userData) coinBalanceSpan.textContent = formatNumber(userData.coins); }
        function updateGameStats() { if (!userData) return; tapPowerDisplaySpan.textContent = formatNumber(calculateTapPower()); passiveIncomeDisplaySpan.textContent = formatNumber(calculatePassiveIncomeRate()); }
        function updateProfileStats() { if (!userData || !currentUser) return; profileUserIdSpan.textContent = currentUser.id || 'N/A'; profileUsernameSpan.textContent = currentUser.username || 'N/A'; profileFirstNameSpan.textContent = currentUser.first_name || 'N/A'; profileLastNameSpan.textContent = currentUser.last_name || ''; profileCoinsSpan.textContent = formatNumber(userData.coins); profileTapPowerSpan.textContent = formatNumber(calculateTapPower()); profilePassiveIncomeSpan.textContent = formatNumber(calculatePassiveIncomeRate()); tonWalletInput.value = userData.tonWallet || ''; }
        function updateMissionStatusUI() { if (!userData || !currentUser) return; const missionId = 'lastNameWolf'; const status = userData?.missions?.[missionId] || 'incomplete'; updateMissionUI(missionId, status); }
        function updateMissionUI(missionId, status) {
             missionStatusDiv.classList.remove('incomplete', 'claimed'); missionStatusDiv.classList.add(status === 'claimed' ? 'claimed' : 'incomplete'); 
             switch (status) { 
                case 'incomplete': missionStatusDiv.textContent = 'Status: ???'; missionClaimBtn.textContent = 'Check & Claim'; missionClaimBtn.disabled = false; break; 
                case 'claimed': missionStatusDiv.textContent = 'Status: CLAIMED!'; missionClaimBtn.textContent = 'Claimed'; missionClaimBtn.disabled = true; break; 
            } 
        }
        function renderShopItems() { clickUpgradesDiv.innerHTML = ''; passiveUpgradesDiv.innerHTML = ''; if (!userData) { console.warn("No userData for shop."); return; } upgrades.forEach(upgrade => { const itemDiv = document.createElement('div'); itemDiv.className = 'shop-item'; itemDiv.id = `shop-item-${upgrade.id}`; const level = userData.upgrades?.[upgrade.id]?.level || 0; const cost = calculateUpgradeCost(upgrade, level); itemDiv.innerHTML = ` <div class="shop-item-info"> <div class="shop-item-name">${upgrade.name} (Lvl ${level})</div> <div class="shop-item-details">${upgrade.description}</div> <div class="shop-item-cost"> <img src="${COIN_IMAGE_URL}" class="coin-icon" alt=""> <span class="cost-value">${formatNumber(cost)}</span> </div> </div> <button class="buy-button" data-upgrade-id="${upgrade.id}">Buy</button> `; if (upgrade.type === 'click') clickUpgradesDiv.appendChild(itemDiv); else if (upgrade.type === 'passive') passiveUpgradesDiv.appendChild(itemDiv); }); document.querySelectorAll('.buy-button').forEach(button => { button.removeEventListener('click', handleBuyButtonClick); button.addEventListener('click', handleBuyButtonClick); }); updateShopItemsUI(); }
        function updateShopItemsUI() { if (!userData) return; const currentCoins = userData.coins; upgrades.forEach(upgrade => { const itemDiv = document.getElementById(`shop-item-${upgrade.id}`); if (!itemDiv) return; const level = userData.upgrades?.[upgrade.id]?.level || 0; const cost = calculateUpgradeCost(upgrade, level); const nameSpan = itemDiv.querySelector('.shop-item-name'); if (nameSpan) nameSpan.textContent = `${upgrade.name} (Lvl ${level})`; const costSpan = itemDiv.querySelector('.cost-value'); if (costSpan) costSpan.textContent = formatNumber(cost); const button = itemDiv.querySelector('.buy-button'); if (button) button.disabled = currentCoins < cost; }); }
        function handleBuyButtonClick(event) { const upgradeId = event.target.dataset.upgradeId; handleUpgradePurchase(upgradeId); }
        function handleUpgradePurchase(upgradeId) { if (isLoading || !userData) return; const upgradeDef = upgrades.find(u => u.id === upgradeId); if (!upgradeDef) return; const currentLevel = userData.upgrades?.[upgradeId]?.level || 0; const cost = calculateUpgradeCost(upgradeDef, currentLevel); if (userData.coins >= cost) { userData.coins -= cost; if (!userData.upgrades[upgradeId]) userData.upgrades[upgradeId] = { level: 0 }; userData.upgrades[upgradeId].level += 1; console.log(`Buy ${upgradeDef.name} (Lvl ${userData.upgrades[upgradeId].level}), Cost: ${formatNumber(cost)}`); updateUI(); scheduleSave(); } else { console.log("No funds:", upgradeDef.name); const button = document.querySelector(`.buy-button[data-upgrade-id="${upgradeId}"]`); if (button) { button.style.animation = 'shake 0.5s'; setTimeout(() => button.style.animation = '', 500); } } }
        function calculateUpgradeCost(upgradeDef, currentLevel) {
            const scalingFactor = Math.max(1, Math.floor(upgradeDef.baseCost / 100000)); // Less aggressive scaling for lower base costs
            return Math.floor(upgradeDef.baseCost + (currentLevel * INCREASING_COST_BASE * scalingFactor * (1 + currentLevel * 0.03))); // Reduced scaling exponent
        }
        function createClickAnimation(x, y, amount) { const feedback = document.createElement('div'); feedback.className = 'click-value'; feedback.textContent = `+${formatNumber(amount)}`; feedback.style.left = `${x}px`; feedback.style.top = `${y}px`; feedback.style.transform = 'translate(-50%, -100%)'; clickFeedbackDiv.appendChild(feedback); setTimeout(() => { feedback.remove(); }, 1150); }
        function showPage(pageId) {
             if (isLoading) return;
             document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
             const targetPage = document.getElementById(pageId);
             if (!targetPage) { console.error("Target page N/A:", pageId); return; }
             targetPage.classList.add('active');
             targetPage.scrollTop = 0;
             navButtons.forEach(button => {
                 button.classList.remove('active');
                 if (button.id === `nav-${pageId.split('-')[0]}`) { button.classList.add('active'); }
             });
             if (pageId === 'profile-screen') { updateUI(); } 
             else if (pageId === 'tasks-screen') { const activeTabId = document.querySelector('.task-tabs button.active')?.id || 'tab-available'; const listId = activeTabId === 'tab-available' ? 'available-tasks-list' : 'completed-tasks-list'; showTaskListCategory(listId); } 
             else if (pageId === 'ads-screen') { updateAdsUI(); }
             else if (pageId === 'game-screen') { updateEnergyBar(); updateRefillEnergyButton(); } // Ensure energy UI updates when switching to game
         }
        function showShopCategory(categoryId) { shopCategories.forEach(cat => cat.classList.remove('active')); document.getElementById(categoryId).classList.add('active'); shopTabButtons.forEach(button => button.classList.remove('active')); document.getElementById(`tab-${categoryId.split('-')[0]}`).classList.add('active'); }
        function showTaskListCategory(categoryId) { taskListCategories.forEach(cat => cat.classList.remove('active')); const listToShow = document.getElementById(categoryId); if (listToShow) listToShow.classList.add('active'); taskTabButtons.forEach(button => button.classList.remove('active')); document.getElementById(`tab-${categoryId.split('-')[0]}`).classList.add('active'); }
        function saveWallet() { if (isLoading || !userData) return; const newAddress = tonWalletInput.value.trim(); userData.tonWallet = newAddress; saveUserData(true); saveStatusP.textContent = 'Wallet saved!'; saveStatusP.style.color = 'var(--success-color)'; setTimeout(() => saveStatusP.textContent = '', 3000); }
        function showError(message) { const displayMessage = typeof message === 'string' ? message : 'Unknown error.'; loadingDiv.textContent = `ERROR:\n${displayMessage}\nRELOAD PLS.`; loadingDiv.style.color = 'var(--error-color)'; loadingDiv.style.display = 'flex'; console.error("App Error:", displayMessage); mainContentDiv.style.display = 'none'; navbar.style.display = 'none'; if (passiveIncomeIntervalId) clearInterval(passiveIncomeIntervalId); if (adCooldownInterval) clearInterval(adCooldownInterval); if (energyRegenIntervalId) clearInterval(energyRegenIntervalId); isLoading = false; }
        function formatNumber(num) { num = Math.floor(num); const suffixes = ["", "K", "M", "B", "T"]; let suffixIndex = 0; if (num < 1000) return num.toString(); while (num >= 1000 && suffixIndex < suffixes.length - 1) { num /= 1000; suffixIndex++; } let precision = 1; if (num >= 100) precision = 0; else if (num >= 10) precision = 1; const numString = num.toFixed(precision); return (precision > 0 ? parseFloat(numString) : numString) + suffixes[suffixIndex]; }

        function setupEventListeners() {
             coinContainer.removeEventListener('pointerdown', handleTap);
             saveWalletButton.removeEventListener('click', saveWallet);
             copyEmojiBtn.removeEventListener('click', copyMissionEmoji);
             missionClaimBtn.removeEventListener('click', checkAndClaimMission);
             codePopupCancelBtn.removeEventListener('click', hideCodePopup);
             codePopupSubmitBtn.removeEventListener('click', handleCodeSubmit);
             codePopup.removeEventListener('click', handlePopupOverlayClick);
             claimLuckyCodeBtn.removeEventListener('click', handleLuckyCodeClaim);
             watchAdButton.removeEventListener('click', handleWatchAdClick);
             refillEnergyButton.removeEventListener('click', handleRefillEnergyAdClick);


             coinContainer.addEventListener('pointerdown', handleTap, { passive: false });
             saveWalletButton.addEventListener('click', saveWallet);
             copyEmojiBtn.addEventListener('click', copyMissionEmoji);
             missionClaimBtn.addEventListener('click', checkAndClaimMission);
             codePopupCancelBtn.addEventListener('click', hideCodePopup);
             codePopupSubmitBtn.addEventListener('click', handleCodeSubmit);
             codePopup.addEventListener('click', handlePopupOverlayClick);
             claimLuckyCodeBtn.addEventListener('click', handleLuckyCodeClaim);
             watchAdButton.addEventListener('click', handleWatchAdClick);
             refillEnergyButton.addEventListener('click', handleRefillEnergyAdClick);
        }
        function handlePopupOverlayClick(event) { if (event.target === codePopup) { hideCodePopup(); } }

    </script>

</body>
</html>
