<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Meme Wolf Tap</title>
    <!-- Google Material Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!-- Telegram WebApp SDK (You need to serve this file or use Telegram's CDN if available) -->
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>

    <style>
        /* --- Global Styles & Reset --- */
        :root {
            --primary-bg: #1a1a2e; /* Dark blue/purple */
            --secondary-bg: #162447;
            --accent-color: #e43f5a; /* Reddish accent */
            --text-color: #e0e0e0;
            --coin-color: #f7b731; /* Gold */
            --icon-color: #a0a0a0;
            --icon-active-color: #ffffff;
            --button-bg: #1f4068;
            --button-hover-bg: #2a5a8a;
            --disabled-bg: #444;
            --disabled-text: #888;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            -webkit-tap-highlight-color: transparent; /* Disable blue tap highlight */
        }

        html, body {
            height: 100%;
            width: 100%;
            overflow: hidden; /* Prevent default body scroll */
            font-family: 'Arial', sans-serif;
            background-color: var(--primary-bg);
            color: var(--text-color);
            overscroll-behavior: none; /* Prevent pull-to-refresh */
        }

        body {
            display: flex;
            flex-direction: column;
            touch-action: manipulation; /* Improve touch responsiveness, disable double-tap zoom */
        }

        #app {
            display: flex;
            flex-direction: column;
            height: 100%;
            width: 100%;
            overflow: hidden; /* App container manages scroll */
        }

        /* --- Loading State --- */
        #loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100%;
            font-size: 1.5em;
            color: var(--text-color);
        }

        /* --- Page Structure --- */
        .page {
            display: none; /* Hidden by default */
            flex-direction: column;
            flex-grow: 1;
            overflow-y: auto; /* Allow scrolling within the page */
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
            padding: 20px;
            padding-bottom: 80px; /* Space for nav bar */
            background-color: var(--primary-bg);
        }

        .page.active {
            display: flex; /* Show active page */
        }

        /* --- Navigation --- */
        nav {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: space-around;
            align-items: center;
            background-color: var(--secondary-bg);
            border-top: 1px solid var(--accent-color);
            padding: 10px 0;
            z-index: 100;
        }

        nav button {
            background: none;
            border: none;
            color: var(--icon-color);
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            font-size: 0.7em;
            padding: 5px;
        }

        nav button .material-icons {
            font-size: 28px;
            margin-bottom: 2px;
        }

        nav button.active {
            color: var(--icon-active-color);
        }

        /* --- Game Screen --- */
        #game-screen {
            align-items: center;
            text-align: center;
        }

        .stats-bar {
            display: flex;
            justify-content: space-around;
            width: 100%;
            margin-bottom: 15px;
            font-size: 0.9em;
            color: #ccc;
        }

        .stat-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .stat-item .material-icons {
            font-size: 18px;
            color: var(--coin-color);
        }


        .coin-balance-container {
             display: flex;
             align-items: center;
             justify-content: center;
             margin-bottom: 20px;
        }

        #coin-icon-balance {
            width: 35px;
            height: 35px;
            margin-right: 10px;
            vertical-align: middle;
        }

        #coin-balance {
            font-size: 2.5em;
            font-weight: bold;
            color: var(--coin-color);
        }

        #coin-container {
            position: relative;
            width: 200px; /* Adjust size as needed */
            height: 200px;
            margin-top: 30px;
            cursor: pointer;
            user-select: none; /* Prevent image selection */
            -webkit-user-drag: none; /* Prevent image dragging */
        }

         #coin-image {
            width: 100%;
            height: 100%;
            transition: transform 0.08s ease-out;
            border-radius: 50%;
            box-shadow: 0 0 25px rgba(247, 183, 49, 0.5); /* Coin glow */
         }

        #coin-container:active #coin-image {
             transform: scale(0.95); /* Click feedback */
         }

        /* --- Click Feedback Animation --- */
        #click-feedback {
            position: fixed; /* Use fixed to position relative to viewport */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none; /* Allow clicks to pass through */
            overflow: hidden;
            z-index: 99;
        }

        .click-value {
            position: absolute;
            font-size: 1.5em;
            font-weight: bold;
            color: var(--coin-color);
            user-select: none;
            pointer-events: none;
            animation: floatUpFadeOut 1s ease-out forwards;
            white-space: nowrap; /* Prevent wrapping */
        }

        @keyframes floatUpFadeOut {
            0% {
                opacity: 1;
                transform: translateY(0);
            }
            100% {
                opacity: 0;
                transform: translateY(-60px);
            }
        }


        /* --- Shop Screen --- */
        #shop-screen h2 {
            text-align: center;
            margin-bottom: 20px;
            color: var(--accent-color);
        }

        .shop-tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--secondary-bg);
        }

        .shop-tabs button {
            background: none;
            border: none;
            color: var(--icon-color);
            padding: 10px 20px;
            cursor: pointer;
            font-size: 1em;
            border-bottom: 3px solid transparent;
            margin-bottom: -1px; /* Overlap border */
        }

        .shop-tabs button.active {
            color: var(--icon-active-color);
            border-bottom-color: var(--accent-color);
        }

        .shop-category {
            display: none; /* Hide categories by default */
            flex-direction: column;
            gap: 15px;
        }

        .shop-category.active {
            display: flex; /* Show active category */
        }

        .shop-item {
            background-color: var(--secondary-bg);
            padding: 15px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 10px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .shop-item-info {
            flex-grow: 1;
        }

        .shop-item-name {
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 5px;
        }

        .shop-item-details {
            font-size: 0.9em;
            color: #ccc;
            margin-bottom: 8px;
        }
         .shop-item-cost {
            display: flex;
            align-items: center;
            gap: 5px;
            font-weight: bold;
            color: var(--coin-color);
         }
        .shop-item-cost img {
             width: 18px;
             height: 18px;
         }

        .buy-button {
            background-color: var(--button-bg);
            color: var(--text-color);
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.2s ease;
            white-space: nowrap;
        }

        .buy-button:hover:not(:disabled) {
            background-color: var(--button-hover-bg);
        }

        .buy-button:disabled {
            background-color: var(--disabled-bg);
            color: var(--disabled-text);
            cursor: not-allowed;
        }

        /* --- Profile Screen --- */
        #profile-screen h2 {
            text-align: center;
            margin-bottom: 25px;
            color: var(--accent-color);
        }

        .profile-info {
            background-color: var(--secondary-bg);
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .profile-info p {
            margin-bottom: 12px;
            font-size: 1.1em;
            word-break: break-all; /* Break long IDs */
        }
        .profile-info p strong {
            color: var(--coin-color);
            margin-right: 8px;
        }


        .wallet-section {
            background-color: var(--secondary-bg);
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .wallet-section label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
        }

        #ton-wallet-input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 5px;
            border: 1px solid #555;
            background-color: var(--primary-bg);
            color: var(--text-color);
            font-size: 1em;
        }

        #save-wallet-button {
             background-color: var(--accent-color);
             color: white;
             border: none;
             padding: 12px 20px;
             border-radius: 5px;
             cursor: pointer;
             font-weight: bold;
             width: 100%;
             font-size: 1em;
             transition: background-color 0.2s ease;
        }
        #save-wallet-button:hover {
             background-color: #c33049; /* Darker accent */
        }
        #save-status {
            margin-top: 10px;
            text-align: center;
            color: lightgreen;
            font-size: 0.9em;
            height: 1em; /* Reserve space */
        }


        /* --- Utility Classes --- */
        .coin-icon {
            width: 1em;
            height: 1em;
            vertical-align: middle;
            margin: 0 2px;
        }

    </style>
</head>
<body>
    <div id="app">
        <div id="loading">Loading Meme Wolf...</div>

        <!-- Main Content Area (hidden initially) -->
        <div id="main-content" style="display: none; flex-grow: 1; display: flex; flex-direction: column;">

            <!-- Page: Game -->
            <div id="game-screen" class="page active">
                 <div class="stats-bar">
                     <div class="stat-item" title="Coins per tap">
                        <span class="material-icons">touch_app</span>
                        <span id="tap-power-display">1</span>
                    </div>
                     <div class="stat-item" title="Profit per hour">
                         <span class="material-icons">hourglass_bottom</span>
                        <span id="passive-income-display">0</span>/hr
                    </div>
                 </div>

                <div class="coin-balance-container">
                    <img id="coin-icon-balance" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt="Coin">
                    <span id="coin-balance">0</span>
                </div>

                <div id="coin-container">
                    <img id="coin-image" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt="Tap Me!">
                </div>
                 <div id="click-feedback"></div>
            </div>

            <!-- Page: Shop -->
            <div id="shop-screen" class="page">
                <h2>Upgrades Shop</h2>
                <div class="shop-tabs">
                    <button id="tab-click" class="active" onclick="showShopCategory('click-upgrades')">Click Power</button>
                    <button id="tab-passive" onclick="showShopCategory('passive-upgrades')">Passive Income</button>
                </div>

                <div id="click-upgrades" class="shop-category active">
                    <!-- Click upgrade items will be loaded here -->
                    <p>Loading click upgrades...</p>
                </div>
                <div id="passive-upgrades" class="shop-category">
                     <!-- Passive upgrade items will be loaded here -->
                     <p>Loading passive income upgrades...</p>
                 </div>
            </div>

            <!-- Page: Profile -->
            <div id="profile-screen" class="page">
                <h2>Profile & Wallet</h2>
                 <div class="profile-info">
                     <p><strong>User ID:</strong> <span id="profile-userid"></span></p>
                     <p><strong>Username:</strong> <span id="profile-username"></span></p>
                     <p><strong>Total Coins:</strong> <span id="profile-coins"></span> <img class="coin-icon" src="https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png" alt=""></p>
                     <p><strong>Tap Power:</strong> <span id="profile-tap-power"></span> / tap</p>
                     <p><strong>Passive Income:</strong> <span id="profile-passive-income"></span> / hour</p>
                 </div>
                 <div class="wallet-section">
                     <label for="ton-wallet-input">TON Wallet Address:</label>
                     <input type="text" id="ton-wallet-input" placeholder="Enter your TON wallet address">
                     <button id="save-wallet-button">Save Wallet</button>
                     <p id="save-status"></p>
                 </div>
            </div>
        </div>

        <!-- Navigation Bar -->
        <nav id="navbar" style="display: none;">
            <button id="nav-game" class="active" onclick="showPage('game-screen')">
                <span class="material-icons">pets</span> <!-- Changed icon -->
                <span>Game</span>
            </button>
            <button id="nav-shop" onclick="showPage('shop-screen')">
                <span class="material-icons">shopping_bag</span>
                <span>Shop</span>
            </button>
            <button id="nav-profile" onclick="showPage('profile-screen')">
                <span class="material-icons">account_circle</span>
                <span>Profile</span>
            </button>
        </nav>
    </div>

    <script>
        // --- Config ---
        const firebaseConfig = {
            // --- WARNING: Exposing keys like this is insecure for production ---
            // --- Use environment variables or backend functions in a real app ---
            apiKey: "AIzaSyCyH3Z92F8RQweInLC5w_bk_AaLx6XT7UE", // Replace if needed, BUT SECURE IT
            authDomain: "ab-wallet-62482.firebaseapp.com",
            databaseURL: "https://ab-wallet-62482-default-rtdb.firebaseio.com",
            projectId: "ab-wallet-62482",
            storageBucket: "ab-wallet-62482.firebasestorage.app",
            messagingSenderId: "642030839072",
            appId: "1:642030839072:web:77fc92375ba72e2ee62345"
        };

        const COIN_IMAGE_URL = "https://preview--ab-wallet-tap-power.lovable.app/lovable-uploads/3a2a084b-4cf2-4293-8e80-3f202d4abe87.png";
        const BASE_TAP_EARN = 0.1; // Initial earn rate (can be adjusted by upgrades)
        const SAVE_INTERVAL = 5000; // Save data every 5 seconds
        const PASSIVE_INCOME_INTERVAL = 1000; // Calculate passive income every second
        const INCREASING_COST_BASE = 10000; // Extra cost per level for upgrades

        // --- Telegram & Firebase Vars ---
        let tg = null;
        let db = null;
        let currentUser = null;
        let userData = null;
        let lastSaveTime = 0;
        let saveTimeout = null;
        let passiveIncomeIntervalId = null;

        // --- DOM Elements ---
        const loadingDiv = document.getElementById('loading');
        const mainContentDiv = document.getElementById('main-content');
        const navbar = document.getElementById('navbar');
        const coinBalanceSpan = document.getElementById('coin-balance');
        const tapPowerDisplaySpan = document.getElementById('tap-power-display');
        const passiveIncomeDisplaySpan = document.getElementById('passive-income-display');
        const coinContainer = document.getElementById('coin-container');
        const clickFeedbackDiv = document.getElementById('click-feedback');
        const clickUpgradesDiv = document.getElementById('click-upgrades');
        const passiveUpgradesDiv = document.getElementById('passive-upgrades');
        const profileUserIdSpan = document.getElementById('profile-userid');
        const profileUsernameSpan = document.getElementById('profile-username');
        const profileCoinsSpan = document.getElementById('profile-coins');
        const profileTapPowerSpan = document.getElementById('profile-tap-power');
        const profilePassiveIncomeSpan = document.getElementById('profile-passive-income');
        const tonWalletInput = document.getElementById('ton-wallet-input');
        const saveWalletButton = document.getElementById('save-wallet-button');
        const saveStatusP = document.getElementById('save-status');
        const navButtons = document.querySelectorAll('nav button');
        const shopTabButtons = document.querySelectorAll('.shop-tabs button');
        const shopCategories = document.querySelectorAll('.shop-category');

        // --- Upgrade Definitions ---
        // Structure: id, name, description, baseCost, baseEffect (tap or passive), type ('click' or 'passive')
        const upgrades = [
            // Click Upgrades (10 items)
            { id: 'click_1', name: 'Stronger Paws', description: '+1 coin per tap', baseCost: 10000, baseEffect: 1, type: 'click' },
            { id: 'click_2', name: 'Sharper Claws', description: '+2 coins per tap', baseCost: 100000, baseEffect: 2, type: 'click' },
            { id: 'click_3', name: 'Meme Energy', description: '+5 coins per tap', baseCost: 500000, baseEffect: 5, type: 'click' },
            { id: 'click_4', name: 'Wolf Pack Call', description: '+10 coins per tap', baseCost: 2000000, baseEffect: 10, type: 'click' },
            { id: 'click_5', name: 'Lunar Boost', description: '+25 coins per tap', baseCost: 10000000, baseEffect: 25, type: 'click' },
            { id: 'click_6', name: 'Golden Howl', description: '+50 coins per tap', baseCost: 50000000, baseEffect: 50, type: 'click' },
            { id: 'click_7', name: 'Diamond Fangs', description: '+100 coins per tap', baseCost: 250000000, baseEffect: 100, type: 'click' },
            { id: 'click_8', name: 'Alpha Presence', description: '+200 coins per tap', baseCost: 1000000000, baseEffect: 200, type: 'click' },
            { id: 'click_9', name: 'Meme Lord Aura', description: '+500 coins per tap', baseCost: 5000000000, baseEffect: 500, type: 'click' },
            { id: 'click_10', name: 'Cosmic Wolf', description: '+1000 coins per tap', baseCost: 20000000000, baseEffect: 1000, type: 'click' },

            // Passive Income Upgrades (20 items)
            { id: 'passive_1', name: 'Sniffing Out Coins', description: '+100 profit/hour', baseCost: 10000, baseEffect: 100, type: 'passive' },
            { id: 'passive_2', name: 'Digging Spot', description: '+250 profit/hour', baseCost: 50000, baseEffect: 250, type: 'passive' },
            { id: 'passive_3', name: 'Buried Treasure Map', description: '+600 profit/hour', baseCost: 150000, baseEffect: 600, type: 'passive' },
            { id: 'passive_4', name: 'Meme Stash', description: '+1,500 profit/hour', baseCost: 500000, baseEffect: 1500, type: 'passive' },
            { id: 'passive_5', name: 'Coin Tree Sapling', description: '+3,500 profit/hour', baseCost: 1500000, baseEffect: 3500, type: 'passive' },
            { id: 'passive_6', name: 'Howling ATM', description: '+8,000 profit/hour', baseCost: 5000000, baseEffect: 8000, type: 'passive' },
            { id: 'passive_7', name: 'Loyal Pack Tribute', description: '+18,000 profit/hour', baseCost: 15000000, baseEffect: 18000, type: 'passive' },
            { id: 'passive_8', name: 'Wolf Den Bank', description: '+40,000 profit/hour', baseCost: 50000000, baseEffect: 40000, type: 'passive' },
            { id: 'passive_9', name: 'Meme Coin Mine', description: '+90,000 profit/hour', baseCost: 150000000, baseEffect: 90000, type: 'passive' },
            { id: 'passive_10', name: 'Moonlit Mint', description: '+200K profit/hour', baseCost: 500000000, baseEffect: 200000, type: 'passive' },
            { id: 'passive_11', name: 'Crypto Kennel', description: '+450K profit/hour', baseCost: 1200000000, baseEffect: 450000, type: 'passive' },
            { id: 'passive_12', name: 'Decentralized Den', description: '+1M profit/hour', baseCost: 3000000000, baseEffect: 1000000, type: 'passive' },
            { id: 'passive_13', name: 'Blockchain Burrow', description: '+2.2M profit/hour', baseCost: 7000000000, baseEffect: 2200000, type: 'passive' },
            { id: 'passive_14', name: 'Wolf Street Journal', description: '+5M profit/hour', baseCost: 15000000000, baseEffect: 5000000, type: 'passive' },
            { id: 'passive_15', name: 'Golden Bone Fund', description: '+11M profit/hour', baseCost: 35000000000, baseEffect: 11000000, type: 'passive' },
            { id: 'passive_16', name: 'Diamond Paw Trust', description: '+25M profit/hour', baseCost: 80000000000, baseEffect: 25000000, type: 'passive' },
            { id: 'passive_17', name: 'Alpha Investment Group', description: '+55M profit/hour', baseCost: 180000000000, baseEffect: 55000000, type: 'passive' },
            { id: 'passive_18', name: 'Meme Hegemony', description: '+120M profit/hour', baseCost: 400000000000, baseEffect: 120000000, type: 'passive' },
            { id: 'passive_19', name: 'Lunar Treasury', description: '+250M profit/hour', baseCost: 900000000000, baseEffect: 250000000, type: 'passive' },
            { id: 'passive_20', name: 'Cosmic Coin Flow', description: '+500M profit/hour', baseCost: 2000000000000, baseEffect: 500000000, type: 'passive' },
        ];


        // --- Initialization ---
        window.onload = () => {
            try {
                tg = window.Telegram.WebApp;
                tg.ready(); // Inform Telegram the app is ready
                tg.expand(); // Expand the app to full height

                // Basic user info check
                if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) {
                    showError("Could not get Telegram user data. Please launch from Telegram.");
                    return;
                }
                currentUser = tg.initDataUnsafe.user;

                // Initialize Firebase
                firebase.initializeApp(firebaseConfig);
                db = firebase.database();

                // Load user data or create new
                loadUserData();

                // Setup Event Listeners
                setupEventListeners();

            } catch (error) {
                console.error("Initialization Error:", error);
                showError(`Initialization failed: ${error.message}`);
            }
        };

        // --- Firebase Functions ---
        function loadUserData() {
            if (!currentUser || !db) {
                showError("User or Database not initialized.");
                return;
            }
            const userId = currentUser.id.toString(); // Firebase keys must be strings
            const userRef = db.ref('users/' + userId);

            userRef.once('value')
                .then((snapshot) => {
                    if (snapshot.exists()) {
                        userData = snapshot.val();
                        // Ensure essential structures exist if loaded data is old/incomplete
                        if (!userData.upgrades) userData.upgrades = {};
                        if (userData.coins === undefined || userData.coins === null) userData.coins = 0;
                        if (!userData.tonWallet) userData.tonWallet = '';
                        if (!userData.lastUpdate) userData.lastUpdate = Date.now();

                        // Calculate offline progress
                        calculateOfflineProgress();

                    } else {
                        console.log("New user, creating default data for:", userId);
                        // Create default data for new user
                        userData = {
                            coins: 0,
                            upgrades: {}, // Store levels like { 'upgrade_id': level }
                            tonWallet: '',
                            lastUpdate: Date.now(),
                            telegramInfo: { // Store some basic info for reference
                                id: currentUser.id,
                                username: currentUser.username || 'N/A',
                                firstName: currentUser.first_name || '',
                                lastName: currentUser.last_name || ''
                            }
                        };
                        // Save immediately for new user
                        saveUserData(true); // Force immediate save
                    }

                    // Start passive income interval AFTER data is loaded/created
                    startPassiveIncome();
                    // Initial UI setup
                    initializeAppUI();
                })
                .catch((error) => {
                    console.error("Firebase Load Error:", error);
                    showError(`Failed to load data: ${error.message}`);
                });
        }

        function saveUserData(force = false) {
             if (!currentUser || !db || !userData) return; // Not ready

             const now = Date.now();
             userData.lastUpdate = now; // Update last saved timestamp

             // Debounce saving unless forced
             clearTimeout(saveTimeout);
             if (force || now - lastSaveTime > SAVE_INTERVAL) {
                console.log("Saving data to Firebase...");
                const userId = currentUser.id.toString();
                db.ref('users/' + userId).set(userData)
                    .then(() => {
                        console.log("Data saved successfully.");
                        lastSaveTime = now;
                    })
                    .catch((error) => {
                        console.error("Firebase Save Error:", error);
                        // Maybe notify user if save fails repeatedly?
                    });
             } else {
                 // Schedule a save if not forced and interval hasn't passed
                 saveTimeout = setTimeout(() => saveUserData(true), SAVE_INTERVAL - (now - lastSaveTime));
                 console.log("Scheduling save...");
             }
        }

        // --- Game Logic ---
        function handleTap(event) {
            if (!userData) return;

            const tapValue = calculateTapPower();
            userData.coins += tapValue;

            // Create click animation at touch/click position
            // Use event.touches for multi-touch if needed
            let clientX, clientY;
             if (event.touches && event.touches.length > 0) {
                // Handle touch events (multiple touches)
                for (let i = 0; i < event.touches.length; i++) {
                    clientX = event.touches[i].clientX;
                    clientY = event.touches[i].clientY;
                    createClickAnimation(clientX, clientY, tapValue);
                }
             } else {
                 // Handle mouse click event
                 clientX = event.clientX;
                 clientY = event.clientY;
                 createClickAnimation(clientX, clientY, tapValue);
             }


            updateCoinDisplay();
            scheduleSave(); // Use scheduled save instead of immediate
        }

        function calculateTapPower() {
            let power = BASE_TAP_EARN;
            for (const upgradeId in userData.upgrades) {
                const upgradeDef = upgrades.find(u => u.id === upgradeId);
                if (upgradeDef && upgradeDef.type === 'click') {
                    const level = userData.upgrades[upgradeId]?.level || 0;
                    power += upgradeDef.baseEffect * level;
                }
            }
            return power;
        }

         function calculatePassiveIncomeRate() {
             let rate = 0; // Per hour
             for (const upgradeId in userData.upgrades) {
                 const upgradeDef = upgrades.find(u => u.id === upgradeId);
                 if (upgradeDef && upgradeDef.type === 'passive') {
                     const level = userData.upgrades[upgradeId]?.level || 0;
                     rate += upgradeDef.baseEffect * level;
                 }
             }
             return rate;
         }

         function applyPassiveIncome() {
            if (!userData) return;

            const hourlyRate = calculatePassiveIncomeRate();
            const incomePerSecond = hourlyRate / 3600;

            if (incomePerSecond > 0) {
                userData.coins += incomePerSecond;
                updateCoinDisplay(); // Update display frequently
                // Saving is handled by the scheduled save mechanism
            }
        }

        function calculateOfflineProgress() {
            if (!userData || !userData.lastUpdate) return;

            const now = Date.now();
            const offlineSeconds = Math.max(0, Math.floor((now - userData.lastUpdate) / 1000));
            const hourlyRate = calculatePassiveIncomeRate(); // Use the *current* rate based on upgrades
            const offlineIncome = (hourlyRate / 3600) * offlineSeconds;

            if (offlineIncome > 0) {
                userData.coins += offlineIncome;
                console.log(`Applied offline income: ${formatNumber(offlineIncome)} coins for ${offlineSeconds} seconds.`);
                // Optionally, show a notification to the user about offline earnings
                 tg?.showPopup({
                    title: "Welcome Back!",
                    message: `You earned ${formatNumber(offlineIncome)} coins while you were away!`,
                    buttons: [{ type: "ok" }],
                });
            }
            // Update lastUpdate timestamp immediately after calculating
            userData.lastUpdate = now;
        }

        function startPassiveIncome() {
             if (passiveIncomeIntervalId) clearInterval(passiveIncomeIntervalId); // Clear existing interval if any
             passiveIncomeIntervalId = setInterval(applyPassiveIncome, PASSIVE_INCOME_INTERVAL);
         }

         function scheduleSave() {
             // Request a save, which will be debounced by saveUserData
             saveUserData();
         }


        // --- UI Functions ---
        function initializeAppUI() {
            renderShopItems();
            updateUI(); // Full UI update
            loadingDiv.style.display = 'none';
            mainContentDiv.style.display = 'flex'; // Use flex for main content layout
            navbar.style.display = 'flex'; // Show navbar
        }

        function updateUI() {
            if (!userData || !currentUser) return;

            const currentCoins = userData.coins;
            const currentTapPower = calculateTapPower();
            const currentPassiveRate = calculatePassiveIncomeRate();

            // Game Screen
            updateCoinDisplay(); // Uses userData.coins directly
            tapPowerDisplaySpan.textContent = formatNumber(currentTapPower);
            passiveIncomeDisplaySpan.textContent = formatNumber(currentPassiveRate);


            // Shop Screen - Update button states and costs
            updateShopItemsUI();

            // Profile Screen
            profileUserIdSpan.textContent = currentUser.id;
            profileUsernameSpan.textContent = currentUser.username || `${currentUser.first_name} ${currentUser.last_name || ''}`.trim() || 'N/A';
            profileCoinsSpan.textContent = formatNumber(currentCoins);
            profileTapPowerSpan.textContent = formatNumber(currentTapPower);
            profilePassiveIncomeSpan.textContent = formatNumber(currentPassiveRate);
            tonWalletInput.value = userData.tonWallet || '';
        }

         function updateCoinDisplay() {
             if (userData) {
                 coinBalanceSpan.textContent = formatNumber(userData.coins);
             }
         }


        function renderShopItems() {
            clickUpgradesDiv.innerHTML = ''; // Clear existing
            passiveUpgradesDiv.innerHTML = '';

            upgrades.forEach(upgrade => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'shop-item';
                itemDiv.id = `shop-item-${upgrade.id}`; // Add ID for easier updates

                const level = userData?.upgrades?.[upgrade.id]?.level || 0;
                const cost = calculateUpgradeCost(upgrade, level);

                itemDiv.innerHTML = `
                    <div class="shop-item-info">
                        <div class="shop-item-name">${upgrade.name} (Lv. ${level})</div>
                        <div class="shop-item-details">${upgrade.description}</div>
                        <div class="shop-item-cost">
                             <img src="${COIN_IMAGE_URL}" class="coin-icon" alt="">
                             <span class="cost-value">${formatNumber(cost)}</span>
                         </div>
                    </div>
                    <button class="buy-button" data-upgrade-id="${upgrade.id}">Buy</button>
                `;

                if (upgrade.type === 'click') {
                    clickUpgradesDiv.appendChild(itemDiv);
                } else if (upgrade.type === 'passive') {
                    passiveUpgradesDiv.appendChild(itemDiv);
                }
            });

             // Add event listeners to the new buttons
             document.querySelectorAll('.buy-button').forEach(button => {
                 button.addEventListener('click', handleBuyButtonClick);
             });

             updateShopItemsUI(); // Initial state update
        }

         function updateShopItemsUI() {
             if (!userData) return;
             const currentCoins = userData.coins;

             upgrades.forEach(upgrade => {
                 const itemDiv = document.getElementById(`shop-item-${upgrade.id}`);
                 if (!itemDiv) return; // Should not happen if renderShopItems was called

                 const level = userData.upgrades?.[upgrade.id]?.level || 0;
                 const cost = calculateUpgradeCost(upgrade, level);

                 // Update Level in name
                 const nameSpan = itemDiv.querySelector('.shop-item-name');
                 if (nameSpan) nameSpan.textContent = `${upgrade.name} (Lv. ${level})`;

                 // Update Cost display
                 const costSpan = itemDiv.querySelector('.cost-value');
                  if (costSpan) costSpan.textContent = formatNumber(cost);

                 // Update Button State
                 const button = itemDiv.querySelector('.buy-button');
                 if (button) {
                     button.disabled = currentCoins < cost;
                 }
             });
         }

         function handleBuyButtonClick(event) {
             const upgradeId = event.target.dataset.upgradeId;
             handleUpgradePurchase(upgradeId);
         }


        function handleUpgradePurchase(upgradeId) {
            if (!userData) return;

            const upgradeDef = upgrades.find(u => u.id === upgradeId);
            if (!upgradeDef) {
                console.error("Upgrade definition not found:", upgradeId);
                return;
            }

            const currentLevel = userData.upgrades?.[upgradeId]?.level || 0;
            const cost = calculateUpgradeCost(upgradeDef, currentLevel);

            if (userData.coins >= cost) {
                // Sufficient funds
                userData.coins -= cost;

                // Initialize upgrade entry if it doesn't exist
                if (!userData.upgrades[upgradeId]) {
                    userData.upgrades[upgradeId] = { level: 0 };
                }
                userData.upgrades[upgradeId].level += 1;

                console.log(`Purchased ${upgradeDef.name} (Level ${userData.upgrades[upgradeId].level}), Cost: ${formatNumber(cost)}`);

                // Update UI immediately for responsiveness
                updateUI();
                // Save data (debounced)
                scheduleSave();

            } else {
                // Insufficient funds - maybe add visual feedback (shake button?)
                console.log("Insufficient funds for:", upgradeDef.name);
                 const button = document.querySelector(`.buy-button[data-upgrade-id="${upgradeId}"]`);
                 if (button) {
                     button.style.animation = 'shake 0.5s';
                     setTimeout(() => button.style.animation = '', 500);
                 }
            }
        }

        function calculateUpgradeCost(upgradeDef, currentLevel) {
            // Cost increases by INCREASING_COST_BASE for each level already purchased
            return upgradeDef.baseCost + (currentLevel * INCREASING_COST_BASE);
        }


        function createClickAnimation(x, y, amount) {
            const feedback = document.createElement('div');
            feedback.className = 'click-value';
            feedback.textContent = `+${formatNumber(amount)}`; // Format the number briefly

            // Adjust position slightly to center the text near the click/touch point
            feedback.style.left = `${x - feedback.offsetWidth / 2}px`;
            feedback.style.top = `${y - 20}px`; // Start slightly above the click point

            clickFeedbackDiv.appendChild(feedback);

            // Remove the element after the animation finishes
            setTimeout(() => {
                feedback.remove();
            }, 1000); // Match animation duration
        }


        function showPage(pageId) {
            document.querySelectorAll('.page').forEach(page => {
                page.classList.remove('active');
            });
            document.getElementById(pageId).classList.add('active');

            navButtons.forEach(button => {
                button.classList.remove('active');
                 if (button.id === `nav-${pageId.split('-')[0]}`) { // Match nav button id pattern
                     button.classList.add('active');
                 }
            });

            // Save data when switching pages as a good checkpoint
            scheduleSave();
        }

        function showShopCategory(categoryId) {
            shopCategories.forEach(cat => cat.classList.remove('active'));
            document.getElementById(categoryId).classList.add('active');

            shopTabButtons.forEach(button => button.classList.remove('active'));
             document.getElementById(`tab-${categoryId.split('-')[0]}`).classList.add('active'); // Match tab button id pattern
        }

        function saveWallet() {
            if (!userData) return;
            const newAddress = tonWalletInput.value.trim();
            userData.tonWallet = newAddress;
            saveUserData(true); // Force save for wallet changes
            saveStatusP.textContent = 'Wallet address saved!';
            setTimeout(() => saveStatusP.textContent = '', 3000); // Clear status message
        }

        function showError(message) {
            loadingDiv.textContent = `Error: ${message}`;
            loadingDiv.style.color = 'red';
            console.error("App Error:", message);
            // Hide other elements if error occurs early
            mainContentDiv.style.display = 'none';
            navbar.style.display = 'none';
        }

        // --- Utility Functions ---
        function formatNumber(num) {
            num = Math.floor(num); // Work with integers for display formatting
            const suffixes = ["", "K", "M", "B", "T", "Qa", "Qi", "Sx", "Sp", "Oc", "No", "Dc"];
            let suffixIndex = 0;

            if (num < 1000) {
                return num.toString();
            }

            while (num >= 1000 && suffixIndex < suffixes.length - 1) {
                num /= 1000;
                suffixIndex++;
            }

            // Show one decimal place for thousands and above
             return num.toFixed(num < 10 ? 2 : num < 100 ? 1 : 0) + suffixes[suffixIndex];
             // Simpler alternative: always show 1 decimal if > 1000
             // return num.toFixed(1) + suffixes[suffixIndex];
        }

        // --- Event Listeners Setup ---
        function setupEventListeners() {
            // Coin Tap Listener (handles both touch and mouse)
             coinContainer.addEventListener('pointerdown', handleTap, { passive: false }); // Use pointerdown for better multi-touch start detection


            // Save Wallet Button
            saveWalletButton.addEventListener('click', saveWallet);

            // Navigation buttons are handled by onclick attributes in HTML for simplicity here
            // Shop tabs are handled by onclick attributes in HTML
        }

    </script>

    <!-- Basic CSS for shake animation -->
    <style>
        @keyframes shake {
          10%, 90% { transform: translate3d(-1px, 0, 0); }
          20%, 80% { transform: translate3d(2px, 0, 0); }
          30%, 50%, 70% { transform: translate3d(-4px, 0, 0); }
          40%, 60% { transform: translate3d(4px, 0, 0); }
        }
    </style>

</body>
</html>
